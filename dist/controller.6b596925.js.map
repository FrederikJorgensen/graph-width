{"version":3,"sources":["Components/Chapter.js","Components/Sidebar.js","Components/Section.js","Utilities/helpers.js","Utilities/readTree.js","Components/ContextMenu.js","Components/Graph.js","Components/TreeContextMenu.js","Components/Tree.js","Components/TreeDecomposition.js","Utilities/graphs.js","Handlers/SectionHandler.js","Handlers/ChapterHandler.js","Components/Roadmap.js","controller.js"],"names":["Chapter","chapter","name","isActive","createChapter","Sidebar","title","draw","setTitle","addContentArea","d3","selectAll","remove","select","exerciseContainer","exercise","contentContainer","append","attr","exerciseContent","html","correctness","choices","style","isSolutionShowing","solutionButton","text","solutionTextContainer","transition","duration","solutionText","answer","removeCorrectness","addCorrectness","end","correctAnswer","submitContainer","quiz","submitButton","on","checkAnswer","currentGuess","solutionButtonContainer","createSolutionContainer","toggleSolution","addSubmitButton","addSolutionButton","isCorrectAnswer","choice","currentId","buttonText","event","buttonContainer","datum","sidebarContainer","handler","sectionHandler","sections","progressBarContainer","goPreviousSection","w","length","data","join","enter","d","goToSection","update","exit","goNextSection","navButtonsContainer","content","Section","section","createSection","renderMathInElement","document","body","generateRandomGraph","n","m","maxNumEdges","graph","nodes","links","i","id","label","randomInt","min","max","k","z","state","j","Math","floor","random","unpair","sqrt","x","y","u","v","push","source","target","hull","points","polygonHull","readLocalFile","file","fetch","response","window","split","getAllSubsets","theArray","reduce","subsets","value","concat","map","set","deepClone","obj","objType","result","Array","isArray","constructor","Map","keys","key","get","hasOwnProperty","compareMaps","map1","map2","testVal","size","val","undefined","has","readTreeDecomposition","treeData","pop","treeDecomp","textLine","bagLabel","vertices","startsWith","splitted","bagId","parseInt","shift","currentNode","readNiceTreeDecomposition","edgePairs","root","allBagLabels","verticesInBag","line","baglabel","replace","sourceNode","targetNode","edge","newTree","createTree","children","indexOfRoot","indexOf","Number","splice","tree","liss","child","readLocalTreeFile","contextMenu","action","elm","number","prompt","temp","forEach","vertix","restart","removeNode","colors","scaleOrdinal","schemeCategory10","generatePowerSet","array","subset","highlightVertex","nodeId","removeHighlightVertex","timeout","ms","Promise","resolve","setTimeout","repeat","nodesToHighlight","animationSpeed","filter","node","includes","makeRequest","method","url","reject","xhr","XMLHttpRequest","open","setRequestHeader","onload","status","statusText","onerror","send","buildAdjList","newNodes","newLinks","adjList","e","removeLinks","l","resetStyles","Graph","container","maxStop","selectedNodes","isHoverEffect","animDuration","testingCoherence","cancel","lastNodeId","masterNodes","Set","adjacencyList","introducedVertex","s","subTree","subGraph","createSubgraph","verticesInSubGraph","returnAdj","isNeighborInSet","separatorNodes","path","restNodes","restLinks","link","checkConnectivity","cluster","simulation","force","forceLink","distance","strength","forceCollide","radius","forceManyBody","groupingForce","forceInABox","template","groupBy","enableGrouping","linkStrengthInterCluster","linkStrengthIntraCluster","forceLinkDistance","forceCharge","alpha","distanceMin","graphOfTd","showCoherence","hideCoherence","showSeparator","hideSeparator","parentNode","forgottenVertices","treeNode","delay","anim","ease","easeElastic","bag","visitBag","introducedNode","positionTracker","oldState","color","find","subGraphNodeIds","currentLink","path2","separatorNodes2","tooltip","arrow","addTooltip","nodeSvg","svg","top","getElementById","getBoundingClientRect","left","vertex1","vertex2","adj","isHovering","maximumSet","maximumIndependentSet","candidato","conjunto","c","pares","par","test1","test2","isNaN","classed","isIntroducedVertexNeighbor","tNodes","lol","onenode","JSON","stringify","edges","vertex","visited","stack","currentVertex","tail","v2","parentBag","highlightNodes","animateDeleteNode","allEdges","allNodes","newBags","interrupt","resetLinkStyles","resetTextStyles","resetTreeDecompositionStyles","stopAllTransitions","testCoherence","edgeCoverage","testNodeCoverage","convertedArray","readTree","td","nicetd","newJson","getAllEdges","largestNode","getLargestNode","then","resetNodeStyling","checkBalanceSeparator","subGraphNodes","linksToRemove","subGraphLinks","nodeToRemove","isSeparatingNodesAdjacent","colorNotSeparating","balanceLimit","isSeparatorSet","isDisconnected","newnodes","connectedComponents","nc","componentLength","Object","values","cl","colorSeparating","nodeInSeparatorSet","allSubsets","allProperSubsets","sg","subg","checkMinimalSeparator","componentCount","q","v1","toString","newNode","nodeToCheck","some","selectNode","every","isNeighboring","checkSeparator","possibleMaxSet","pair","isMax","String","raw","isMisRunning","animationSoeed","hoverEffect","isConnected","currentBag","counter","multipleNodes","tempNodes","tempLinks","treeString","nodeCoverageString","edgeCoverageString","coherenceString","validString","isTree","areNodesInTree","isEveryGraphLinkInTree","checkCoherence","tempSet","preventDefault","updateMasterList","lower","removeEdge","disableAddNode","enableAddNode","beginDrawLine","stopDrawLine","menu","canAddNode","button","coords","mouse","currentTarget","setg","indexOfNode","dragLine","mousedownNode","ctrlKey","newLink","clear","offsetWidth","h","offsetHeight","width","height","restartSimulation","addNode","updateDragLine","hideDragLine","leftCanvas","forceSimulation","forceX","forceY","type","linkSvg","treeg","call","drag","active","alphaTarget","fx","fy","substring","curve","curveBasisClosed","forceCenter","r","pointArr","buildAdjacencyList","randomGraph","loadGraph","arraysMatch","arr1","arr2","prototype","subSet","otherSet","elem","myColor","domain","range","schemeSet3","multiDimensionalUnique","arr","uniques","itemsFound","stringified","moveColorTable","moveTooltip","maxSetIncl","maxSetExcl","cx","cy","getSubTree","rootOfSubtree","each","descendants","Tree","isMis","isColor","current","isBinary","sum","ta","add","tempSet2","eachAfter","isViableNodeType","finalBoolean","isNodeCoverage","checkNodeType","setAllG","treeLayout","slice","depth","parent","checkNiceProperties","newNodeObject","hierarchy","currentParent","nIndex","largestSet","setToHighlight","sb","parse","runMis","currentSubTree","table","thead","console","log","index","entries","from","matchings","entry","start","unshift","right","isMisNormalTree","N","misiterative","threeColor","nodeToAnimate","descendantsIds","desLinks","wat","item","item_as_string","contains","ele","animateNode","animateLink","childKeys","childTable","getChild","getIntroducedVertex","childKey","newMap","newArray","childState","isEdge","childStates","cs","states","forgottenVertex","getForgottenVertex","M","a","aIndex","newArr","arrayOfDegrees","possible","matching","e1","e2","child2","getChild2","drawHamiltonianTable","colorArray","copy","hideTooltip","hideArrow","hideHull","inducedSubgraph","highlightSubGraph","childClone","childsStates","addNodeArrow","resetNodeColors","highlightNodeColor","newStates","newState","ps","checkIntroducedVertex","parsed","forgottenVertexIndex","uw","child1","child1States","child2States","child1SubTree","child1SubGraph","child2SubTree","child2SubGraph","highlightSubGraph2","isArrayInArray","clone1","clone","childsVertices","animX","sort","child1Table","child2Table","child1value","child2value","currentNodeValue","childsTable","concatV","setWithoutV","setWithV","isVertexAdjacent","oldValue","highlightMaxSet","innerText","isThreeColor","colorTable","removeColorTable","disableAllAlgorithms","addArrow","removeMisTable","addColorTable","isHamiltonianPath","mis","hamiltonianPath","TreeDecomposition","checkTreeDecomposition","rx","graph1","exampleGraph","exampleGraph2","exampleGraph3","exampleGraph4","gridGraph","cliqueGraph","SectionHandler","sidebar","currentSectionIndex","currentChapter","addContent","addExercise","toggleSeparatorExercise","resetExercises","toggleMinimalSeparatorExercise","toggleBalanceSeparatorExercise","computeTreeDecomposition","td1","getTreeDecomposition","treeDecomposition","toggleHoverEffect","addButton","runNodeCoverage","runEdgeCoverage","highlightCoherence","trivialTreeDecomposition","computeTrivialTreeDecomposition","anotherTd","td3","addQuiz","addChoice","addSolution","td4","tree1","tree2","tree3","toggleSeparator","toggleCoherenceProof","enableDrawing","graphContainer","treeContainer","niceTreeDecompositionData","getNiceTreeDecomposition","niceTreeDecomposition","load","setGraph","setMisNormalTree","setAllNodes","nextStep","previousStep","enableMaximumIndependentSet","controlsContainer","previous","next","enableThreeColor","runThreeColor","addContainers","enableHamiltonianPath","addAlgorithmControls","createCustomSection","graphData","newLine","sectionFunctionBuilder","addSection","currentSection","history","replaceState","params","URLSearchParams","location","search","chapterHandler","chapters","create","updateProgressBar","ChapterHandler","sandboxSidebarContainer","sandboxSidebar","sandboxAppContainer","rightSide","niceTdData","editor","CodeMirror","fromTextArea","mode","theme","lineNumbers","autoCloseBrackets","setSize","someString","formattedJSON","js_beautify","indent_size","getRoot","userInput","customFunction","misButtonContainer","getValue","setValue","controls","eval","graphLoaded","treeDecompositionLoaded","numberOfVertices","numberOfEdges","treeDecompositionData","leftSide","isSandbox","isCustom","chapterNumber","chapterNumberString","loadFirstSection","addHandler","addProgresBar","Roadmap","overlay","close","toggle","roadmapChapters","visible","hide","goToChapter","show","hasChapter","chapterIndex","hasSandbox","hasCustom","roadmap","logoContainer","startFirstLevel","onclick"],"mappings":"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","file":"controller.6b596925.js","sourceRoot":"..\\public","sourcesContent":["export default class Chapter {\n  constructor(chapter, name, isActive) {\n    this.createChapter = chapter;\n    this.name = name;\n    this.isActive = isActive;\n  }\n\n  create() {\n    this.createChapter();\n  }\n}\n","export default class Sidebar {\n  constructor(title) {\n    this.title = title;\n    this.draw();\n    this.setTitle(this.title);\n    this.addContentArea();\n  }\n\n  clear() {\n    d3.selectAll('.button-container').remove();\n    d3.select('.quiz').remove();\n    if (this.exerciseContainer) this.exerciseContainer.remove();\n  }\n\n  addExercise(exercise) {\n    const exerciseContainer = this.contentContainer.append('div').attr('class', 'exercise-box');\n    this.exerciseContainer = exerciseContainer;\n\n    const exerciseContent = this.exerciseContainer.append('div').html(`<strong class=\"exercise-title\">Exercise:</strong> ${exercise}`);\n    this.exerciseContent = exerciseContent;\n  }\n\n  removeCorrectness() {\n    if (this.correctness) this.correctness.remove();\n  }\n\n  addCorrectness() {\n    const correctness = this.choices.append('div').style('height', '0px').attr('class', 'correctness');\n    this.correctness = correctness;\n  }\n\n  toggleSolution() {\n    if (this.isSolutionShowing) {\n      this.solutionButton.text('Show Solution');\n      this.isSolutionShowing = false;\n      this.solutionTextContainer.text(null);\n      this.solutionTextContainer.transition().duration(100).style('height', '0px');\n    } else {\n      this.solutionButton.text('Hide Solution');\n      this.isSolutionShowing = true;\n      this.solutionTextContainer.transition().duration(100).style('height', '40px');\n      this.solutionTextContainer.text(this.solutionText);\n    }\n  }\n\n  async checkAnswer(answer) {\n    this.removeCorrectness();\n    this.addCorrectness();\n\n    await this.correctness\n      .transition()\n      .duration(350)\n      .style('height', '40px').style('fill', 'blue')\n      .end();\n\n    if (answer === this.correctAnswer) {\n      const correct = this.correctness.text('Correct!');\n      correct.append('span').text('check').attr('class', 'material-icons correct-answer');\n    } else {\n      const wrong = this.correctness.text('Incorrect.');\n      wrong.append('span').text('clear').attr('class', 'material-icons wrong-answer');\n    }\n  }\n\n  addSubmitButton() {\n    const submitContainer = this.quiz\n      .append('div')\n      .attr('class', 'submit-container');\n\n    this.submitContainer = submitContainer;\n\n    const submitButton = this.submitContainer\n      .append('button')\n      .text('submit')\n      .attr('class', 'pure-material-button-contained')\n      .on('click', () => this.checkAnswer(this.currentGuess));\n\n    this.submitButton = submitButton;\n  }\n\n  createSolutionContainer() {\n    const solutionTextContainer = this.quiz.append('div').attr('class', 'solution-text');\n    this.solutionTextContainer = solutionTextContainer;\n  }\n\n  addSolutionButton() {\n    const solutionButtonContainer = this.quiz\n      .append('div')\n      .attr('class', 'solution-container');\n\n    this.solutionButtonContainer = solutionButtonContainer;\n\n    this.createSolutionContainer();\n\n    const solutionButton = this.solutionButtonContainer.append('button')\n      .text('Show Solution')\n      .attr('class', 'pure-material-button-contained')\n      .attr('id', 'solution-button')\n      .on('click', () => this.toggleSolution());\n\n    this.solutionButton = solutionButton;\n  }\n\n  addQuiz() {\n    const quiz = this.contentContainer\n      .append('div')\n      .attr('class', 'quiz');\n\n    this.quiz = quiz;\n    const choices = this.quiz.append('div').attr('class', 'choices');\n    this.choices = choices;\n    this.addSubmitButton();\n    this.addSolutionButton();\n  }\n\n  addChoice(text, isCorrectAnswer) {\n    if (isCorrectAnswer) this.correctAnswer = text;\n    const choice = this.choices.append('label').attr('class', 'choice').attr('id', this.currentId++);\n    choice.append('input').attr('type', 'radio').attr('name', 'radio');\n    choice.append('text').text(text).attr('class', 'choice-text');\n    choice.on('click', () => {\n      this.currentGuess = text;\n    });\n  }\n\n  addSolution(text) {\n    this.solutionText = text;\n  }\n\n  addButton(buttonText, event) {\n    const buttonContainer = this.contentContainer\n      .append('div')\n      .attr('class', 'button-container')\n      .append('g')\n      .datum(this);\n\n    this.buttonContainer = buttonContainer;\n\n    this.buttonContainer\n      .append('button')\n      .text(buttonText)\n      .attr('class', 'pure-material-button-contained')\n      .on('click', () => {\n        event();\n      });\n  }\n\n  setTitle(title) {\n    this.sidebarContainer\n      .append('h2')\n      .text(title)\n      .attr('class', 'chapter-title');\n\n    this.sidebarContainer\n      .append('hr');\n  }\n\n  addHandler(handler) {\n    this.sectionHandler = handler;\n  }\n\n  draw() {\n    const sidebarContainer = d3.select('#center-container')\n      .append('div')\n      .attr('class', 'sidebar');\n\n    this.sidebarContainer = sidebarContainer;\n  }\n\n  addProgresBar() {\n    const { sections } = this.sectionHandler;\n    this.sections = sections;\n\n    this.progressBarContainer = this.sidebarContainer\n      .append('div')\n      .attr('class', 'progress-bar-container');\n\n    this.progressBarContainer\n      .append('span')\n      .attr('class', 'material-icons nav-arrows')\n      .text('keyboard_arrow_left')\n      .on('click', () => this.sectionHandler.goPreviousSection());\n\n    const w = 100 / sections.length;\n\n    this.progressBarContainer\n      .selectAll('div')\n      .data(sections)\n      .join(\n        (enter) => enter\n          .append('div')\n          .attr('class', (d) => (d.isActive ? 'progress-item-active' : 'progress-item'))\n          .style('width', `${w}%`)\n          .on('click', (d) => this.sectionHandler.goToSection(d)),\n        (update) => update,\n        (exit) => exit.remove(),\n      );\n\n    this.progressBarContainer\n      .append('span')\n      .attr('class', 'material-icons nav-arrows')\n      .text('keyboard_arrow_right')\n      .on('click', () => this.sectionHandler.goNextSection());\n  }\n\n  updateProgressBar() {\n    if (!this.progressBarContainer) return;\n    this.progressBarContainer\n      .selectAll('div')\n      .data(this.sections)\n      .join(\n        (enter) => enter,\n        (update) => update.attr('class', (d) => (d.isActive ? 'progress-item-active' : 'progress-item')),\n        (exit) => exit.remove(),\n      );\n  }\n\n  addNavButtons() {\n    const navButtonsContainer = this.sidebarContainer\n      .append('div')\n      .attr('class', 'nav-buttons-container');\n\n    this.navButtonsContainer = navButtonsContainer;\n\n    this.navButtonsContainer\n      .append('span')\n      .attr('class', 'material-icons nav-arrows')\n      .text('keyboard_arrow_left')\n      .on('click', () => this.sectionHandler.goPreviousSection());\n\n    this.navButtonsContainer\n      .append('span')\n      .attr('class', 'material-icons nav-arrows')\n      .text('keyboard_arrow_right')\n      .on('click', () => this.sectionHandler.goNextSection());\n  }\n\n  addContentArea() {\n    const contentContainer = this.sidebarContainer.append('div').attr('class', 'content-container');\n    this.contentContainer = contentContainer;\n\n    const content = this.contentContainer.append('div').attr('class', 'content');\n    this.content = content;\n  }\n\n  addContent(text) {\n    this.content.html(text);\n  }\n}\n","export default class Section {\n  constructor(section, chapter, isActive) {\n    this.createSection = section;\n    this.chapter = chapter;\n    this.isActive = isActive;\n  }\n\n  create() {\n    this.createSection();\n    renderMathInElement(document.body);\n  }\n}\n","export default function generateRandomGraph(n, m) {\n  const maxNumEdges = (n * (n - 1)) / 2;\n  if (n < 0 || m < 0 || m > maxNumEdges) return undefined;\n\n  const graph = { nodes: [], links: [] };\n\n  for (let i = 0; i < n; i++) {\n    graph.nodes[i] = { id: i + 1, label: i + 1 };\n  }\n\n  const randomInt = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\n  const state = {};\n  for (let i = 0; i < m; i++) {\n    const j = randomInt(i, maxNumEdges);\n    if (!(i in state)) state[i] = i;\n    if (!(j in state)) state[j] = j;\n    [state[i], state[j]] = [state[j], state[i]];\n  }\n\n  function unpair(k) {\n    const z = Math.floor((-1 + Math.sqrt(1 + 8 * k)) / 2);\n    return [k - (z * (1 + z)) / 2, (z * (3 + z)) / 2 - k];\n  }\n\n  for (let i = 0; i < m; i++) {\n    const [x, y] = unpair(state[i]);\n    const u = graph.nodes[x];\n    const v = graph.nodes[n - 1 - y];\n    graph.links.push({ source: u, target: v });\n  }\n  return graph;\n}\n\nexport function hull(points) {\n  if (points.length < 2) return;\n  if (points.length < 3) return d3.polygonHull([points[0], ...points]);\n  return d3.polygonHull(points);\n}\n\nexport async function readLocalFile(file) {\n  const response = await fetch(file);\n  const text = await response.text();\n  window.n = text.split('\\n');\n}\n\nexport const getAllSubsets = (theArray) => theArray.reduce(\n  (subsets, value) => subsets.concat(\n    subsets.map((set) => [value, ...set]),\n  ),\n  [[]],\n);\n\nexport function deepClone(obj) {\n  if (!obj || obj == true) // this also handles boolean as true and false\n  { return obj; }\n  const objType = typeof (obj);\n  if (objType == 'number' || objType == 'string') // add your immutables here\n  { return obj; }\n  const result = Array.isArray(obj) ? [] : !obj.constructor ? {} : new obj.constructor();\n  if (obj instanceof Map) for (var key of obj.keys()) result.set(key, deepClone(obj.get(key)));\n  for (var key in obj) if (obj.hasOwnProperty(key)) result[key] = deepClone(obj[key]);\n  return result;\n}\n\nexport function compareMaps(map1, map2) {\n  let testVal;\n  if (map1.size !== map2.size) {\n    return false;\n  }\n  for (const [key, val] of map1) {\n    testVal = map2.get(key);\n    // in cases of an undefined value, make sure the key\n    // actually exists on the object so there are no false positives\n    if (testVal !== val || (testVal === undefined && !map2.has(key))) {\n      return false;\n    }\n  }\n  return true;\n}\n","export function readTreeDecomposition(treeData) {\n  treeData.pop();\n  const nodes = [];\n  const links = [];\n  const treeDecomp = {};\n  for (let i = 0; i < treeData.length; i++) {\n    const textLine = treeData[i];\n    let bagLabel = '';\n    const vertices = [];\n    if (textLine.startsWith('b')) {\n      const splitted = textLine.split(' ');\n      const bagId = parseInt(splitted[1], 10);\n      splitted.shift();\n      splitted.shift();\n      for (let j = 0; j < splitted.length; j++) {\n        bagLabel += `${splitted[j]} `;\n        const currentNode = parseInt(splitted[j], 10);\n        vertices.push(currentNode);\n      }\n      bagLabel = `${bagLabel}`;\n      nodes.push({ id: bagId, label: bagLabel, vertices });\n    } else {\n      const splitted = textLine.split(' ');\n      links.push({ source: splitted[0], target: splitted[1] });\n    }\n  }\n  treeDecomp.nodes = nodes;\n  treeDecomp.links = links;\n  return treeDecomp;\n}\n\nexport function readNiceTreeDecomposition(treeData) {\n  const edgePairs = [];\n  const allBagLabels = {};\n  const verticesInBag = {};\n  let root;\n\n  for (let line = 0; line < treeData.length; line++) {\n    const textLine = treeData[line];\n    const splitted = textLine.split(' ');\n    let baglabel = '';\n    let bagId;\n\n    if (textLine.startsWith('root')) {\n      root = parseInt(treeData[line + 1], 10);\n      break;\n    } else if (textLine.startsWith('b')) {\n      bagId = parseInt(splitted[1], 10);\n      const vertices = [];\n      for (let i = 2; i < splitted.length; i++) {\n        baglabel += `${splitted[i]},`;\n\n        const currentNode = parseInt(splitted[i], 10);\n        vertices.push(currentNode);\n      }\n      baglabel = baglabel.replace(/,\\s*$/, '');\n      allBagLabels[bagId] = baglabel;\n      verticesInBag[bagId] = vertices;\n    } else {\n      const sourceNode = parseInt(splitted[0], 10);\n      const targetNode = parseInt(splitted[1], 10);\n      const edge = [];\n      edge.push(sourceNode, targetNode);\n      edgePairs.push(edge);\n    }\n  }\n\n  // https://stackoverflow.com/questions/61374720/build-tree-from-edge-pairs-and-root?noredirect=1#comment108574565_61374720\n  function createTree(root, nodes) {\n    const children = [];\n    for (let i = 0; i < nodes.length; i++) {\n      const indexOfRoot = nodes[i].indexOf(root);\n      if (indexOfRoot !== -1) {\n        children.push(nodes[i][Number(!indexOfRoot)]); // note that data like [1,2,4] or [1] will not work.\n        nodes.splice(i, 1);\n        i--; // after removing the element, decrement the iterator\n      }\n    }\n\n    const tree = {\n      id: parseInt(root, 10),\n      label: allBagLabels[root],\n      vertices: verticesInBag[root],\n      liss: 0,\n    };\n\n    if (children.length !== 0) { // if there are any children,\n      tree.children = []; // add the children property to the tree object\n      for (const child of children) {\n        tree.children.push(createTree(child, nodes)); // then add the tree of each of the children\n      }\n    }\n    return tree;\n  }\n  const newTree = createTree(root, edgePairs);\n  return newTree;\n}\n\nexport async function readLocalTreeFile(file) {\n  const response = await fetch(file);\n  const text = await response.text();\n  return text.split('\\n');\n}\n","/* eslint-disable no-shadow */\n/* eslint-disable no-unused-vars */\n/* eslint-disable func-names */\n/* eslint-disable no-alert */\n/* eslint-disable no-var */\n/* eslint-disable import/prefer-default-export */\nexport const contextMenu = function (d) {\n  return [\n    {\n      title: 'Set Value',\n      action(elm, d, i) {\n        const number = prompt('Value:');\n        d.label = number;\n\n        const splitted = number.split(',');\n        const temp = [];\n        splitted.forEach((vertix) => {\n          const v = parseInt(vertix, 10);\n          temp.push(v);\n        });\n        d.vertices = temp;\n        d.graph.restart();\n      },\n    },\n    {\n      title: 'Delete Node',\n      action(elm, d, i) {\n        d.graph.removeNode(d);\n      },\n    },\n  ];\n};\n","/* eslint-disable func-names */\n/* eslint-disable no-undef */\n/* eslint-disable no-shadow */\n/* eslint-disable no-continue */\n/* eslint-disable no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable no-return-assign */\n/* eslint-disable array-callback-return */\n/* eslint-disable prefer-promise-reject-errors */\n/* eslint-disable no-await-in-loop */\n/* eslint-disable no-async-promise-executor */\n/* eslint-disable consistent-return */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable no-useless-return */\n/* eslint-disable no-bitwise */\nimport generateRandomGraph from '../Utilities/helpers.js';\nimport * as readTree from '../Utilities/readTree.js';\nimport { contextMenu as menu } from './ContextMenu.js';\n\nconst colors = d3.scaleOrdinal(d3.schemeCategory10);\n\nfunction hull(points) {\n  if (points.length < 2) return;\n  if (points.length < 3) return d3.polygonHull([points[0], ...points]);\n  return d3.polygonHull(points);\n}\n\nfunction generatePowerSet(array, n) {\n  const result = [];\n\n  for (let i = 1; i < (1 << array.length); i++) {\n    const subset = [];\n    for (let j = 0; j < array.length; j++) if (i & (1 << j)) subset.push(array[j]);\n\n    if (subset.length === n) result.push(subset);\n  }\n\n  return result;\n}\n\nfunction highlightVertex(nodeId) {\n  d3.select(`#graph-node-${nodeId}`)\n    .transition()\n    .duration(200)\n    .style('fill', 'orange');\n}\n\nfunction removeHighlightVertex(nodeId) {\n  d3.select(`#graph-node-${nodeId}`)\n    .transition()\n    .duration(200)\n    .style('fill', '#1f77b4');\n}\n\nfunction timeout(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nasync function repeat(nodesToHighlight, animationSpeed) {\n  return new Promise(async (resolve) => {\n    let i = 0;\n    while (i < 5) {\n      d3.selectAll('circle')\n        .filter((node) => nodesToHighlight.includes(node))\n        .transition()\n        .duration(200)\n        .style('fill', 'orange')\n        .transition()\n        .duration(200)\n        .style('fill', '#1f77b4');\n      i++;\n      await timeout(animationSpeed);\n      if (i === 4) {\n        resolve();\n      }\n    }\n  });\n}\n\n/* https://stackoverflow.com/a/47147597/4169689 */\nconst getAllSubsets = (theArray) => theArray.reduce(\n  (subsets, value) => subsets.concat(subsets.map((set) => [value, ...set])),\n  [[]],\n);\n\nfunction makeRequest(method, url, data) {\n  return new Promise(((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, url);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.onload = function () {\n      if (this.status >= 200 && this.status < 300) {\n        resolve(xhr.response);\n      } else {\n        reject({\n          status: this.status,\n          statusText: xhr.statusText,\n        });\n      }\n    };\n    xhr.onerror = function () {\n      reject({\n        status: this.status,\n        statusText: xhr.statusText,\n      });\n    };\n    xhr.send(data);\n  }));\n}\n\n\nfunction buildAdjList(newNodes, newLinks) {\n  const adjList = {};\n\n  newNodes.forEach((v) => {\n    adjList[v.id] = [];\n  });\n\n  newLinks.forEach((e) => {\n    adjList[e.source.id].push(e.target);\n    adjList[e.target.id].push(e.source);\n  });\n\n  return adjList;\n}\n\nfunction removeNode(newNodes, node) {\n  newNodes.splice(newNodes.indexOf(node), 1);\n  return newNodes;\n}\n\nfunction removeLinks(newLinks, node) {\n  const linksToRemove = newLinks.filter((l) => l.source === node || l.target === node);\n  linksToRemove.map((l) => newLinks.splice(newLinks.indexOf(l), 1));\n  return newLinks;\n}\n\nexport function resetStyles() {\n  d3.selectAll('circle')\n    .transition()\n    .duration(2000)\n    .style('fill', colors(1))\n    .style('stroke', 'rgb(51, 51, 51)');\n\n  d3.selectAll('line')\n    .transition()\n    .duration(2000)\n    .style('stroke', 'rgb(51, 51, 51)');\n}\n\nexport default class Graph {\n  constructor(container) {\n    this.container = container;\n    this.maxStop = false;\n    this.animationSpeed = 500;\n    this.selectedNodes = [];\n    this.isHoverEffect = false;\n    this.animDuration = 2000;\n    this.testingCoherence = false;\n    this.cancel = false;\n    this.lastNodeId = 0;\n    this.masterNodes = new Set();\n    this.nodes = [];\n    this.links = [];\n  }\n\n  isEdge(w, v) {\n    return this.adjacencyList[`${w}-${v}`];\n  }\n\n  isIntroducedVertexNeighbor(set, introducedVertex, adjacencyList) {\n    for (const s of set) {\n      if (adjacencyList[`${s}-${introducedVertex}`]) return true;\n    }\n    return false;\n  }\n\n  isVertexAdjacent(subTree, array) {\n    const subGraph = this.createSubgraph(subTree);\n\n    const verticesInSubGraph = [];\n    subGraph.nodes.forEach((node) => {\n      verticesInSubGraph.push(node.id);\n    });\n\n    const adjacencyList = this.returnAdj(subGraph.links);\n\n    if (this.isNeighborInSet(array, adjacencyList)) return true;\n    return false;\n  }\n\n  showSeparator(vertices) {\n    /* Keep track of the separating nodes for the overlay */\n    this.separatorNodes = this.nodes.filter((node) => vertices.includes(node.id));\n\n    /* Make overlay visible */\n    this.path.style('opacity', 0.3);\n\n    /* Get all the nodes that are not part of the separating set */\n    const restNodes = this.nodes.filter((node) => !vertices.includes(node.id));\n\n    /* Get all the links after removing separating set */\n    const restLinks = this.links.filter((link) => {\n      if (vertices.includes(link.source.id)) return false;\n      if (vertices.includes(link.target.id)) return false;\n      return true;\n    });\n    /* Check connectivity such that we can assign a cluster to each component */\n    this.checkConnectivity(restNodes, restLinks);\n\n    this.nodes.map((node) => {\n      if ('cluster' in node === false || node.cluster === null) {\n        node.cluster = 1;\n        return;\n      }\n    });\n\n    d3.selectAll('circle').style('fill', (d) => colors(d.cluster));\n\n    this.simulation.force('link',\n      d3.forceLink(this.links)\n        .distance(2)\n        .strength(0.1))\n      .force('collision', d3.forceCollide().radius(30));\n\n    this.simulation.force('charge', d3.forceManyBody().strength(-1500));\n\n    const groupingForce = forceInABox()\n      .strength(0.4) // Strength to foci\n      .template('force') // Either treemap or force\n      .groupBy('cluster') // Node attribute to group\n      .links(this.links)\n      .enableGrouping(true)\n      .linkStrengthInterCluster(0) // linkStrength between nodes of different clusters\n      .linkStrengthIntraCluster(0) // linkStrength between nodes of the same cluster\n      .forceLinkDistance(250)\n      .forceCharge(-2000); // Charge between the meta-nodes (Force template only)\n\n    this.simulation.force('group', groupingForce);\n    this.simulation.alpha(0.07).restart();\n  }\n\n  hideSeparator() {\n    this.path.style('opacity', 0);\n\n    d3.selectAll('circle').style('fill', '#1f77b4');\n\n    this.nodes.forEach((node) => node.cluster = null);\n\n    const groupingForce = forceInABox()\n      .strength(0) // Strength to foci\n      .template('force') // Either treemap or force\n      .groupBy('cluster') // Node attribute to group\n      .links(this.links)\n      .linkStrengthInterCluster(0) // linkStrength between nodes of different clusters\n      .linkStrengthIntraCluster(0) // linkStrength between nodes of the same cluster\n      .forceCharge(0); // Charge between the meta-nodes (Force template only)\n\n    this.simulation\n      .force('group', groupingForce)\n      .force('link', d3.forceLink(this.links).id((d) => d.id).distance(85).strength(0.8))\n      .force('charge', d3.forceManyBody().strength(-600).distanceMin(15));\n\n    this.simulation.alpha(0.1).restart();\n  }\n\n  showCoherence(vertices) {\n    d3.selectAll('circle')\n      .filter((node) => vertices.includes(node.id))\n      .transition()\n      .duration(300)\n      .style('opacity', 0.4);\n\n    d3.selectAll('#graph-container text')\n      .filter((node) => vertices.includes(node.id))\n      .transition()\n      .duration(300)\n      .style('opacity', 0.4);\n\n    d3.selectAll('#graph-container line')\n      .filter((link) => vertices.includes(link.source.id) || vertices.includes(link.target.id))\n      .transition()\n      .duration(300)\n      .style('opacity', 0.4);\n  }\n\n  hideCoherence() {\n    d3.selectAll('circle')\n      .filter((node) => node.id !== 0)\n      .transition()\n      .duration(300)\n      .style('opacity', 1);\n\n    d3.selectAll('line')\n      .transition()\n      .duration(300)\n      .style('opacity', 1);\n\n    d3.selectAll('#graph-container text')\n      .filter((node) => node.id !== 0)\n      .transition()\n      .duration(300)\n      .style('opacity', 1);\n  }\n\n  toggleCoherenceProof() {\n    d3.selectAll('ellipse').on('mouseover', (d) => this.graphOfTd.showCoherence(d.vertices));\n    d3.selectAll('ellipse').on('mouseout', () => this.graphOfTd.hideCoherence());\n  }\n\n  toggleSeparator() {\n    d3.selectAll('ellipse').on('mouseover', (d) => this.graphOfTd.showSeparator(d.vertices));\n    d3.selectAll('ellipse').on('mouseout', () => this.graphOfTd.hideSeparator());\n  }\n\n  async animateDeleteNode(node) {\n    if (this.cancel) return;\n\n    d3.selectAll('#tree-container line')\n      .filter((d) => (d.source === node) || (d.target === node))\n      .transition()\n      .duration(this.animDuration)\n      .style('opacity', 0);\n\n    d3\n      .selectAll('#tree-container text')\n      .filter((d) => d === node)\n      .transition()\n      .duration(this.animDuration)\n      .style('opacity', 0);\n\n    await d3\n      .selectAll('#tree-container ellipse')\n      .filter((d) => d === node)\n      .transition()\n      .duration(this.animDuration)\n      .style('opacity', 0)\n      .end();\n  }\n\n  async highlightNodes(node, parentNode, forgottenVertices) {\n    if (this.cancel) return;\n    await d3\n      .selectAll('#tree-container ellipse')\n      .filter((d) => d === node || d === parentNode)\n      .transition()\n      .duration(this.animDuration)\n      .style('fill', 'orange')\n      .end();\n\n    d3.select('.math-container').html(`Forgotten vertices: ${forgottenVertices}`);\n  }\n\n  visitBag(bagId) {\n    d3.selectAll('ellipse')\n      .filter((treeNode) => treeNode.id === bagId)\n      .transition()\n      .duration(this.animDuration)\n      .delay(this.animDuration * this.anim)\n      .style('fill', 'orange')\n      .ease(d3.easeElastic)\n      .attr('rx', 40)\n      .attr('ry', 30)\n      .on('end', () => {\n        d3.selectAll('ellipse').style('fill', '#2ca02c');\n        d3.selectAll('ellipse')\n          .filter((treeNode) => treeNode.id === bagId)\n          .transition()\n          .duration(this.animDuration)\n          .ease(d3.easeElastic)\n          .attr('rx', 35)\n          .attr('ry', 25);\n      });\n  }\n\n  isEdgeInTreeDecomposition(sourceNode, targetNode) {\n    const na = d3.selectAll('#tree-container ellipse').data();\n\n    na.forEach((bag) => {\n      if (bag.vertices.includes(sourceNode) && bag.vertices.includes(targetNode)) {\n        this.visitBag(bag.id);\n      }\n      return false;\n    });\n    return true;\n  }\n\n  isNodeInTreeDecomposition(node) {\n    const na = d3.selectAll('#tree-container ellipse').data();\n\n    na.forEach((bag) => {\n      if (bag.vertices.includes(node.id)) {\n        this.visitBag(bag.id);\n      }\n      return false;\n    });\n    return true;\n  }\n\n  checkIntroducedVertex(introducedNode, positionTracker, oldState, color, subTree) {\n    /* Get the subgraph rooted at this tree */\n    const subGraph = this.createSubgraph(subTree);\n\n    /* Reset the coloring */\n    subGraph.nodes.forEach((node) => node.color = null);\n\n    /* Color the nodes according to the oldState */\n    for (let i = 0; i < positionTracker.length; i++) {\n      const n = subGraph.nodes.find((node) => node.id === positionTracker[i]);\n      n.color = oldState[i];\n    }\n\n    /* Give the introduced vertex a color */\n    const iNode = subGraph.nodes.find((node) => node.id === introducedNode);\n    iNode.color = color;\n\n    for (const link of subGraph.links) {\n      if (link.source.color !== null && !link.target.color !== null) {\n        if (link.source.color === link.target.color) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  createSubgraph(subTree) {\n    const subGraphNodeIds = [];\n\n    subTree.forEach((node) => {\n      for (const v of node.data.vertices) {\n        if (!subGraphNodeIds.includes(v)) subGraphNodeIds.push(v);\n      }\n    });\n\n    const subGraphNodes = this.nodes.filter((currentNode) => subGraphNodeIds.includes(currentNode.id));\n    const subGraphLinks = this.links.filter((currentLink) => subGraphNodeIds\n      .includes(currentLink.source.id)\n        && subGraphNodeIds.includes(currentLink.target.id));\n\n    return { nodes: subGraphNodes, links: subGraphLinks };\n  }\n\n  highlightSubGraph(subGraph) {\n    this.path2.style('opacity', 0);\n    const { nodes } = subGraph;\n\n    this.path.style('opacity', 0.5);\n    this.separatorNodes = nodes;\n    this.simulation.restart();\n  }\n\n  highlightSubGraph2(subGraph) {\n    const { nodes } = subGraph;\n\n    this.path2.style('opacity', 0.5);\n    this.separatorNodes2 = nodes;\n    this.simulation.restart();\n  }\n\n  addTooltip() {\n    if (this.tooltip) this.tooltip.remove();\n\n    this.tooltip = d3.select('#main')\n      .append('div')\n      .attr('id', 'graph-tooltip')\n      .style('opacity', 0);\n  }\n\n  hideTooltip() {\n    if (this.tooltip) this.tooltip.style('opacity', 0);\n  }\n\n  hideArrow() {\n    if (this.arrow) this.arrow.style('opacity', 0);\n  }\n\n  hideHull() {\n    if (this.path) this.path.style('opacity', 0);\n  }\n\n  addNodeArrow(nodeId, text) {\n    this.addTooltip();\n    if (this.arrow) this.arrow.remove();\n\n    const nodeSvg = d3.select(`#graph-node-${nodeId}`);\n    const x = parseInt(nodeSvg.attr('cx'), 10);\n    const y = parseInt(nodeSvg.attr('cy'), 10);\n\n    this.arrow = this.svg\n      .append('line')\n      .style('opacity', 1)\n      .attr('id', 'arrow-line')\n      .attr('x1', x - 50)\n      .attr('y1', y)\n      .attr('x2', x - nodeSvg.attr('r') - 4)\n      .attr('y2', y)\n      .attr('marker-end', 'url(#arrow)')\n      .attr('stroke', 'rgb(51, 51, 51)')\n      .attr('stroke-width', '3.5px');\n\n    const { top } = document.getElementById('arrow-line').getBoundingClientRect();\n    const { left } = document.getElementById('arrow-line').getBoundingClientRect();\n\n    this.tooltip\n      .html(text)\n      .style('opacity', 1)\n      .style('left', `${left}px`)\n      .style('top', `${top}px`);\n  }\n\n  isNeighborInSet(set, adjacencyList) {\n    for (let i = 0; i < set.length; i++) {\n      const vertex1 = set[i];\n      for (let j = 0; j < set.length; j++) {\n        const vertex2 = set[j];\n        if (vertex1 !== vertex2 && adjacencyList[`${vertex1}-${vertex2}`]) return true;\n      }\n    }\n    return false;\n  }\n\n  max(verticesInSubGraph, adj, set, isHovering) {\n    let maximumSet = 0;\n    let maximumIndependentSet = [];\n    let candidato = true;\n\n    for (let i = 2; i < verticesInSubGraph.length + 1; i++) {\n      const conjunto = generatePowerSet(verticesInSubGraph, i);\n\n      for (const c of conjunto) {\n        candidato = true;\n\n        const pares = generatePowerSet(c, 2);\n\n        for (const par of pares) {\n          const test1 = par[0];\n          const test2 = par[1];\n\n          for (const s of set) {\n            if (adj[`${test1}-${s}`]) {\n              candidato = false;\n              break;\n            }\n\n            if (adj[`${test2}-${s}`]) {\n              candidato = false;\n              break;\n            }\n          }\n\n          if (adj[`${test1}-${test2}`]) {\n            candidato = false;\n            break;\n          }\n        }\n\n        if (candidato && c.length > maximumSet) {\n          maximumSet = c.length;\n          maximumIndependentSet = c;\n        }\n      }\n    }\n    const v = parseInt(set[0], 10);\n    if (!Number.isNaN(v) && v !== undefined && !maximumIndependentSet.includes(v)) maximumIndependentSet.push(v);\n    if (isHovering) {\n      d3.selectAll('#graph-container circle').classed('highlighted-stroke', (node) => {\n        if (maximumIndependentSet.includes(node.id)) return true;\n      });\n    }\n    return maximumIndependentSet;\n  }\n\n  returnAdj(links) {\n    const adjacencyList = [];\n    links.forEach((d) => {\n      adjacencyList[`${d.source.id}-${d.target.id}`] = true;\n      adjacencyList[`${d.target.id}-${d.source.id}`] = true;\n    });\n    return adjacencyList;\n  }\n\n  runMis(subTree, set, introducedVertex, isHovering) {\n    if (set.length === 0) return 0;\n    const subGraph = this.createSubgraph(subTree);\n\n    const verticesInSubGraph = [];\n    subGraph.nodes.forEach((node) => {\n      verticesInSubGraph.push(node.id);\n    });\n\n    const adjacencyList = this.returnAdj(subGraph.links);\n\n    /* Check if the introduced vertex is a neighbor to any of the vertices in the set */\n    if (this.isIntroducedVertexNeighbor(set, introducedVertex, adjacencyList)) return -9999;\n\n    /* Check if any vertex in the set is neighboring eachother */\n    if (this.isNeighborInSet(set, adjacencyList)) return -9999;\n\n    const mis = this.max(verticesInSubGraph, adjacencyList, set, isHovering);\n    return mis.length;\n  }\n\n  computeTrivialTreeDecomposition() {\n    const tNodes = [];\n    const lol = [];\n\n    this.nodes.forEach((node) => {\n      if (node.id !== 0) tNodes.push(node.id);\n    });\n\n    const onenode = { id: 1, label: JSON.stringify(tNodes).replace('[', '').replace(']', '') };\n    lol.push(onenode);\n    const tLinks = [];\n\n    return { nodes: lol, links: tLinks };\n  }\n\n  async testCoherence() {\n    let vertices = d3.selectAll('#tree-container ellipse').data();\n    let edges = d3.selectAll('#tree-container line').data();\n\n    /* Make sure all nodes are unvisited */\n    vertices.forEach((vertex) => vertex.visited = false);\n\n    const stack = [];\n    const forgottenVertices = [];\n    stack.push(vertices[0]);\n    let currentVertex;\n\n    /* Run DFS post order */\n    while (stack.length) {\n      currentVertex = stack[stack.length - 1];\n\n      let tail = true;\n\n      const adjList = buildAdjList(vertices, edges);\n      const adj = adjList[currentVertex.id];\n\n      if (adj === undefined) {\n        stack.pop();\n        continue;\n      }\n\n      for (let i = 0; i < adj.length; i++) {\n        const v2 = adj[i];\n        if (!v2.visited) {\n          tail = false;\n          v2.visited = true;\n          stack.push(v2);\n          break;\n        }\n      }\n\n      if (tail) {\n        /* Check for forgotten vertices */\n\n        const parentBag = adjList[currentVertex.id];\n        const parentNode = parentBag[0];\n\n        for (let i = 0; i < currentVertex.vertices.length; i++) {\n          const n = currentVertex.vertices[i];\n\n          if (forgottenVertices.includes(n)) {\n            /* not valid coherence */\n          } else if (parentBag.length) {\n            const parentVertices = parentNode.vertices;\n\n            if (!parentVertices.includes(n)) {\n              forgottenVertices.push(n);\n            }\n          }\n        }\n\n        /* We visited this leaf now pop it off the stack */\n        stack.pop();\n\n        /* Once we visit a leaf we remove it */\n        vertices = removeNode(vertices, currentVertex);\n        edges = removeLinks(edges, currentVertex);\n\n        /* Animate it */\n        await this.highlightNodes(currentVertex, parentNode, forgottenVertices);\n        d3.selectAll('ellipse').transition().duration(this.animDuration).style('fill', '#2ca02c');\n        await this.animateDeleteNode(currentVertex);\n      }\n    }\n\n    return new Promise(async (resolve) => {\n      await timeout(3000);\n      resolve();\n    });\n  }\n\n  edgeCoverage() {\n    return new Promise((resolve) => {\n      d3.selectAll('#graph-container line').style('fill', (edge) => {\n        const sourceNode = edge.source.id;\n        const targetNode = edge.target.id;\n        d3.select(`#link-${edge.source.id}-${edge.target.id}`)\n          .transition()\n          .duration(this.animDuration)\n          .delay(this.animDuration * this.anim)\n          .style('stroke', 'orange')\n          .style('stroke-width', '5px')\n          .on('end', (edge) => {\n            d3.selectAll('#graph-container line')\n              .style('stroke', 'rgb(51, 51, 51)')\n              .style('stroke-width', '3.5px');\n\n            const allEdges = d3.selectAll('#graph-container line').data();\n            if (edge === allEdges[allEdges.length - 1]) resolve();\n          });\n\n        d3.selectAll('#tree-container ellipse')\n          .filter((bag) => bag.vertices.includes(sourceNode) && bag.vertices.includes(targetNode))\n          .transition()\n          .duration(this.animDuration)\n          .delay(this.animDuration * this.anim)\n          .style('fill', 'orange')\n          .on('end', () => {\n            d3.selectAll('ellipse').style('fill', '#2ca02c');\n          });\n\n        this.anim++;\n      });\n    });\n  }\n\n  resetLinkStyles() {\n    d3.selectAll('#tree-container line').style('opacity', 1);\n  }\n\n  resetTextStyles() {\n    d3.selectAll('#tree-container text')\n      .style('opacity', 1);\n  }\n\n  testNodeCoverage() {\n    return new Promise((resolve) => {\n      d3.selectAll('#graph-container circle').style('fill', (node) => {\n        d3.select(`#graph-node-${node.id}`)\n          .transition()\n          .duration(this.animDuration)\n          .delay(this.animDuration * this.anim)\n          .style('fill', 'orange')\n          .on('end', (node) => {\n            d3.selectAll('#graph-container circle')\n              .style('fill', '#1f77b4');\n            const allNodes = d3.selectAll('#graph-container circle').data();\n            if (node === allNodes[allNodes.length - 1]) resolve();\n          });\n\n        d3.selectAll('ellipse')\n          .filter((bag) => bag.vertices.includes(node.id))\n          .transition()\n          .duration(this.animDuration)\n          .delay(this.animDuration * this.anim)\n          .style('fill', 'orange')\n          .on('end', () => {\n            d3.selectAll('ellipse')\n              .style('fill', '#2ca02c');\n          });\n\n        this.anim++;\n      });\n    });\n  }\n\n  highlightCoherence() {\n    this.anim = 0;\n    d3.selectAll('#graph-container circle').style('fill', (node) => {\n      d3.select(`#graph-node-${node.id}`)\n        .transition()\n        .duration(this.animDuration)\n        .delay(this.animDuration * this.anim)\n        .style('fill', 'orange')\n        .on('end', (node) => {\n          d3.selectAll('#graph-container circle')\n            .style('fill', '#1f77b4');\n          const allNodes = d3.selectAll('#graph-container circle').data();\n          if (node === allNodes[allNodes.length - 1]) resolve();\n        });\n\n      d3.selectAll('ellipse')\n        .filter((bag) => bag.vertices.includes(node.id))\n        .transition()\n        .duration(this.animDuration)\n        .delay(this.animDuration * this.anim)\n        .style('fill', 'orange')\n        .on('end', () => {\n          d3.selectAll('ellipse')\n            .style('fill', '#2ca02c');\n        });\n\n      const newBags = d3.selectAll('ellipse').data().filter((bag) => bag.vertices.includes(node.id));\n\n      d3.selectAll('#tree-container line')\n        .filter((link) => newBags.includes(link.source) && newBags.includes(link.target))\n        .transition()\n        .duration(this.animDuration)\n        .delay(this.animDuration * this.anim)\n        .style('stroke', 'orange')\n        .style('stroke-width', '6px')\n        .on('end', () => {\n          d3.selectAll('line')\n            .style('stroke', 'rgb(51, 51, 51)')\n            .style('stroke-width', '3.5px');\n        });\n\n\n      this.anim++;\n    });\n  }\n\n  stopAllTransitions() {\n    d3.selectAll('circle').interrupt();\n    d3.selectAll('line').interrupt();\n    d3.selectAll('ellipse').interrupt();\n    d3.selectAll('text').interrupt();\n  }\n\n  async runCoherence() {\n    /* Reset all the styling and stop any running transitions */\n    this.resetLinkStyles();\n    this.resetTextStyles();\n    this.resetTreeDecompositionStyles();\n    this.stopAllTransitions();\n\n    /* Run the the algorithm without animation if it is already running */\n    this.cancel = true;\n    await this.testCoherence();\n    this.cancel = false;\n\n    /* Run the  algorithm normally with animation */\n    await this.testCoherence();\n    return new Promise((resolve) => resolve());\n  }\n\n  async runEdgeCoverage() {\n    d3.select('.math-container').html(null);\n    this.anim = 0;\n    this.resetLinkStyles();\n    this.resetTreeDecompositionStyles();\n    this.stopAllTransitions();\n    await this.edgeCoverage();\n    d3.select('.math-container').html(`<span class=\"material-icons correct-answer\">check</span> Since every edge and its adjacent vertices appear in some \n    bag of the tree decomposition it also satifies <strong>property 2</strong>.\n    <br><br>\n    NOTE: It's possible not all the bags in the tree decomposition is highlighted if the graph contains isolated vertices since they obviously do not have an edge and therefor we don't test it.`);\n  }\n\n  async runNodeCoverage() {\n    d3.select('.math-container').html(null);\n    this.stopAllTransitions();\n    this.resetTreeDecompositionStyles();\n    this.anim = 0;\n    await this.testNodeCoverage();\n    d3.select('.math-container').html('<span class=\"material-icons correct-answer\">check</span> Every vertex in the graph appears in some bag of the tree decomposition, so it satifies <strong>property 1</strong>.');\n  }\n\n  getAllEdges() {\n    const convertedArray = [];\n    this.links.forEach((link) => {\n      convertedArray.push([link.source.id, link.target.id]);\n    });\n    return convertedArray;\n  }\n\n  getLargestNode() {\n    return this.nodes.length;\n  }\n\n  getTreeDecomposition() {\n    return readTree.readTreeDecomposition(this.td);\n  }\n\n  getNiceTreeDecomposition() {\n    return readTree.readNiceTreeDecomposition(this.nicetd);\n  }\n\n  async readNiceTreeDecomposition() {\n    return new Promise(async (resolve) => {\n      const response = await fetch('../../tree-decomposition-files/nicetd.td');\n      const text = await response.text();\n      this.nicetd = text.split('\\n');\n      resolve();\n    });\n  }\n\n  async readTreeDecomposition() {\n    return new Promise(async (resolve) => {\n      const response = await fetch('../../tree-decomposition-files/td.td');\n      const text = await response.text();\n      this.td = text.split('\\n');\n      resolve();\n    });\n  }\n\n  async computeTreeDecomposition() {\n    return new Promise((resolve) => {\n      const newJson = { edges: this.getAllEdges(), largestNode: this.getLargestNode() - 1 };\n      const jsonString = JSON.stringify(newJson);\n      makeRequest('POST', '/compute', jsonString).then(() => resolve());\n    });\n  }\n\n  resetExercises() {\n    this.resetNodeStyling();\n    this.selectedNodes = [];\n  }\n\n  resetNodeStyling() {\n    d3.selectAll('circle').style('fill', null);\n\n    d3.selectAll('circle')\n      .classed('nonhighlight', true)\n      .classed('not-separating-node', false)\n      .classed('separating-node', false);\n\n    d3.selectAll('line').style('stroke', 'black');\n  }\n\n  colorSeparating() {\n    d3.selectAll('circle')\n      .filter((node) => this.selectedNodes.includes(node.id))\n      .classed('separating-node', true);\n  }\n\n  colorNotSeparating() {\n    d3.selectAll('circle')\n      .filter((node) => this.selectedNodes.includes(node.id))\n      .classed('not-separating-node', true);\n  }\n\n  toggleBalanceSeparatorExercise() {\n    d3.selectAll('circle').on('click', (d) => this.checkBalanceSeparator(d));\n  }\n\n  isSeparatorSet(set) {\n    /* Remove the current separtor nodes */\n    const subGraphNodes = this.nodes.filter((node) => !set.includes(node.id));\n\n    /* Remove the links from the separator node */\n    const linksToRemove = this.links.filter((l) => {\n      if (set.includes(l.target.id) || set.includes(l.source.id)) return true;\n    });\n    const subGraphLinks = this.links.filter((link) => !linksToRemove.includes(link));\n\n    /* Check if the new subgraph after deleting the separating set is connected */\n    return this.checkConnectivity(subGraphNodes, subGraphLinks);\n  }\n\n  checkBalanceSeparator(d) {\n    if (this.selectedNodes.includes(d.id)) {\n      const nodeToRemove = this.selectedNodes.indexOf(d.id);\n      this.selectedNodes.splice(nodeToRemove, 1);\n\n      if (this.selectedNodes.length === 0) {\n        d3.select('#separator-output').html(null);\n        this.resetNodeStyling();\n        return;\n      }\n\n      /* After removing a separating node check if the remaining vertices are still adjacent */\n      if (this.selectedNodes.length > 1 && this.isSeparatingNodesAdjacent() === false) {\n        this.resetNodeStyling();\n        this.colorNotSeparating();\n        d3.select('#separator-output').html(`\\\\( S = \\\\{ ${this.selectedNodes} \\\\} \\\\) is a balanced separator!<span class=\"material-icons correct-answer\">check</span>`);\n        renderMathInElement(document.body);\n        return;\n      }\n    } else {\n      this.selectedNodes.push(d.id);\n    }\n\n    /* Original graph's vertices subtracting the vertex separator set */\n    const balanceLimit = (this.nodes.length - this.selectedNodes.length) / 2;\n\n    /* Get the subgraph, sublinks and whether the graph is disconnected */\n    const obj = this.isSeparatorSet(this.selectedNodes);\n\n    /* First check if the graph is disconnected */\n    if (obj.isDisconnected === true) {\n      const newnodes = obj.subGraphNodes;\n      const connectedComponents = {};\n\n      /* Count the vertices in each component */\n      for (const node of newnodes) {\n        if ('cluster' in node) {\n          const nc = node.cluster;\n          connectedComponents[nc] = connectedComponents[nc] + 1 || 1;\n        }\n      }\n\n      const componentLength = Object.values(connectedComponents);\n\n      /* Test each component length against the balance limit */\n      for (const cl of componentLength) {\n        if (cl > balanceLimit) {\n          this.resetNodeStyling();\n          this.colorNotSeparating();\n          d3.select('#separator-output').html(`\\\\( S = \\\\{ ${this.selectedNodes} \\\\} \\\\) is not a balanced separator!<span class=\"material-icons wrong-answer\">clear</span>`);\n          renderMathInElement(document.body);\n          return;\n        }\n      }\n      this.resetNodeStyling();\n      this.colorSeparating();\n      d3.select('#separator-output').html(`\\\\( S = \\\\{ ${this.selectedNodes} \\\\} \\\\) is a balanced separator!<span class=\"material-icons correct-answer\">check</span>`);\n      renderMathInElement(document.body);\n    } else {\n      this.resetNodeStyling();\n      this.colorNotSeparating();\n      d3.select('#separator-output').html(`\\\\( S = \\\\{ ${this.selectedNodes} \\\\} \\\\) is not a balanced separator!<span class=\"material-icons wrong-answer\">clear</span>`);\n      renderMathInElement(document.body);\n    }\n  }\n\n  checkMinimalSeparator(d) {\n    if (this.selectedNodes.includes(d.id)) {\n      const nodeInSeparatorSet = this.selectedNodes.indexOf(d.id);\n      this.selectedNodes.splice(nodeInSeparatorSet, 1);\n      if (this.selectedNodes.length === 0) {\n        d3.select('#separator-output').html('Click on a vertex to include it into the separator set.');\n        this.resetNodeStyling();\n        return;\n      }\n    } else {\n      this.selectedNodes.push(d.id);\n    }\n\n    /* Get all proper subsets of current selected separator */\n    const allSubsets = getAllSubsets(this.selectedNodes);\n    const allProperSubsets = allSubsets.filter(\n      (subset) => subset.length !== this.selectedNodes.length && subset.length !== 0,\n    );\n\n    /* Get the sub graph and whether it is disconnected */\n\n    /* Check if any the proper subsets is a separator in the graph */\n    for (const set of allProperSubsets) {\n      const sg = this.isSeparatorSet(set);\n      if (sg.isDisconnected) {\n        this.resetNodeStyling();\n        this.colorNotSeparating();\n        d3.select('#separator-output').html(`\\\\( S = \\\\{ ${this.selectedNodes} \\\\} \\\\) is not a minimal separator!<span class=\"material-icons wrong-answer\">clear</span>`);\n        renderMathInElement(document.body);\n        return;\n      }\n    }\n\n    const subg = this.isSeparatorSet(this.selectedNodes);\n\n    if (subg.isDisconnected) {\n      this.resetNodeStyling();\n      this.colorSeparating();\n      d3.select('#separator-output').html(`\\\\( S = \\\\{ ${this.selectedNodes} \\\\} \\\\) is a minimal separator!<span class=\"material-icons correct-answer\">check</span>`);\n      renderMathInElement(document.body);\n      return;\n    }\n    this.resetNodeStyling();\n    this.colorNotSeparating();\n    d3.select('#separator-output').html(`\\\\( S = \\\\{ ${this.selectedNodes} \\\\} \\\\) is not a minimal separator!<span class=\"material-icons wrong-answer\">clear</span>`);\n    renderMathInElement(document.body);\n  }\n\n  toggleMinimalSeparatorExercise() {\n    d3.selectAll('circle').on('click', (d) => this.checkMinimalSeparator(d));\n  }\n\n  checkConnectivity(subGraphNodes, subGraphLinks) {\n    let componentCount = 1;\n    let cluster = 2;\n\n    if (subGraphNodes.length === 0) {\n      componentCount = 0;\n      return;\n    }\n\n    componentCount = 1;\n    subGraphNodes.forEach((v) => {\n      v.visited = false;\n    });\n\n    const adjList = {};\n    subGraphNodes.forEach((v) => {\n      adjList[v.id] = [];\n    });\n\n    subGraphLinks.forEach((e) => {\n      adjList[e.source.id].push(e.target);\n      adjList[e.target.id].push(e.source);\n    });\n\n    const q = [];\n    q.push(subGraphNodes[0]);\n\n    while (q.length > 0) {\n      const v1 = q.shift();\n      const adj = adjList[v1.id];\n\n      for (let i = 0; i < adj.length; i++) {\n        const v2 = adj[i];\n        if (v2.visited) continue;\n        q.push(v2);\n      }\n\n      v1.visited = true;\n      v1.cluster = cluster.toString();\n      if (q.length === 0) {\n        for (let i = 0; i < subGraphNodes.length; i++) {\n          if (!subGraphNodes[i].visited) {\n            q.push(subGraphNodes[i]);\n            componentCount++;\n            cluster++;\n            break;\n          }\n        }\n      }\n    }\n\n    this.componentCount = componentCount;\n\n    // d3.selectAll('circle.node').style('fill', (d) => colors(d.cluster));\n\n    const isDisconnected = componentCount > 1;\n\n    return { subGraphNodes, subGraphLinks, isDisconnected };\n  }\n\n  isNeighboringSeparatedNodes(newNode) {\n    for (const node of this.selectedNodes) {\n      if (this.adjacencyList[`${node}-${newNode}`]) return true;\n    }\n    return false;\n  }\n\n\n  isNeighboring(nodeToCheck) {\n    return this.selectedNodes.some((selectNode) => {\n      if (this.adjacencyList[`${selectNode}-${nodeToCheck}`]) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  isSeparatingNodesAdjacent() {\n    return this.selectedNodes.every((node) => {\n      if (this.isNeighboring(node)) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  checkSeparator(d) {\n    /* If node clicked on is already in the separator set we remove it */\n    if (this.selectedNodes.includes(d.id)) {\n      const nodeInSeparatorSet = this.selectedNodes.indexOf(d.id);\n      this.selectedNodes.splice(nodeInSeparatorSet, 1);\n\n      /* If the new separating set is empty reset the result and the styling */\n      if (this.selectedNodes.length === 0) {\n        d3.select('#separator-output').html('Click on a vertex to include it into the separator set.');\n        this.resetNodeStyling();\n        return;\n      }\n    } else {\n      this.selectedNodes.push(d.id);\n    }\n\n    /* Remove the current separator nodes */\n    const subGraphNodes = this.nodes.filter(\n      (node) => !this.selectedNodes.includes(node.id),\n    );\n\n    /* Remove the links from the separator node */\n    const linksToRemove = this.links.filter((l) => {\n      if (\n        this.selectedNodes.includes(l.target.id)\n      || this.selectedNodes.includes(l.source.id)\n      ) return true;\n    });\n    const subGraphLinks = this.links.filter((link) => !linksToRemove.includes(link));\n\n    /* Check if the new subgraph after deleteing the separating set is connected */\n    const subg = this.checkConnectivity(subGraphNodes, subGraphLinks);\n\n\n    if (subg.isDisconnected) {\n      this.resetNodeStyling();\n      this.colorSeparating();\n      d3.select('#separator-output').html(`The set \\\\( S = \\\\{ ${this.selectedNodes} \\\\} \\\\) is indeed a separator in the graph. \n      <span class=\"material-icons correct-answer\">check</span> \n      <br/><br/>Because if we remove the separator it would disconnect the graph into <strong>${this.componentCount}</strong> different components.`);\n      renderMathInElement(document.body);\n    } else {\n      this.resetNodeStyling();\n      this.colorNotSeparating();\n      d3.select('.result-text').html(`\\\\( S = \\\\{ ${this.selectedNodes} \\\\} \\\\) is not a separator in the graph.  <span class=\"material-icons wrong-answer\">clear</span>`);\n      renderMathInElement(document.body);\n    }\n  }\n\n  toggleSeparatorExercise() {\n    d3.selectAll('circle').on('click', (d) => this.checkSeparator(d));\n  }\n\n  toggleMaxStop() {\n    if (this.maxStop) {\n      this.maxStop = false;\n    } else {\n      this.maxStop = true;\n    }\n  }\n\n  buildAdjacencyList() {\n    const adjacencyList = [];\n    this.links.forEach((d) => {\n      adjacencyList[`${d.source.id}-${d.target.id}`] = true;\n      adjacencyList[`${d.target.id}-${d.source.id}`] = true;\n    });\n    this.adjacencyList = adjacencyList;\n  }\n\n  async maximumIndependentSet() {\n    return new Promise(async (resolve) => {\n      let maximumSet = 0;\n      let maximumIndependentSet = [];\n      let possibleMaxSet = true;\n\n      for (let i = 2; i < this.nodes.length + 1; i++) {\n        if (this.maxStop === true) break;\n        const conjunto = generatePowerSet(this.nodes, i);\n\n        for (const c of conjunto) {\n          possibleMaxSet = true;\n          const pair = generatePowerSet(c, 2);\n\n          if (this.maxStop === true) break;\n\n          for (const par of pair) {\n            const vertex1 = par[0];\n            const vertex2 = par[1];\n            if (this.animationSpeed > 0) {\n              highlightVertex(vertex1.id);\n              highlightVertex(vertex2.id);\n              await timeout(this.animationSpeed);\n              removeHighlightVertex(vertex1.id);\n              removeHighlightVertex(vertex2.id);\n            }\n\n            if (this.maxStop === true) break;\n\n            if (this.adjacencyList[`${vertex1.id}-${vertex2.id}`]) {\n              possibleMaxSet = false;\n              break;\n            }\n          }\n\n          if (possibleMaxSet && c.length > maximumSet) {\n            maximumSet = c.length;\n            maximumIndependentSet = c;\n            const result = [];\n            maximumIndependentSet.forEach((n) => {\n              n.isMax = true;\n              result.push(n.id);\n            });\n\n            if (this.animationSpeed > 0) {\n              await repeat(c, this.animationSpeed * 1.5);\n              await timeout(this.animationSpeed * 1.5);\n            }\n\n            d3.select('#max-output').html(String.raw`Maximum Independent Set = \\( \\{ ${result} \\} \\)`);\n            renderMathInElement(document.body);\n          }\n        }\n      }\n      this.resetNodeStyling();\n      d3.selectAll('circle').interrupt();\n      d3.selectAll('circle').filter((node) => maximumIndependentSet.includes(node)).style('fill', 'orange');\n      resolve();\n    });\n  }\n\n  async runMaximumIndependentSet() {\n    if (this.isMisRunning === true) {\n      this.animationSpeed = 0;\n      await timeout(1500);\n      d3.select('#max-output').html(null);\n      d3.selectAll('circle').interrupt();\n      d3.selectAll('circle').style('fill', '#1f77b4');\n      this.animationSpeed = 500;\n      this.maximumIndependentSet();\n    } else {\n      this.animationSoeed = 500;\n      this.isMisRunning = true;\n      this.maximumIndependentSet();\n    }\n  }\n\n  skipForwardMaximumIndependentSet() {\n    this.animationSpeed = 0;\n  }\n\n  clear() {\n    this.svg.remove();\n    this.nodes = [];\n    this.links = [];\n    this.lastNodeId = 0;\n  }\n\n  hoverEffect(d) {\n    d3.selectAll('#graph-container circle')\n      .filter((node) => d.vertices.includes(node.id))\n      .transition()\n      .duration(100)\n      .style('fill', 'orange');\n  }\n\n  toggleHoverEffect() {\n    if (this.isHoverEffect) {\n      this.isHoverEffect = false;\n      this.nodeSvg.on('mouseover', null);\n      this.nodeSvg.on('mouseout', null);\n    } else {\n      this.isHoverEffect = true;\n      this.nodeSvg.on('mouseover', (d) => this.hoverEffect(d));\n      this.nodeSvg.on('mouseout', this.resetNodeStyling);\n    }\n  }\n\n  resetTreeDecompositionStyles() {\n    d3.selectAll('ellipse')\n      .style('fill', '#2ca02c')\n      .attr('rx', 35)\n      .attr('ry', 25)\n      .style('opacity', 1);\n  }\n\n  isConnected() {\n    let componentCount = 1;\n    let cluster = 2;\n\n    if (this.nodes.length === 0) {\n      componentCount = 0;\n      return;\n    }\n\n    componentCount = 1;\n    this.nodes.forEach((v) => {\n      v.visited = false;\n    });\n\n    const adjList = {};\n    this.nodes.forEach((v) => {\n      adjList[v.id] = [];\n    });\n\n    this.links.forEach((e) => {\n      adjList[e.source.id].push(e.target);\n      adjList[e.target.id].push(e.source);\n    });\n\n    const q = [];\n    q.push(this.nodes[0]);\n\n    while (q.length > 0) {\n      const v1 = q.shift();\n      const adj = adjList[v1.id];\n\n      for (let i = 0; i < adj.length; i++) {\n        const v2 = adj[i];\n        if (v2.visited) {\n          continue;\n        }\n        q.push(v2);\n      }\n\n      v1.visited = true;\n      v1.cluster = cluster.toString();\n      if (q.length === 0) {\n        for (let i = 0; i < this.nodes.length; i++) {\n          if (!this.nodes[i].visited) {\n            q.push(this.nodes[i]);\n            componentCount++;\n            cluster++;\n            break;\n          }\n        }\n      }\n    }\n\n    this.componentCount = componentCount;\n\n    const isConnected = componentCount === 1;\n\n    return isConnected;\n  }\n\n  isTree() {\n    const isConnected = this.isConnected();\n    if (isConnected && this.nodes.length - 1 === this.links.length) {\n      return true;\n    }\n    return false;\n  }\n\n  areNodesInTree() {\n    return this.graphOfTd.nodes.every((node) => this.masterNodes.includes(node.id));\n  }\n\n  isEveryGraphLinkInTree() {\n    return this.graphOfTd.links.every((link) => {\n      for (let i = 0; i < this.nodes.length; i++) {\n        const currentBag = this.nodes[i];\n        if (currentBag.vertices === undefined) continue;\n        if (currentBag.vertices.includes(link.source.id) && currentBag.vertices.includes(link.target.id)) return true;\n      }\n      return false;\n    });\n  }\n\n  checkCoherence() {\n    if (this.nodes.length === 0 || this.links.length === 0) return false;\n\n    /* Check if a node exists in multiple bags */\n    for (let i = 0; i < this.graphOfTd.nodes.length; i++) {\n      const currentNode = this.graphOfTd.nodes[i];\n      currentNode.counter = 0;\n\n      for (let j = 0; j < this.nodes.length; j++) {\n        const currentBag = this.nodes[j];\n        if (currentBag.vertices === undefined) continue;\n        if (currentBag.vertices.includes(currentNode.id)) {\n          currentNode.counter++;\n        }\n      }\n    }\n\n    const multipleNodes = this.graphOfTd.nodes.filter((node) => node.counter > 1);\n\n    for (let i = 0; i < multipleNodes.length; i++) {\n      const node = multipleNodes[i];\n      /* find all bags with this node */\n\n      const tempNodes = this.nodes.filter((bag) => {\n        if (bag.vertices) return bag.vertices.includes(node.id);\n      });\n\n      const tempLinks = this.links.filter((link) => tempNodes.includes(link.source) && tempNodes.includes(link.target));\n      const obj = this.checkConnectivity(tempNodes, tempLinks);\n      if (obj.isDisconnected) return false;\n    }\n    return true;\n  }\n\n  checkTreeDecomposition() {\n    let treeString;\n    let nodeCoverageString;\n    let edgeCoverageString;\n    let coherenceString;\n    let validString;\n\n    if (this.isTree()) {\n      treeString = 'Tree decomposition is a tree  <span class=\"material-icons correct-answer\">check</span>';\n    } else {\n      treeString = 'Tree decomposition must be a tree. <span class=\"material-icons wrong-answer\">clear</span>';\n    }\n\n    /* Check node coverage */\n    if (this.areNodesInTree()) {\n      nodeCoverageString = 'Node coverage  <span class=\"material-icons correct-answer\">check</span>';\n    } else {\n      nodeCoverageString = 'Node coverage <span class=\"material-icons wrong-answer\">clear</span>';\n    }\n\n    /* Check edge coverage */\n    if (this.isEveryGraphLinkInTree()) {\n      edgeCoverageString = 'Edge coverage <span class=\"material-icons correct-answer\">check</span>';\n    } else {\n      edgeCoverageString = 'Edge coverage <span class=\"material-icons wrong-answer\">clear</span>';\n    }\n\n    /* Check coherence property */\n    if (this.checkCoherence()) {\n      coherenceString = 'Coherence <span class=\"material-icons correct-answer\">check</span>';\n    } else {\n      coherenceString = 'Coherence <span class=\"material-icons wrong-answer\">clear</span>';\n    }\n\n    if (this.isTree() && this.areNodesInTree() && this.isEveryGraphLinkInTree() && this.checkCoherence()) {\n      validString = 'This is a valid tree decomposition <span class=\"material-icons correct-answer\">check</span>';\n    } else {\n      validString = 'This is not a valid tree decomposition <span class=\"material-icons wrong-answer\">clear</span>';\n    }\n\n    d3.select('#output').html(`\n      <div>${treeString}</div>\n      <div>${nodeCoverageString}</div>\n      <div>${edgeCoverageString}</div>\n      <div>${coherenceString}</div>\n      <div>${validString}</div>\n    `);\n  }\n\n  updateMasterList() {\n    let temp = [];\n    this.nodes.forEach((bag) => {\n      if (bag.vertices) temp = temp.concat(bag.vertices);\n    });\n\n    const tempSet = [...new Set(temp)];\n    this.masterNodes = tempSet;\n  }\n\n  removeEdge(d) {\n    this.links.splice(this.links.indexOf(d), 1);\n    d3.event.preventDefault();\n    this.restart();\n  }\n\n  restart() {\n    this.updateMasterList();\n    /* Enter, update, remove link SVGs */\n    this.svg.selectAll('line')\n      .data(this.links, (d) => `v${d.source.id}-v${d.target.id}`)\n      .join(\n        (enter) => enter\n          .append('line')\n          .lower()\n          .attr('class', 'graphLink')\n          .on('contextmenu', (d) => this.removeEdge(d)),\n        (update) => update,\n        (exit) => exit.remove(),\n      );\n\n    /* Enter, update, remove ellipse SVGs */\n    this.svg.selectAll('circle')\n      .data(this.nodes, (d) => d.id)\n      .join(\n        (enter) => {\n          enter.append('circle')\n            .attr('r', 20)\n            .style('fill', '#1f77b4')\n            .style('stroke', 'rgb(51, 51, 51)')\n            .style('stroke-width', '3.5px')\n            .on('mouseover', () => this.disableAddNode())\n            .on('mouseleave', () => this.enableAddNode())\n            .on('mousedown', (d) => this.beginDrawLine(d))\n            .on('mouseup', (d) => this.stopDrawLine(d))\n            .on('contextmenu', d3.contextMenu(menu));\n        },\n        (update) => update,\n        (exit) => exit.remove(),\n      );\n\n    this.svg.selectAll('text')\n      .data(this.nodes, (d) => d.id)\n      .join(\n        (enter) => enter.append('text')\n          .attr('dy', 4.5)\n          .text((d) => d.id)\n          .attr('class', 'graph-label'),\n        (update) => update,\n        (exit) => exit.remove(),\n      );\n\n    this.simulation.force('link').links(this.links);\n    this.simulation.nodes(this.nodes);\n    this.simulation.alpha(0.5).restart();\n  }\n\n  addNode() {\n    if (this.canAddNode === false) return;\n    const e = d3.event;\n    if (e.button === 0) {\n      const coords = d3.mouse(e.currentTarget);\n      const newNode = {\n        x: coords[0], y: coords[1], id: ++this.lastNodeId,\n      };\n      this.nodes.push(newNode);\n      this.setg();\n      this.restart();\n    }\n  }\n\n  enableAddNode() {\n    this.canAddNode = true;\n  }\n\n  disableAddNode() {\n    this.canAddNode = false;\n  }\n\n  removeNode(d) {\n    d3.event.preventDefault();\n    const linksToRemove = this.links.filter((l) => l.source === d || l.target === d);\n    linksToRemove.map((l) => this.links.splice(this.links.indexOf(l), 1));\n    const indexOfNode = this.nodes.indexOf(d);\n    this.nodes.splice(indexOfNode, 1);\n    this.restart();\n  }\n\n  leftCanvas() {\n    this.dragLine.classed('hidden', true);\n    this.mousedownNode = null;\n  }\n\n  updateDragLine() {\n    if (!this.mousedownNode) return;\n    const coords = d3.mouse(d3.event.currentTarget);\n    this.dragLine.attr(\n      'd',\n      `M${\n        this.mousedownNode.x\n      },${\n        this.mousedownNode.y\n      }L${\n        coords[0]\n      },${\n        coords[1]}`,\n    );\n  }\n\n  hideDragLine() {\n    this.svg.selectAll('circle').style('fill', '#1f77b4');\n    this.dragLine.classed('hidden', true);\n    this.mousedownNode = null;\n    this.restart();\n  }\n\n  beginDrawLine(d) {\n    this.svg.selectAll('circle').filter((node) => node === d).style('fill', 'orange');\n    if (d3.event.ctrlKey) return;\n    d3.event.preventDefault();\n    this.mousedownNode = d;\n    this.dragLine\n      .classed('hidden', false)\n      .attr(\n        'd',\n        `M${\n          this.mousedownNode.x\n        },${\n          this.mousedownNode.y\n        }L${\n          this.mousedownNode.x\n        },${\n          this.mousedownNode.y}`,\n      );\n  }\n\n  stopDrawLine(d) {\n    this.svg.selectAll('circle').style('fill', '#1f77b4');\n    if (!this.mousedownNode || this.mousedownNode === d) return;\n    for (let i = 0; i < this.links.length; i++) {\n      const l = this.links[i];\n      if (\n        (l.source === this.mousedownNode && l.target === d)\n        || (l.source === d && l.target === this.mousedownNode)\n      ) {\n        return;\n      }\n    }\n    const newLink = { source: this.mousedownNode, target: d };\n    this.links.push(newLink);\n  }\n\n  enableDrawing() {\n    if (this.svg) this.clear();\n    const w = document.getElementById(this.container).offsetWidth;\n    const h = document.getElementById(this.container).offsetHeight;\n    this.width = w;\n    this.height = h;\n    const svg = d3.select(`#${this.container}`).append('svg').attr('width', w).attr('height', h);\n    this.svg = svg;\n    this.svg.style('cursor', 'crosshair');\n\n    this.restartSimulation();\n\n    this.svg\n      .on('mousedown', () => this.addNode())\n      .on('contextmenu', () => d3.event.preventDefault())\n      .on('mousemove', () => this.updateDragLine())\n      .on('mouseup', () => this.hideDragLine())\n      .on('mouseleave', () => this.leftCanvas());\n\n    this.dragLine = this.svg\n      .append('path')\n      .attr('class', 'dragLine hidden')\n      .attr('d', 'M0,0L0,0');\n  }\n\n  setg() {\n    this.nodes.forEach((node) => {\n      node.graph = this;\n    });\n  }\n\n  restartSimulation() {\n    const simulation = d3.forceSimulation()\n      // .force('center', d3.forceCenter(this.width / 2, this.height / 2))\n      .force('x', d3.forceX(this.width / 2).strength(0.1))\n      .force('y', d3.forceY(this.height / 2).strength(0.1))\n      .nodes(this.nodes)\n      .force('charge', d3.forceManyBody().strength(-500))\n      .force('link', d3.forceLink(this.links).id((d) => d.id).distance(70).strength(0.5))\n      .force('collision', d3.forceCollide().radius(20))\n      .on('tick', () => {\n        this.svg.selectAll('circle').attr('cx', (d) => d.x).attr('cy', (d) => d.y);\n        this.svg.selectAll('text').attr('x', (d) => d.x).attr('y', (d) => d.y);\n\n        this.svg.selectAll('line').attr('x1', (d) => d.source.x)\n          .attr('y1', (d) => d.source.y)\n          .attr('x2', (d) => d.target.x)\n          .attr('y2', (d) => d.target.y);\n      });\n\n    simulation.force('link').links(this.links);\n    this.simulation = simulation;\n  }\n\n  highlightNodeColor(nodeId, color) {\n    d3.select(`#graph-node-${nodeId}`).style('fill', color);\n  }\n\n  resetNodeColors() {\n    d3.selectAll('#graph-container circle').style('fill', 'rgb(31, 119, 180)');\n  }\n\n  loadGraph(graph, type, graphOfTd) {\n    this.graphOfTd = graphOfTd;\n    if (this.svg) this.clear();\n    this.graph = graph;\n    this.nodes = graph.nodes;\n    this.links = graph.links;\n    const w = document.getElementById(this.container).offsetWidth;\n    const h = document.getElementById(this.container).offsetHeight;\n    this.width = w;\n    this.height = h;\n    const svg = d3.select(`#${this.container}`).append('svg').attr('width', this.width).attr('height', this.height);\n\n    this.svg = svg;\n\n    this.svg\n      .append('defs')\n      .append('marker')\n      .attr('id', 'arrow')\n      .attr('viewBox', '0 -5 10 10')\n      .attr('refX', 5)\n      .attr('refY', 0)\n      .attr('markerWidth', 4)\n      .attr('markerHeight', 4)\n      .attr('oriten', 'auto')\n      .append('path')\n      .attr('d', 'M0,-5L10,0L0,5');\n\n    const path = svg.append('path')\n      .attr('fill', 'orange')\n      .attr('stroke', 'orange')\n      .attr('stroke-width', 16)\n      .attr('opacity', 0);\n\n    this.path = path;\n\n    this.path2 = this.svg.append('path')\n      .attr('fill', 'steelblue')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 16)\n      .attr('opacity', 0);\n\n    const linkSvg = svg.selectAll('line')\n      .data(graph.links)\n      .enter()\n      .append('line')\n      .attr('id', (d) => `link-${d.source.id}-${d.target.id}`)\n      .attr('class', 'graphLink');\n\n    this.linkSvg = linkSvg;\n\n    if (type === 'tree') {\n      const treeg = svg.selectAll('g')\n        .data(graph.nodes)\n        .enter()\n        .append('g')\n        .attr('class', 'td')\n        .call(d3.drag()\n          .on('start', (v) => {\n            if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n            [v.fx, v.fy] = [v.x, v.y];\n          })\n          .on('drag', (v) => {\n            [v.fx, v.fy] = [d3.event.x, d3.event.y];\n          })\n          .on('end', (v) => {\n            if (!d3.event.active) simulation.alphaTarget(0);\n            [v.fx, v.fy] = [null, null];\n          }));\n\n      this.treeg = treeg;\n\n      this.nodeSvg = svg.selectAll('g')\n        .append('ellipse')\n        .attr('rx', (d) => d.label.length * 8)\n        .attr('ry', 25)\n        .style('fill', '#2ca02c')\n        .style('stroke', 'rgb(51, 51, 51)')\n        .style('stroke-width', '3.5px');\n\n      svg.selectAll('g')\n        .append('text')\n        .attr('dy', -4)\n        .text((d) => {\n          if (type === 'tree') {\n            return d.label.substring(0, 2);\n          }\n          return d.id;\n        })\n        .style('letter-spacing', '6px')\n        .attr('class', 'graph-label');\n\n      svg.selectAll('g')\n        .append('text')\n        .attr('dy', 15)\n        .text((d) => d.label.substring(2))\n        .style('letter-spacing', '4px')\n        .attr('class', 'graph-label');\n    } else {\n      this.nodeSvg = svg.selectAll('circle')\n        .data(graph.nodes)\n        .enter()\n        .append('circle')\n        .attr('id', (d) => `graph-node-${d.id}`)\n        .style('opacity', (d) => {\n          if (d.id === 0) return 0;\n        })\n        .attr('r', 18)\n        .style('fill', () => {\n          if (type === 'tree') return '#2ca02c';\n          return '#1f77b4';\n        })\n        .style('stroke', 'rgb(51, 51, 51)')\n        .style('stroke-width', '3.5px')\n        .attr('class', 'nonhighlight')\n        .call(d3.drag()\n          .on('start', (v) => {\n            if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n            [v.fx, v.fy] = [v.x, v.y];\n          })\n          .on('drag', (v) => {\n            [v.fx, v.fy] = [d3.event.x, d3.event.y];\n          })\n          .on('end', (v) => {\n            if (!d3.event.active) simulation.alphaTarget(0);\n            [v.fx, v.fy] = [null, null];\n          }));\n\n      svg.selectAll('text')\n        .data(graph.nodes)\n        .enter()\n        .append('text')\n        .style('opacity', (d) => {\n          if (d.id === 0) return 0;\n        })\n        .attr('dy', 4.5)\n        .text((d) => (d.label ? d.label : d.id))\n        .attr('class', 'graph-label');\n    }\n\n    const line = d3.line().curve(d3.curveBasisClosed);\n\n    const simulation = d3.forceSimulation()\n      .force('center', d3.forceCenter(w / 2, h / 2))\n      .force('x', d3.forceX(w / 2).strength(0.1))\n      .force('y', d3.forceY(h / 2).strength(0.1))\n      .nodes(graph.nodes)\n      .force('charge', d3.forceManyBody().strength(-900))\n      .force('link', d3.forceLink(graph.links).id((d) => d.id).distance(() => {\n        if (type === 'tree') {\n          return 100;\n        }\n        return 50;\n      }).strength(0.9))\n      .force('collision', d3.forceCollide().radius((d) => {\n        if (type === 'tree') {\n          return 50;\n        }\n        return d.r + 10;\n      }))\n      .on('tick', () => {\n        this.svg.selectAll('circle').attr('cx', (d) => d.x).attr('cy', (d) => d.y);\n        this.svg.selectAll('ellipse').attr('transform', (d) => `translate(${d.x},${d.y})`);\n        this.svg.selectAll('text').attr('x', (d) => d.x).attr('y', (d) => d.y);\n\n        this.svg.selectAll('line.graphLink').attr('x1', (d) => d.source.x)\n          .attr('y1', (d) => d.source.y)\n          .attr('x2', (d) => d.target.x)\n          .attr('y2', (d) => d.target.y);\n\n        if (this.separatorNodes) {\n          let pointArr = [];\n          const padding = 3.5;\n\n          for (let i = 0; i < this.separatorNodes.length; i++) {\n            const node = this.separatorNodes[i];\n            const pad = 17 + padding;\n            pointArr = pointArr.concat([\n              [node.x - pad, node.y - pad],\n              [node.x - pad, node.y + pad],\n              [node.x + pad, node.y - pad],\n              [node.x + pad, node.y + pad],\n            ]);\n          }\n          if (pointArr.length === 0) return;\n          this.path.attr('d', line(hull(pointArr)));\n        }\n\n        if (this.separatorNodes2) {\n          let pointArr = [];\n          const padding = 3.5;\n\n          for (let i = 0; i < this.separatorNodes2.length; i++) {\n            const node = this.separatorNodes2[i];\n            const pad = 17 + padding;\n            pointArr = pointArr.concat([\n              [node.x - pad, node.y - pad],\n              [node.x - pad, node.y + pad],\n              [node.x + pad, node.y - pad],\n              [node.x + pad, node.y + pad],\n            ]);\n          }\n          if (pointArr.length === 0) return;\n          this.path2.attr('d', line(hull(pointArr)));\n        }\n      });\n\n    simulation.force('link').links(graph.links);\n    this.buildAdjacencyList();\n    this.simulation = simulation;\n    this.setg();\n  }\n\n  randomGraph(vertices, edges) {\n    if (this.svg) this.clear();\n    // eslint-disable-next-line no-unused-vars\n    let randomGraph;\n    if (vertices === undefined && edges === undefined) randomGraph = generateRandomGraph(10, 10);\n    else randomGraph = generateRandomGraph(vertices, edges);\n    randomGraph = this.loadGraph(randomGraph, this.container, 'graph');\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nexport const contextMenu = function (d) {\n  return [\n    {\n      title: 'Insert Child Node',\n      action(elm, d, i) {\n        const value = prompt('Value:');\n\n        const splitted = value.split(',');\n        const temp = [];\n        splitted.forEach((vertix) => {\n          const v = parseInt(vertix, 10);\n          temp.push(v);\n        });\n        // d.data.vertices = temp;\n\n        d.tree.addNode(d, value, temp);\n      },\n    },\n    {\n      title: 'Delete Node',\n      action(elm, d, i) {\n        d.tree.removeNode(d);\n      },\n    },\n    {\n      title: 'Set Value',\n      action(elm, d, i) {\n        const number = prompt('Value:');\n        d.data.label = number;\n\n        const splitted = number.split(',');\n        const temp = [];\n        splitted.forEach((vertix) => {\n          const v = parseInt(vertix, 10);\n          temp.push(v);\n        });\n        d.data.vertices = temp;\n        d.tree.restart();\n      },\n    },\n  ];\n};\n","/* eslint-disable no-case-declarations */\n/* eslint-disable default-case */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable no-extend-native */\n/* eslint-disable func-names */\n/* eslint-disable no-else-return */\n/* eslint-disable no-loop-func */\n/* eslint-disable no-mixed-operators */\n/* eslint-disable no-continue */\n/* eslint-disable no-return-assign */\n/* eslint-disable no-shadow */\n/* eslint-disable max-len */\n/* eslint-disable camelcase */\n/* eslint-disable consistent-return */\n/* eslint-disable no-lonely-if */\n/* eslint-disable class-methods-use-this */\n\nimport { hull, getAllSubsets, deepClone } from '../Utilities/helpers.js';\nimport { contextMenu as menu } from './TreeContextMenu.js';\n\nconst arraysMatch = function (arr1, arr2) {\n  // Check if the arrays are the same length\n  if (arr1.length !== arr2.length) return false;\n\n  // Check if all items exist and are in the same order\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) return false;\n  }\n\n  // Otherwise, return true\n  return true;\n};\n\nSet.prototype.subSet = function (otherSet) {\n  // if size of this set is greater\n  // than otherSet then it can'nt be\n  //  a subset\n  if (this.size > otherSet.size) return false;\n\n  for (const elem of this) {\n    // if any of the element of\n    // this is not present in the\n    // otherset then return false\n    if (!otherSet.has(elem)) return false;\n  }\n  return true;\n};\n\n// Include in your code!\nconst data = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst myColor = d3.scaleOrdinal().domain(data)\n  .range(d3.schemeSet3);\n\nfunction resetStyles() {\n  d3.selectAll('circle').classed('highlighted-vertex', false).classed('nonhighlight', true);\n}\n\nfunction multiDimensionalUnique(arr) {\n  const uniques = [];\n  const itemsFound = {};\n  for (let i = 0, l = arr.length; i < l; i++) {\n    const stringified = JSON.stringify(arr[i]);\n    if (itemsFound[stringified]) { continue; }\n    uniques.push(arr[i]);\n    itemsFound[stringified] = true;\n  }\n  return uniques;\n}\n\n\nfunction highlightVertex(nodeId) {\n  resetStyles();\n  d3.selectAll('circle')\n    .filter((node) => nodeId === node.data.id)\n    .classed('nonhighlight', false)\n    .classed('highlighted-vertex', true);\n}\n\nfunction moveColorTable(node) {\n  const nodeSvg = d3.select(`#treeNode-${node.id}`);\n  const x = parseInt(nodeSvg.attr('x'), 10);\n  let y = parseInt(nodeSvg.attr('y'), 10);\n\n  y += 12.5;\n\n  d3.select('#tooltip-arrow')\n    .style('opacity', 1)\n    .attr('x1', x - 50)\n    .attr('y1', y)\n    .attr('x2', x)\n    .attr('y2', y)\n    .attr('transform', `translate(${0}, ${30})`);\n}\n\nfunction moveTooltip(node, maxSetIncl, maxSetExcl) {\n  if ('children' in node === false) {\n    d3.select('#tooltip').html('Largest set of a leaf is 1');\n  } else {\n    d3.select('#tooltip').html(`<div>Max set incl. node: ${maxSetIncl}</div>\n    <div>\n      Max set excl. node: ${maxSetExcl}\n    </div>`);\n  }\n\n  const nodeSvg = d3.select(`#treeNode-${node.id}`);\n  const cx = nodeSvg.attr('cx');\n  const cy = nodeSvg.attr('cy');\n\n  d3.select('#tooltip-arrow')\n    .style('opacity', 1)\n    .attr('x1', cx - 50)\n    .attr('y1', cy)\n    .attr('x2', cx - 18)\n    .attr('y2', cy)\n    .attr('transform', `translate(${0}, ${30})`);\n\n  const { top } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n  const { left } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n\n  d3.select('#tooltip')\n    .style('opacity', 1)\n    .style('left', `${left}px`)\n    .style('top', `${top}px`);\n}\n\nfunction getSubTree(rootOfSubtree, currentNode) {\n  let subTree;\n  rootOfSubtree.each((d) => {\n    if (d.data.id === currentNode.id) subTree = d.descendants();\n  });\n  return subTree;\n}\n\nexport default class Tree {\n  constructor(container, type, graph) {\n    this.container = container;\n    this.isMis = false;\n    this.isColor = false;\n    this.root = null;\n    this.current = 0;\n    this.graph = null;\n    this.type = type;\n    this.graph = graph;\n    this.masterNodes = [];\n  }\n\n  getSubTree(node) {\n    return node.descendants();\n  }\n\n  getRoot() {\n    return this.root;\n  }\n\n  updateMasterList() {\n    let temp = [];\n    this.nodes.forEach((bag) => {\n      if (bag.vertices) temp = temp.concat(bag.vertices);\n    });\n\n    const tempSet = [...new Set(temp)];\n    this.masterNodes = tempSet;\n  }\n\n  isBinary() {\n    let isBinary = true;\n\n    this.root.sum((node) => {\n      if (node.children) {\n        node.children.length > 2 ? isBinary = false : isBinary = true;\n      }\n    });\n\n    return isBinary;\n  }\n\n  isNodeCoverage() {\n    // const nodeCoverage = true;\n\n    const tempSet = new Set();\n\n    this.graph.nodes.forEach((node) => {\n      const tempArr = node.label.split(' ');\n      tempArr.forEach((ta) => tempSet.add(parseInt(ta, 10)));\n    });\n\n    const tempSet2 = new Set();\n\n    this.root.sum((node) => {\n      const tempArr2 = node.label.split(',');\n      tempArr2.forEach((ta) => tempSet2.add(parseInt(ta, 10)));\n    });\n\n    return tempSet.subSet(tempSet2);\n  }\n\n  isEdgeCoverage() {\n    return this.graph.links.every((link) => {\n      this.root.eachAfter((node) => {\n        if (node.data.vertices && node.data.vertices.includes(link.source.id) && node.data.vertices.includes(link.target.id)) {\n          return true;\n        }\n      });\n      return false;\n    });\n  }\n\n  checkNodeType() {\n    let isViableNodeType = false;\n    let finalBoolean = true;\n\n    this.root.eachAfter((bag) => {\n      const { vertices } = bag.data;\n\n      isViableNodeType = false;\n\n      if (!bag.data.children || bag.data.children.length === 0) {\n        if (vertices.length <= 1) {\n          isViableNodeType = true;\n        }\n      } else if (bag.data.children.length === 2) {\n        if (arraysMatch(bag.children[0].data.vertices, bag.children[1].data.vertices)) {\n          isViableNodeType = true;\n        }\n      } else if (vertices.length > bag.data.children[0].vertices.length) {\n        const vl = vertices.length - bag.data.children[0].vertices.length;\n        if (vl === 1) {\n          isViableNodeType = true;\n        }\n      } else if (vertices.length < bag.data.children[0].vertices.length) {\n        const vl = bag.data.children[0].vertices.length - vertices.length;\n        if (vl === 1) {\n          isViableNodeType = true;\n        }\n      }\n\n      if (isViableNodeType === false) {\n        finalBoolean = false;\n      }\n    });\n\n    return finalBoolean;\n  }\n\n  checkNiceProperties() {\n    if (this.isBinary()) {\n      // console.log('is binary');\n    } else {\n      // console.log('not binary');\n    }\n\n    if (this.isNodeCoverage()) {\n      // console.log('node coverage true');\n    } else {\n      // console.log('node coverage false');\n    }\n\n    if (this.checkNodeType()) {\n      d3.select('#output').html(`\n        All nodes are either a leaf, join, introduce or a forget node <span class=\"material-icons correct-answer\">check</span>\n      `);\n    } else {\n      d3.select('#output').html(`\n      Some nodes are NOT a leaf, join, introduce or a forget node <span class=\"material-icons wrong-answer\">clear</span>\n      `);\n    }\n  }\n\n  restart() {\n    this.updateMasterList();\n    this.setAllG();\n\n    const treeData = this.treeLayout(this.root);\n    const nodes = treeData.descendants();\n    const links = treeData.descendants().slice(1);\n\n    nodes.forEach((d) => {\n      d.y = d.depth * 180;\n    });\n\n    this.svg.selectAll('line')\n      .data(links, (d) => d.id)\n      .join(\n        (enter) => enter.append('line')\n          .lower()\n          .attr('class', 'tree-link')\n          .attr('x1', (d) => d.parent.x + 12.5)\n          .attr('y1', (d) => d.parent.y)\n          .attr('x2', (d) => d.x + 12.5)\n          .attr('y2', (d) => d.y),\n        (update) => update\n          .attr('x1', (d) => d.parent.x + 12.5)\n          .attr('y1', (d) => d.parent.y)\n          .attr('x2', (d) => d.x + 12.5)\n          .attr('y2', (d) => d.y),\n        (exit) => exit.remove(),\n      );\n\n\n    this.svg.selectAll('rect')\n      .data(nodes, (d) => d.id)\n      .join(\n        (enter) => enter\n          .append('rect')\n          .attr('width', (d) => {\n            const splitted = d.data.label.split(',');\n            return splitted.length * 25;\n          })\n          .attr('height', 25)\n          .attr('x', (d) => d.x - (d.data.label.split(',').length * 25 / 2))\n          .attr('y', (d) => d.y)\n          // .attr('transform', (d) => `translate(${d.x},${d.y})`)\n          .attr('rx', 5)\n          .attr('ry', 5)\n          .attr('class', 'tree-node')\n          .on('contextmenu', d3.contextMenu(menu)),\n        (update) => update\n          .attr('x', (d) => d.x - (d.data.label.split(',').length * 25 / 2))\n          // .attr('x', (d) => d.x)\n          .attr('y', (d) => d.y),\n        (exit) => exit.remove(),\n      );\n\n    this.svg.selectAll('text')\n      .data(nodes, (d) => d.label)\n      .join(\n        (enter) => enter\n          .append('text')\n          .attr('x', (d) => d.x)\n          .attr('y', (d) => d.y)\n          .attr('dy', '1.1em')\n          .attr('class', 'graph-label')\n          .text((d) => d.data.label),\n        (update) => update.text((d) => d.data.label),\n        (exit) => exit.remove(),\n      );\n\n    this.checkNiceProperties();\n  }\n\n  addNode(parentNode, label, vertices) {\n    const newNodeObject = {\n      id: ++this.nodes.length,\n      label,\n      children: null,\n      tree: this,\n      vertices,\n    };\n\n    const newNode = d3.hierarchy(newNodeObject);\n    newNode.depth = parentNode.depth + 1;\n    newNode.parent = parentNode;\n    newNode.children = null;\n\n    if (!parentNode.children) {\n      parentNode.children = [];\n      parentNode.data.children = [];\n    }\n\n    parentNode.children.push(newNode);\n    parentNode.data.children.push(newNode.data);\n\n    this.currentParent = parentNode;\n    this.restart();\n  }\n\n  removeNode(d) {\n    this.root.each((node) => {\n      if (d === node) {\n        node.children = null;\n        node.data.children = null;\n        const nIndex = node.parent.data.children.indexOf(node);\n        node.parent.data.children.splice(nIndex, 1);\n\n        if (node.parent.children.length === 1) node.parent.children = null;\n      }\n    });\n    this.restart();\n  }\n\n  clear() {\n    this.svg.remove();\n  }\n\n  hideTooltip() {\n    d3.select('#tooltip').style('opacity', 0);\n    d3.select('#tooltip-arrow').style('opacity', 0);\n  }\n\n  remove() {\n    this.svg.remove();\n  }\n\n  setGraph(graph) {\n    this.graph = graph;\n  }\n\n  setAllNodes() {\n    this.root.eachAfter((node) => {\n      node.largestSet = 0;\n    });\n  }\n\n  highlightMaxSet(setToHighlight) {\n    let sb = '';\n    sb += setToHighlight.replace('{', '').replace('}', '');\n    if (sb === 'Ø') return;\n    sb = `[${sb}]`;\n    const set = JSON.parse(sb);\n    this.graph.runMis(this.currentSubTree, set, 0, true);\n  }\n\n  drawHamiltonianTable(node) {\n    const keys = [...node.table.keys()];\n    const values = [...node.table.values()];\n\n    const thead = String.raw`\n    <thead>\n      <tr>\n        <th>\\( (d,M) \\)</th>\n        <th>\\( bool \\)</th>\n      </tr>\n    </thead>\n    `;\n\n    console.log(keys);\n\n    let sb = '';\n\n    keys.forEach((key, index) => {\n      const value = values[index];\n      const map = key[0];\n      const entries = Array.from(Object.keys(map));\n      const matchings = key[1];\n\n      let temp = String.raw`\\begin{pmatrix}`;\n\n      for (const entry of entries) {\n        const val = map[entry];\n        temp += String.raw`\n            ${entry[0]} → ${val}\\\\\n        `;\n      }\n\n      temp += String.raw`\\end{pmatrix}`;\n\n      for (const m of matchings) {\n        temp += JSON.stringify(m);\n      }\n\n\n      sb += String.raw`<tr><td>\\( ${temp} \\)</td><td>${value ? 'true<span class=\"material-icons correct-answer\">check</span>' : 'false<span class=\"material-icons wrong-answer\">clear</span>'}</td></tr>`;\n    });\n\n\n    const start = `<table class=\"hamiltonianTable\">${thead}<tbody>${sb}</tbody></table>`;\n\n\n    /*    const nodeSvg = d3.select(`#treeNode-${node.id}`);\n    const x = parseInt(nodeSvg.attr('x'), 10);\n    let y = parseInt(nodeSvg.attr('y'), 10);\n\n    y += 12.5;\n\n    d3.select('#tooltip-arrow')\n      .style('opacity', 1)\n      .attr('x1', x - 50)\n      .attr('y1', y)\n      .attr('x2', x)\n      .attr('y2', y)\n      .attr('transform', `translate(${0}, ${30})`);\n\n    const { top } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n    const { left } = document.getElementById('tooltip-arrow').getBoundingClientRect(); */\n\n    d3.select('#dp-table')\n      .html(start);\n    // .style('opacity', 1)\n    // .style('left', `${left}px`)\n    // .style('top', `${top}px`)\n    // .style('padding', '0');\n\n\n    renderMathInElement(document.body);\n  }\n\n  drawTable(node) {\n    const keys = Object.keys(node.table);\n    const values = Object.values(node.table);\n    let sb = '';\n\n    keys.forEach((key, index) => {\n      if (key === '') {\n        key = 'Ø';\n        keys.splice(index, 1);\n        keys.unshift(key);\n        const val = values[index];\n        values.splice(index, 1);\n        values.unshift(val);\n      }\n    });\n\n    keys.forEach((key, index) => {\n      const value = values[index];\n      if (value < -1000) return;\n      if (key !== 'Ø') {\n        key = `{${key}}`;\n      }\n      sb += `<tr id=${key} class=\"mis-row\"><td class=\"sets\">${key}</td><td>${value}</td></tr>`;\n    });\n\n    const start = `<table><tbody id=\"tbody\">${sb}</tbody></table>`;\n\n    const nodeSvg = d3.select(`#treeNode-${node.id}`);\n    const x = parseInt(nodeSvg.attr('x'), 10);\n    let y = parseInt(nodeSvg.attr('y'), 10);\n\n    y += 12.5;\n\n    d3.select('#tooltip-arrow')\n      .style('opacity', 1)\n      .attr('x1', x - 50)\n      .attr('y1', y)\n      .attr('x2', x)\n      .attr('y2', y)\n      .attr('transform', `translate(${0}, ${30})`);\n\n    const { top } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n    const { left } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n\n    d3.select('#tooltip')\n      .html(start)\n      .style('opacity', 1)\n      .style('left', `${left}px`)\n      .style('top', `${top}px`);\n  }\n\n  async misiterative() {\n    let i = 0;\n    this.root.eachAfter(async (currentNode) => {\n      i++;\n      if (this.current !== i) return;\n      const node = currentNode.data;\n\n      /* We hit a leaf */\n      if ('children' in node === false) {\n        moveTooltip(node);\n        highlightVertex(node.id);\n        node.largestSet = 1;\n        return node.largestSet;\n      }\n      /* Exclude current node */\n\n      let maxSetExcl = 0;\n\n      if (node.children.length === 1) {\n        maxSetExcl = node.children[0].largestSet;\n      }\n\n      if (node.children.length === 2) {\n        maxSetExcl = node.children[0].largestSet + node.children[1].largestSet;\n      }\n\n      let maxSetIncl = 1;\n\n      /* Include current node */\n      if (node.children[0] !== undefined && 'children' in node.children[0]) {\n        const left = node.children[0].children[0].largestSet;\n        let right = 0;\n        if (node.children[0].children.length === 2) right = node.children[0].children[1].largestSet;\n        maxSetIncl += left + right;\n      }\n\n      if (node.children[1] !== undefined && 'children' in node.children[1]) {\n        const left = node.children[1].children[0].largestSet;\n        let right = 0;\n        if (node.children[1].children.length === 2) right = node.children[1].children[1].largestSet;\n\n        maxSetIncl += left + right;\n      }\n\n      moveTooltip(node, maxSetIncl, maxSetExcl);\n      highlightVertex(node.id);\n\n      node.largestSet = Math.max(maxSetExcl, maxSetIncl);\n      return node.largestSet;\n    });\n  }\n\n  setMisNormalTree() {\n    this.isMisNormalTree = true;\n  }\n\n  nextStep() {\n    const N = this.root.descendants().length;\n    this.current++;\n    if (this.current !== N) this.current %= N;\n    if (this.isMisNormalTree) this.misiterative(this.current);\n    if (this.isColor) this.threeColor(this.current);\n  }\n\n  previousStep() {\n    if (this.current === 0) return;\n    const N = this.root.descendants().length;\n    --this.current;\n    this.current %= N;\n    if (this.isMisNormalTree) this.misiterative(this.current);\n    if (this.isColor) this.threeColor(this.current);\n  }\n\n  animateNode(nodeToAnimate) {\n    const descendants = nodeToAnimate.descendants();\n\n    const descendantsIds = [];\n\n    descendants.forEach((currentNode) => {\n      descendantsIds.push(currentNode.data.id);\n    });\n\n    this.svg.selectAll('rect').classed('highlighted-node', (currentNode) => {\n      if (descendantsIds.includes(currentNode.data.id)) return true;\n      return false;\n    });\n  }\n\n  animateLink(node) {\n    const desLinks = node.links();\n    const wat = [];\n\n    desLinks.forEach((currentLink) => {\n      wat.push(currentLink.source.data);\n      wat.push(currentLink.target.data);\n    });\n\n    this.svg.selectAll('line.tree-link').style('stroke', (link) => {\n      if (wat.includes(link.source.data)) return 'orange';\n    });\n  }\n\n  isArrayInArray(arr, item) {\n    const item_as_string = JSON.stringify(item);\n\n    const contains = arr.some((ele) => JSON.stringify(ele) === item_as_string);\n    return contains;\n  }\n\n  hamiltonianPath() {\n    let i = 1;\n\n    this.root.eachAfter((currentNode) => {\n      if (this.current !== i++) return;\n\n      this.animateNode(currentNode);\n      this.animateLink(currentNode);\n\n      const node = currentNode.data;\n      let type = '';\n      if ('children' in node === false) type = 'leaf';\n      else if (node.children.length === 2) type = 'join';\n      else if (node.vertices.length > node.children[0].vertices.length) type = 'introduce';\n      else if (node.vertices.length < node.children[0].vertices.length) type = 'forget';\n\n      const bag = node.vertices;\n\n      let child;\n      let childTable;\n      let childKeys;\n\n      if ('children' in node) {\n        child = this.getChild(node);\n        childTable = child.table;\n        childKeys = [...childTable.keys()];\n      }\n\n      let table = new Map();\n\n      switch (type) {\n        case 'leaf':\n          /* Not sure what to do here. */\n          break;\n        case 'introduce':\n          /* Get the introduced vertex */\n          const introducedVertex = this.getIntroducedVertex(node);\n\n          /* If the bag below this one is empty we know there is just 1 vertex and we want to initiliaze this bag */\n          if (child.vertices.length === 0) {\n            for (let i = 0; i <= 2; i++) {\n              // if (i === 1) continue;\n              const state = [];\n              // const d = new Map();\n              const d = {};\n              const firstVertex = bag[0];\n              d[firstVertex] = i;\n              const matchings = [];\n              const matching = [];\n              matchings.push(matching);\n              state.push(d);\n              state.push(matchings);\n\n              i === 1 ? table.set(state, false) : table.set(state, true);\n            }\n          } else {\n            for (const childKey of childKeys) {\n              for (let i = 0; i <= 2; i++) {\n                const d = childKey[0];\n\n                const newMap = deepClone(d);\n\n                // const newMap = new Map(d);\n                // newMap.set(introducedVertex, i);\n                newMap[introducedVertex] = i;\n                const newArray = [];\n                newArray.push(newMap, []);\n                table.set(newArray, true);\n              }\n            }\n\n\n            for (const childState of childKeys) {\n              const oldMap = childState[0];\n\n              for (let i = 0; i <= 2; i++) {\n                const state = [];\n                const matching = [];\n                const matchings = [];\n                const newMap = {};\n                // const newMap = new Map(oldMap);\n\n                switch (i) {\n                  case 0:\n                    newMap.set(introducedVertex, 0);\n                    matchings.push(matching);\n                    state.push(newMap, matchings);\n                    // states.push(state);\n                    break;\n                  case 1:\n\n                    for (const w of child.vertices) {\n                      if (this.graph.isEdge(w, introducedVertex)) {\n                        for (const cs of childStates) {\n                          const d = cs[0];\n                          const M = cs[1];\n\n                          if (d[w] === 1) {\n                            newMap[introducedVertex] = 1;\n                            state.push(newMap, matchings);\n                            // states.push(state);\n                          }\n\n                          // Change the value of w\n                        }\n                      }\n                    }\n\n                    break;\n\n                  case 2:\n                    newMap.set(introducedVertex, 2);\n                    state.push(newMap, matchings);\n                    states.push(state);\n                    break;\n                }\n              }\n            }\n          }\n          break;\n        case 'forget':\n          const forgottenVertex = this.getForgottenVertex(node);\n          const state = [];\n\n          for (const childKey of childKeys) {\n            const state = [];\n            const d = childKey[0];\n            const M = childKey[1];\n            delete d[forgottenVertex];\n\n            for (const a of M) {\n              const aIndex = M.indexOf(a);\n              if (a.includes(forgottenVertex)) M.splice(aIndex);\n            }\n\n            state.push(d, M);\n            table.set(state, true);\n          }\n\n          const keys = [...table.keys()];\n          const temp = [];\n\n          for (const key of keys) {\n            const obj = key[0];\n            const entry = JSON.stringify(obj);\n            temp.push(entry);\n          }\n\n          /* Remove duplicates from array */\n          const newArr = multiDimensionalUnique(temp);\n\n          /* Reset the table */\n          table = new Map();\n\n          /* Convert it back to an array of objects */\n          const arrayOfDegrees = [];\n          for (const a of newArr) {\n            const d = JSON.parse(a);\n            arrayOfDegrees.push(d);\n          }\n\n          /* Get matching if any */\n          for (const d of arrayOfDegrees) {\n            const state = [];\n            const keys = Object.keys(d);\n            const possible = [];\n            const matchings = [];\n\n            for (const key of keys) {\n              const value = d[key];\n              if (value === 1) possible.push(key);\n            }\n\n            console.log(possible);\n\n            if (possible.length > 1 && possible.length % 2 === 0) {\n              for (let i = 0; i < possible.length; i += 2) {\n                const matching = [];\n                const e1 = possible[i];\n                const e2 = possible[i + 1];\n                matching.push(parseInt(e1, 10), parseInt(e2, 10));\n                matchings.push(matching);\n              }\n              state.push(d, matchings);\n              table.set(state, true);\n            } else {\n              state.push(d, []);\n              table.set(state, false);\n            }\n          }\n\n\n          break;\n        case 'join':\n          const leftTable = childKeys;\n          const child2 = this.getChild2(node);\n          const rightTable = [...child2.table.keys()];\n\n          break;\n      }\n\n      node.table = table;\n      this.drawHamiltonianTable(node);\n    });\n  }\n\n  threeColor() {\n    const colorArray = ['red', 'green', 'blue'];\n    let i = 1;\n    this.root.copy().eachAfter((currentNode) => {\n      if (this.current !== i++) return;\n\n      const node = currentNode.data;\n      const subTree = getSubTree(this.root, currentNode.data);\n\n      /* Leaf node */\n      if ('children' in node === false) {\n        this.graph.hideTooltip();\n        this.graph.hideArrow();\n        this.graph.hideHull();\n        moveColorTable(node);\n\n        const { top } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n        const { left } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n\n        d3.select('#color-table')\n          .html(null)\n          .style('opacity', 1)\n          .style('left', `${left}px`)\n          .style('top', `${top}px`);\n\n        node.positionTracker = [];\n\n        const line = d3.line().curve(d3.curveBasisClosed);\n\n        let pointArr = [];\n        const padding = 3.5;\n\n        for (let i = 0; i < subTree.length; i++) {\n          const node = subTree[i];\n          const pad = 17 + padding;\n          pointArr = pointArr.concat([\n            [node.x - pad, node.y - pad],\n            [node.x - pad, node.y + 150],\n            [node.x + pad, node.y - pad],\n            [node.x + pad, node.y + pad],\n          ]);\n        }\n\n        this.path.attr('d', line(hull(pointArr)));\n        this.path.style('opacity', 0.3);\n\n        return;\n      }\n\n      const child = node.children[0];\n\n\n      /* Get the induced subgraph of all the vertices in the current subtree */\n      const inducedSubgraph = this.graph.createSubgraph(subTree);\n\n      /* Highlight the induced subgraph */\n      this.graph.highlightSubGraph(inducedSubgraph);\n\n      // this.graph.createSubgraph(subTree);\n\n      /* Introduce Node */\n      if (node.vertices.length > child.vertices.length) {\n        /* Get child states */\n        const childClone = JSON.parse(JSON.stringify(child));\n        const childsStates = childClone.states;\n\n        /* Find the introduced vertex */\n        const difference = node.vertices.filter((x) => !child.vertices.includes(x));\n        const introducedVertex = difference[0];\n\n        this.graph.addNodeArrow(introducedVertex, 'Introduced Vertex');\n        this.graph.resetNodeColors();\n        this.graph.highlightNodeColor(introducedVertex, 'rgb(128, 177, 211)');\n\n        /* Initialize new states */\n        const newStates = [];\n\n        if (child.vertices.length === 0) {\n          for (const color of colorArray) {\n            const newState = [];\n            newState.push(color);\n            newStates.push(newState);\n          }\n          const ps = childClone.positionTracker;\n          if (!ps.includes(introducedVertex)) ps.push(introducedVertex);\n          node.positionTracker = ps;\n          node.states = newStates;\n        } else {\n          for (const childState of childsStates) {\n            for (const color of colorArray) {\n              const oldState = JSON.parse(JSON.stringify(childState));\n              if (this.graph.checkIntroducedVertex(introducedVertex, childClone.positionTracker, oldState, color, subTree)) {\n                /* If we are here, we can safely add the color */\n                oldState.push(color);\n                newStates.push(oldState);\n              }\n            }\n          }\n          node.states = newStates;\n\n          const ps = childClone.positionTracker;\n          if (!ps.includes(introducedVertex)) ps.push(introducedVertex);\n          node.positionTracker = ps;\n        }\n      }\n\n      /* Forgot node */\n      if (node.vertices.length < child.vertices.length) {\n        /* Get the child's data  */\n        const childClone = JSON.parse(JSON.stringify(child));\n        const childStates = childClone.states;\n\n        /* Find the forgotten vertex */\n        const forgottenVertex = child.vertices.filter((x) => !node.vertices.includes(x));\n\n        this.graph.addNodeArrow(forgottenVertex, 'Forgotten Vertex');\n        this.graph.resetNodeColors();\n        this.graph.highlightNodeColor(forgottenVertex, 'rgb(251, 128, 114)');\n\n        /* Get the position of the childs vertices */\n        const ps = childClone.positionTracker;\n        const parsed = parseInt(forgottenVertex, 10);\n        const forgottenVertexIndex = ps.indexOf(parsed);\n\n        /* Remove the forgotten vertex from position tracker */\n        ps.splice(forgottenVertexIndex, 1);\n        node.positionTracker = ps;\n\n        /* Remove the column in the table that includes forgotten vertices */\n        for (const childState of childStates) {\n          childState.splice(forgottenVertexIndex, 1);\n        }\n\n        const uw = multiDimensionalUnique(childStates);\n\n        /* Update this table's state with the new states */\n        node.states = uw;\n      }\n\n      /* Join node */\n      if (node.children.length === 2) {\n        const child1 = node.children[0];\n        const child1Clone = JSON.parse(JSON.stringify(child1));\n        const child1States = child1Clone.states;\n\n        const child2 = node.children[1];\n        const child2Clone = JSON.parse(JSON.stringify(child2));\n        const child2States = child2Clone.states;\n        const newStates = [];\n\n        const child1SubTree = getSubTree(this.root, currentNode.children[0].data);\n        const child1SubGraph = this.graph.createSubgraph(child1SubTree);\n        this.graph.highlightSubGraph(child1SubGraph);\n\n        const child2SubTree = getSubTree(this.root, currentNode.children[1].data);\n        const child2SubGraph = this.graph.createSubgraph(child2SubTree);\n        this.graph.highlightSubGraph2(child2SubGraph);\n\n        if (child1States.length < child2States.length) {\n          node.positionTracker = child1.positionTracker;\n          for (const childState of child1States) {\n            if (this.isArrayInArray(child2States, childState)) newStates.push(childState);\n          }\n        } else {\n          node.positionTracker = child2.positionTracker;\n          for (const childState of child2States) {\n            if (this.isArrayInArray(child1States, childState)) newStates.push(childState);\n          }\n        }\n        node.states = newStates;\n      }\n\n      if (currentNode.data.children.length === 2) {\n        const line = d3.line().curve(d3.curveBasisClosed);\n\n        let pointArr = [];\n        const padding = 3.5;\n\n        const child1SubTree = getSubTree(this.root, currentNode.children[0].data);\n\n        for (let i = 0; i < child1SubTree.length; i++) {\n          const node = child1SubTree[i];\n          const pad = 27 + padding;\n          pointArr = pointArr.concat([\n            [node.x - pad, node.y - pad],\n            [node.x - pad, node.y + 150],\n            [node.x + pad, node.y - pad],\n            [node.x + pad, node.y + pad],\n          ]);\n        }\n\n        this.path.attr('d', line(hull(pointArr)));\n        this.path.style('opacity', 0.5);\n      }\n\n      if (currentNode.data.children.length === 2) {\n        const line = d3.line().curve(d3.curveBasisClosed);\n\n        let pointArr = [];\n        const padding = 3.5;\n\n        const child2SubTree = getSubTree(this.root, currentNode.children[1].data);\n\n        for (let i = 0; i < child2SubTree.length; i++) {\n          const node = child2SubTree[i];\n          const pad = 27 + padding;\n          pointArr = pointArr.concat([\n            [node.x - pad, node.y - pad],\n            [node.x - pad, node.y + 150],\n            [node.x + pad, node.y - pad],\n            [node.x + pad, node.y + pad],\n          ]);\n        }\n\n        this.path2.attr('d', line(hull(pointArr)));\n        this.path2.style('opacity', 0.5);\n      } else {\n        this.path2.style('opacity', 0);\n        const line = d3.line().curve(d3.curveBasisClosed);\n\n        let pointArr = [];\n        const padding = 3.5;\n\n        for (let i = 0; i < subTree.length; i++) {\n          const node = subTree[i];\n          const pad = 27 + padding;\n          pointArr = pointArr.concat([\n            [node.x - pad, node.y - pad],\n            [node.x - pad, node.y + 150],\n            [node.x + pad, node.y - pad],\n            [node.x + pad, node.y + pad],\n          ]);\n        }\n\n        this.path.attr('d', line(hull(pointArr)));\n        this.path.style('opacity', 0.5);\n      }\n\n      let sb = '';\n      sb += '<tr>';\n      for (let i = 0; i < node.positionTracker.length; i++) {\n        sb += `<td><strong>${node.positionTracker[i]}</strong></td>`;\n      }\n      sb += '</tr>';\n\n      for (const state of node.states) {\n        sb += '<tr>';\n        for (const s of state) {\n          let color = '';\n          if (s === 'red') {\n            color = 'red';\n          }\n          if (s === 'green') {\n            color = 'green';\n          }\n          if (s === 'blue') {\n            color = 'blue';\n          }\n\n          sb += `<td class=\"${color}\">${s}</td>`;\n        }\n        sb += '</tr>';\n      }\n\n      moveColorTable(node);\n\n      const { top } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n      const { left } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n\n      d3.select('#color-table')\n        .html(sb)\n        .style('opacity', 1)\n        .style('left', `${left}px`)\n        .style('top', `${top}px`);\n    });\n  }\n\n  runThreeColor() {\n    this.current = 0;\n    this.threeColor();\n  }\n\n  getChild(node) {\n    const child = node.children[0];\n    const clone1 = deepClone(child);\n    return clone1;\n  }\n\n  getChild2(node) {\n    const child = node.children[1];\n    const clone = deepClone(child);\n    return clone;\n  }\n\n  getChildTable(node) {\n    const child = node.children[0];\n    const childClone = JSON.parse(JSON.stringify(child));\n    const childTable = childClone.table;\n    return childTable;\n  }\n\n  getChild2Table(node) {\n    const child = node.children[1];\n    const childClone = JSON.parse(JSON.stringify(child));\n    const childTable = childClone.table;\n    return childTable;\n  }\n\n  getIntroducedVertex(node) {\n    const { vertices } = node;\n    const childsVertices = node.children[0].vertices;\n    const difference = vertices.filter((x) => !childsVertices.includes(x));\n    const introducedVertex = difference[0];\n    return introducedVertex;\n  }\n\n  getForgottenVertex(node) {\n    const childsVertices = node.children[0].vertices;\n    const forgottenVertex = childsVertices.filter((x) => !node.vertices.includes(x));\n    return forgottenVertex[0];\n  }\n\n  mis() {\n    this.animX = 0;\n    let i = 0;\n    this.root.copy().eachAfter((currentNode) => {\n      i++;\n      if (this.current !== i) return;\n\n      currentNode.data.table = {};\n\n      // this.animateNode(currentNode);\n      // this.animateLink(currentNode);\n\n      // Get all the subsets of the current vertices in this tree node\n      const allSubsets = getAllSubsets(currentNode.data.vertices);\n      allSubsets.map((s) => s.sort());\n\n      // Get the subtree rooted at this node\n      const subTree = getSubTree(this.root, currentNode.data);\n\n      /* Get the induced subgraph of all the vertices in the current subtree */\n      const inducedSubgraph = this.graph.createSubgraph(subTree);\n\n      /* Highlight the induced subgraph */\n      this.graph.highlightSubGraph(inducedSubgraph);\n\n      this.currentSubTree = subTree;\n\n      // Leaf node\n      if ('children' in currentNode.data === false) {\n        this.graph.hideTooltip();\n        this.graph.hideArrow();\n        this.graph.hideHull();\n        if (currentNode.data.vertices.length === 0) {\n          currentNode.data.table[''] = 0;\n        } else {\n          const vertex = currentNode.data.vertices[0];\n          currentNode.data.table[vertex] = 1;\n        }\n\n        const nodeSvg = d3.select(`#treeNode-${currentNode.data.id}`);\n        const x = parseInt(nodeSvg.attr('x'), 10);\n        let y = parseInt(nodeSvg.attr('y'), 10);\n\n        y += 12.5;\n\n        d3.select('#tooltip-arrow')\n          .style('opacity', 1)\n          .attr('x1', x - 50)\n          .attr('y1', y)\n          .attr('x2', x)\n          .attr('y2', y)\n          .attr('transform', `translate(${0}, ${30})`);\n\n        const { top } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n        const { left } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n\n        d3.select('#tooltip')\n          .html(null)\n          .style('opacity', 1)\n          .style('left', `${left}px`)\n          .style('top', `${top}px`);\n\n        const line = d3.line().curve(d3.curveBasisClosed);\n\n        let pointArr = [];\n        const padding = 3.5;\n\n        for (let i = 0; i < subTree.length; i++) {\n          const node = subTree[i];\n          const pad = 17 + padding;\n          pointArr = pointArr.concat([\n            [node.x - pad, node.y - pad],\n            [node.x - pad, node.y + 150],\n            [node.x + pad, node.y - pad],\n            [node.x + pad, node.y + pad],\n          ]);\n        }\n\n        this.path.attr('d', line(hull(pointArr)));\n        this.path.style('opacity', 0.3);\n\n        return;\n      }\n\n      // Join node\n      if (currentNode.data.children.length === 2) {\n        this.graph.hideTooltip();\n        this.graph.hideArrow();\n        this.graph.hideHull();\n\n        // Get child 1's table\n        const child1 = currentNode.data.children[0];\n        const child1Clone = JSON.parse(JSON.stringify(child1));\n        const child1Table = child1Clone.table;\n\n        // Get child 2's table\n        const child2 = currentNode.data.children[1];\n        const child2Clone = JSON.parse(JSON.stringify(child2));\n        const child2Table = child2Clone.table;\n\n        const child1SubTree = getSubTree(this.root, currentNode.children[0].data);\n        const child1SubGraph = this.graph.createSubgraph(child1SubTree);\n        this.graph.highlightSubGraph(child1SubGraph);\n\n        const child2SubTree = getSubTree(this.root, currentNode.children[1].data);\n        const child2SubGraph = this.graph.createSubgraph(child2SubTree);\n        this.graph.highlightSubGraph2(child2SubGraph);\n\n        for (const set of allSubsets) {\n          const child1value = child1Table[set];\n          const child2value = child2Table[set];\n          const currentNodeValue = set.length;\n          currentNode.data.table[set] = child1value + child2value - currentNodeValue;\n        }\n      }\n\n      // Forget node\n      if (currentNode.data.vertices.length < currentNode.data.children[0].vertices.length) {\n        const childsVertices = currentNode.data.children[0].vertices;\n        const forgottenVertex = childsVertices\n          .filter((x) => !currentNode.data.vertices.includes(x));\n\n        this.graph.addNodeArrow(forgottenVertex, 'Forgotten Vertex');\n        this.graph.resetNodeColors();\n        this.graph.highlightNodeColor(forgottenVertex, 'rgb(251, 128, 114)');\n\n        // Get the child's table\n        const child = currentNode.data.children[0];\n        const childClone = JSON.parse(JSON.stringify(child));\n        const childsTable = childClone.table;\n\n        for (const set of allSubsets) {\n          /* Union the forgottenVertex with the current subset */\n          const concatV = set.concat(forgottenVertex);\n          concatV.sort();\n\n          /* Value of set without v */\n          const setWithoutV = childsTable[set];\n\n          /* Value of set with v */\n          const setWithV = childsTable[concatV];\n\n          if (setWithoutV > setWithV) {\n            currentNode.data.table[set] = setWithoutV;\n          } else {\n            currentNode.data.table[set] = setWithV;\n          }\n        }\n      }\n\n      // Introduce node\n      if (currentNode.data.vertices.length > currentNode.data.children[0].vertices.length) {\n        // Get the child's table\n        const child = currentNode.data.children[0];\n        const childClone = JSON.parse(JSON.stringify(child));\n        const childsTable = childClone.table;\n\n        // Set the current node's table\n        currentNode.data.table = childsTable;\n\n        // Find the introduced vertex\n        const { vertices } = currentNode.data;\n        const childsVertices = currentNode.data.children[0].vertices;\n        const difference = vertices.filter((x) => !childsVertices.includes(x));\n        const introducedVertex = difference[0];\n\n        this.graph.addNodeArrow(introducedVertex, 'Introduced Vertex');\n        this.graph.resetNodeColors();\n        this.graph.highlightNodeColor(introducedVertex, 'rgb(128, 177, 211)');\n\n        for (const set of allSubsets) {\n          // We only care about the subsets containing the introduced vertex v\n          if (set.includes(introducedVertex)) {\n            /* Check if a vertex inside this set is adjacent to the introduced vertex */\n            const setWithoutV = set.filter((s) => s !== introducedVertex);\n\n            if (this.graph.isVertexAdjacent(subTree, set)) {\n              currentNode.data.table[set] = -9999;\n            } else {\n              let oldValue = childsTable[setWithoutV];\n              oldValue++;\n              currentNode.data.table[set] = oldValue;\n            }\n          }\n        }\n      }\n\n      if (currentNode.data.children.length === 2) {\n        const line = d3.line().curve(d3.curveBasisClosed);\n\n        let pointArr = [];\n        const padding = 3.5;\n\n        const child1SubTree = getSubTree(this.root, currentNode.children[0].data);\n\n        for (let i = 0; i < child1SubTree.length; i++) {\n          const node = child1SubTree[i];\n          const pad = 27 + padding;\n          pointArr = pointArr.concat([\n            [node.x - pad, node.y - pad],\n            [node.x - pad, node.y + 150],\n            [node.x + pad, node.y - pad],\n            [node.x + pad, node.y + pad],\n          ]);\n        }\n\n        this.path.attr('d', line(hull(pointArr)));\n        this.path.style('opacity', 0.5);\n      }\n\n      if (currentNode.data.children.length === 2) {\n        const line = d3.line().curve(d3.curveBasisClosed);\n\n        let pointArr = [];\n        const padding = 3.5;\n\n        const child2SubTree = getSubTree(this.root, currentNode.children[1].data);\n\n        for (let i = 0; i < child2SubTree.length; i++) {\n          const node = child2SubTree[i];\n          const pad = 27 + padding;\n          pointArr = pointArr.concat([\n            [node.x - pad, node.y - pad],\n            [node.x - pad, node.y + 150],\n            [node.x + pad, node.y - pad],\n            [node.x + pad, node.y + pad],\n          ]);\n        }\n\n        this.path2.attr('d', line(hull(pointArr)));\n        this.path2.style('opacity', 0.5);\n      } else {\n        this.path2.style('opacity', 0);\n        const line = d3.line().curve(d3.curveBasisClosed);\n\n        let pointArr = [];\n        const padding = 3.5;\n\n        for (let i = 0; i < subTree.length; i++) {\n          const node = subTree[i];\n          const pad = 27 + padding;\n          pointArr = pointArr.concat([\n            [node.x - pad, node.y - pad],\n            [node.x - pad, node.y + 150],\n            [node.x + pad, node.y - pad],\n            [node.x + pad, node.y + pad],\n          ]);\n        }\n\n        this.path.attr('d', line(hull(pointArr)));\n        this.path.style('opacity', 0.5);\n      }\n\n\n      const keys = Object.keys(currentNode.data.table);\n      const values = Object.values(currentNode.data.table);\n      let sb = '';\n\n      keys.forEach((key, index) => {\n        if (key === '') {\n          key = 'Ø';\n          keys.splice(index, 1);\n          keys.unshift(key);\n          const val = values[index];\n          values.splice(index, 1);\n          values.unshift(val);\n        }\n      });\n\n      keys.forEach((key, index) => {\n        const value = values[index];\n        if (value < -1000) return;\n        if (key !== 'Ø') {\n          key = `{${key}}`;\n        }\n        sb += `<tr id=${key} class=\"mis-row\"><td class=\"sets\">${key}</td><td>${value}</td></tr>`;\n      });\n\n      const start = `<table><tbody id=\"tbody\">${sb}</tbody></table>`;\n\n      const nodeSvg = d3.select(`#treeNode-${currentNode.data.id}`);\n      const x = parseInt(nodeSvg.attr('x'), 10);\n      let y = parseInt(nodeSvg.attr('y'), 10);\n\n      y += 12.5;\n\n      d3.select('#tooltip-arrow')\n        .style('opacity', 1)\n        .attr('x1', x - 50)\n        .attr('y1', y)\n        .attr('x2', x)\n        .attr('y2', y)\n        .attr('transform', `translate(${0}, ${30})`);\n\n      const { top } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n      const { left } = document.getElementById('tooltip-arrow').getBoundingClientRect();\n\n      d3.select('#tooltip')\n        .html(start)\n        .style('opacity', 1)\n        .style('left', `${left}px`)\n        .style('top', `${top}px`);\n\n      d3.selectAll('.sets').on('mouseover', () => {\n        this.highlightMaxSet(d3.event.target.innerText);\n      });\n      d3.selectAll('.sets').on('mouseleave', () => {\n        d3.selectAll('circle').classed('highlighted-stroke', false);\n      });\n    });\n  }\n\n  disableAllAlgorithms() {\n    this.isMis = false;\n    this.isThreeColor = false;\n  }\n\n  addColorTable() {\n    if (this.colorTable) this.colorTable.remove();\n\n    this.colorTable = d3.select('#main')\n      .append('table')\n      .style('opacity', 0)\n      .attr('id', 'color-table')\n      .attr('class', 'table');\n  }\n\n  addTable() {\n    if (this.table) this.table.remove();\n\n    this.table = d3.select('#main')\n      .append('table')\n      .attr('id', 'dp-table')\n      .attr('class', 'hamiltonianTable');\n  }\n\n  addTooltip() {\n    if (this.tooltip) this.tooltip.remove();\n\n    this.tooltip = d3.select('#main')\n      .append('div')\n      .attr('id', 'tooltip')\n      .style('position', 'absolute')\n      .style('opacity', 0);\n  }\n\n  addArrow() {\n    if (this.arrow) this.arrow.remove();\n    this.arrow = this.svg\n      .append('line')\n      .attr('id', 'tooltip-arrow')\n      .attr('x1', 200)\n      .attr('y1', 100)\n      .attr('x2', 300)\n      .attr('y2', 100)\n      .attr('marker-end', 'url(#Triangle)')\n      .style('opacity', 0);\n  }\n\n  removeColorTable() {\n    if (this.colorTable) this.colorTable.remove();\n  }\n\n  removeMisTable() {\n    if (this.tooltip) this.tooltip.remove();\n  }\n\n  enableMaximumIndependentSet() {\n    this.removeColorTable();\n    this.disableAllAlgorithms();\n\n    this.addArrow();\n    this.addTooltip();\n\n    this.isMis = true;\n    this.current = 0;\n  }\n\n  enableThreeColor() {\n    this.removeMisTable();\n    this.disableAllAlgorithms();\n\n    this.addArrow();\n    this.addColorTable();\n\n    this.isColor = true;\n    this.current = 0;\n  }\n\n  enableHamiltonianPath() {\n    this.disableAllAlgorithms();\n    this.isHamiltonianPath = true;\n  }\n\n  next() {\n    const N = this.root.descendants().length;\n    this.current++;\n    if (this.current !== N) this.current %= N;\n    if (this.isMis) this.mis(this.current);\n    if (this.isColor) this.threeColor(this.current);\n    if (this.isHamiltonianPath) this.hamiltonianPath(this.current);\n  }\n\n  previous() {\n    if (this.current === 0) return;\n    const N = this.root.descendants().length;\n    --this.current;\n    this.current %= N;\n    if (this.isMis) this.mis(this.current);\n    if (this.isColor) this.threeColor(this.current);\n    if (this.isHamiltonianPath) this.hamiltonianPath(this.current);\n  }\n\n  setAllG() {\n    this.root.eachAfter((node) => {\n      node.tree = this;\n    });\n  }\n\n  load(treeData, type) {\n    if (this.svg) this.clear();\n    let height = document.getElementById(this.container).offsetHeight;\n    let width = document.getElementById(this.container).offsetWidth;\n\n    this.treeData = treeData;\n    this.height = height;\n    this.width = width;\n\n    if (this.type === 'normal-tree') {\n      width /= 2;\n      height /= 3;\n    }\n\n    const svg = d3.select(`#${this.container}`)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height);\n\n    const root = d3.hierarchy(treeData);\n    const treeLayout = d3.tree();\n    treeLayout.size([width, height - 80]);\n    treeLayout(root);\n\n    this.root = root;\n    this.treeLayout = treeLayout;\n    this.nodes = root.descendants();\n\n    svg\n      .append('marker')\n      .attr('id', 'triangle')\n      .attr('viewBox', '0 0 10 10')\n      .attr('refX', 10)\n      .attr('refY', 5)\n      .attr('markerWidth', 3.5)\n      .attr('markerHeight', 3.5)\n      .attr('orient', 'auto')\n      .append('path')\n      .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n      .style('fill', 'rgb(51, 51, 51)');\n\n    this.svg = svg;\n\n    this.svg.on('contextmenu', () => d3.event.preventDefault());\n\n    this.path = this.svg.append('path')\n      .attr('fill', 'orange')\n      .attr('stroke', 'orange')\n      .attr('stroke-width', 16)\n      .attr('opacity', 0);\n\n    this.path2 = this.svg.append('path')\n      .attr('fill', 'steelblue')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 16)\n      .attr('opacity', 0);\n\n\n    /* Get the link data and draw the links */\n    svg\n      .selectAll('line')\n      .data(root.links())\n      .enter()\n      .append('line')\n      .attr('class', 'tree-link')\n      .attr('x1', (d) => d.source.x)\n      .attr('y1', (d) => d.source.y)\n      .attr('x2', (d) => d.target.x)\n      .attr('y2', (d) => d.target.y)\n      .lower()\n      .attr('transform', `translate(${0}, ${30})`);\n\n    /* Get the node data and draw the nodes */\n    if (this.type === 'normal-tree') {\n      svg\n        .selectAll('circle')\n        .data(root.descendants())\n        .enter()\n        .append('circle')\n        .attr('id', (d) => `treeNode-${d.data.id}`)\n        .attr('r', 18)\n        .attr('cx', (d) => d.x)\n        .attr('cy', (d) => d.y)\n        .attr('class', 'normal-tree-node')\n        .attr('transform', `translate(${0}, ${30})`);\n    } else {\n      svg\n        .selectAll('rect')\n        .data(root.descendants())\n        .enter()\n        .append('rect')\n        .attr('id', (d) => `treeNode-${d.data.id}`)\n        .attr('width', (d) => {\n          const splitted = d.data.label.split(',');\n          return splitted.length * 25;\n        })\n        .attr('height', 25)\n        .attr('x', (d) => d.x - (d.data.label.split(',').length * 25 / 2))\n        // .attr('x', (d) => d.x)\n        .attr('y', (d) => d.y)\n        .attr('rx', 5)\n        .attr('ry', 5)\n        .attr('transform', `translate(${0}, ${30})`)\n        .attr('class', 'tree-node')\n        .style('fill', (d) => {\n          if ('children' in d.data === false || d.data.children.length === 0) return myColor(9);\n          if (d.data.children.length === 2) return myColor(6);\n          if (d.data.vertices.length > d.data.children[0].vertices.length) return myColor(5);\n          if (d.data.vertices.length < d.data.children[0].vertices.length) return myColor(4);\n        })\n        .on('contextmenu', d3.contextMenu(menu));\n    }\n\n    svg\n      .selectAll('text')\n      .data(root.descendants())\n      .enter()\n      .append('text')\n      .attr('x', (d) => d.x)\n      .attr('y', (d) => d.y)\n      .attr('dy', () => {\n        if (type === 'normal-tree') {\n          return '.-25em';\n        }\n        return '17px';\n      })\n      .attr('class', () => {\n        if (type === 'normal-tree') return 'label';\n        return 'graph-label';\n      })\n      .text((d) => {\n        if (type === 'normal-tree') return d.data.label;\n        if ('children' in d.data === false || d.data.children.length === 0) return;\n        if (d.data.children.length === 2) return `& ${d.data.label}`;\n        if (d.data.vertices.length > d.data.children[0].vertices.length) return `+ ${d.data.label}`;\n        if (d.data.vertices.length < d.data.children[0].vertices.length) return `- ${d.data.label}`;\n        return d.data.label;\n      })\n      .attr('transform', `translate(${0}, ${30})`);\n\n    this.setAllG();\n  }\n}\n","import { contextMenu as menu } from './ContextMenu.js';\n\nexport default class TreeDecomposition {\n  constructor(container, graph) {\n    this.container = container;\n    this.nodes = [];\n    this.links = [];\n    this.lastNodeId = 0;\n    this.graphOfTd = graph;\n  }\n\n  isConnected() {\n    let componentCount = 1;\n    let cluster = 2;\n\n    if (this.nodes.length === 0) {\n      componentCount = 0;\n      return;\n    }\n\n    componentCount = 1;\n    this.nodes.forEach((v) => {\n      v.visited = false;\n    });\n\n    const adjList = {};\n    this.nodes.forEach((v) => {\n      adjList[v.id] = [];\n    });\n\n    this.links.forEach((e) => {\n      adjList[e.source.id].push(e.target);\n      adjList[e.target.id].push(e.source);\n    });\n\n    const q = [];\n    q.push(this.nodes[0]);\n\n    while (q.length > 0) {\n      const v1 = q.shift();\n      const adj = adjList[v1.id];\n\n      for (let i = 0; i < adj.length; i++) {\n        const v2 = adj[i];\n        if (v2.visited) {\n          continue;\n        }\n        q.push(v2);\n      }\n\n      v1.visited = true;\n      v1.cluster = cluster.toString();\n      if (q.length === 0) {\n        for (let i = 0; i < this.nodes.length; i++) {\n          if (!this.nodes[i].visited) {\n            q.push(this.nodes[i]);\n            componentCount++;\n            cluster++;\n            break;\n          }\n        }\n      }\n    }\n\n    this.componentCount = componentCount;\n\n    const isConnected = componentCount === 1;\n\n    return isConnected;\n  }\n\n  isTree() {\n    const isConnected = this.isConnected();\n    if (isConnected && this.nodes.length - 1 === this.links.length) {\n      return true;\n    }\n    return false;\n  }\n\n  areNodesInTree() {\n    return this.graphOfTd.nodes.every((node) => this.masterNodes.includes(node.id));\n  }\n\n  isEveryGraphLinkInTree() {\n    return this.graphOfTd.links.every((link) => {\n      for (let i = 0; i < this.nodes.length; i++) {\n        const currentBag = this.nodes[i];\n        if (currentBag.vertices === undefined) continue;\n        if (currentBag.vertices.includes(link.source.id) && currentBag.vertices.includes(link.target.id)) return true;\n      }\n      return false;\n    });\n  }\n\n  checkConnectivity(subGraphNodes, subGraphLinks) {\n    let componentCount = 1;\n    let cluster = 2;\n\n    if (subGraphNodes.length === 0) {\n      componentCount = 0;\n      return;\n    }\n\n    componentCount = 1;\n    subGraphNodes.forEach((v) => {\n      v.visited = false;\n    });\n\n    const adjList = {};\n    subGraphNodes.forEach((v) => {\n      adjList[v.id] = [];\n    });\n\n    subGraphLinks.forEach((e) => {\n      adjList[e.source.id].push(e.target);\n      adjList[e.target.id].push(e.source);\n    });\n\n    const q = [];\n    q.push(subGraphNodes[0]);\n\n    while (q.length > 0) {\n      const v1 = q.shift();\n      const adj = adjList[v1.id];\n\n      for (let i = 0; i < adj.length; i++) {\n        const v2 = adj[i];\n        if (v2.visited) continue;\n        q.push(v2);\n      }\n\n      v1.visited = true;\n      v1.cluster = cluster.toString();\n      if (q.length === 0) {\n        for (let i = 0; i < subGraphNodes.length; i++) {\n          if (!subGraphNodes[i].visited) {\n            q.push(subGraphNodes[i]);\n            componentCount++;\n            cluster++;\n            break;\n          }\n        }\n      }\n    }\n\n    this.componentCount = componentCount;\n\n    const isDisconnected = componentCount > 1;\n\n    return { subGraphNodes, subGraphLinks, isDisconnected };\n  }\n\n  checkCoherence() {\n    console.log(this.nodes);\n    // if (this.nodes.length === 0 || this.links.length === 0) return false;\n\n\n    /* Check if a node exists in multiple bags */\n    for (let i = 0; i < this.graphOfTd.nodes.length; i++) {\n      const currentNode = this.graphOfTd.nodes[i];\n      currentNode.counter = 0;\n\n      for (let j = 0; j < this.nodes.length; j++) {\n        const currentBag = this.nodes[j];\n        if (currentBag.vertices === undefined) continue;\n        if (currentBag.vertices.includes(currentNode.id)) {\n          currentNode.counter++;\n        }\n      }\n    }\n\n    const multipleNodes = this.graphOfTd.nodes.filter((node) => node.counter > 1);\n\n    for (let i = 0; i < multipleNodes.length; i++) {\n      const node = multipleNodes[i];\n      /* find all bags with this node */\n\n      const tempNodes = this.nodes.filter((bag) => {\n        if (bag.vertices) return bag.vertices.includes(node.id);\n      });\n\n      const tempLinks = this.links.filter((link) => tempNodes.includes(link.source) && tempNodes.includes(link.target));\n      const obj = this.checkConnectivity(tempNodes, tempLinks);\n      console.log(obj);\n      if (obj.isDisconnected) return false;\n    }\n    return true;\n  }\n\n  checkTreeDecomposition() {\n    let treeString;\n    let nodeCoverageString;\n    let edgeCoverageString;\n    let coherenceString;\n    let validString;\n\n    if (this.isTree()) {\n      treeString = 'Tree decomposition is a tree  <span class=\"material-icons correct-answer\">check</span>';\n    } else {\n      treeString = 'Tree decomposition must be a tree. <span class=\"material-icons wrong-answer\">clear</span>';\n    }\n\n    /* Check node coverage */\n    if (this.areNodesInTree()) {\n      nodeCoverageString = 'Node coverage  <span class=\"material-icons correct-answer\">check</span>';\n    } else {\n      nodeCoverageString = 'Node coverage <span class=\"material-icons wrong-answer\">clear</span>';\n    }\n\n    /* Check edge coverage */\n    if (this.isEveryGraphLinkInTree()) {\n      edgeCoverageString = 'Edge coverage <span class=\"material-icons correct-answer\">check</span>';\n    } else {\n      edgeCoverageString = 'Edge coverage <span class=\"material-icons wrong-answer\">clear</span>';\n    }\n\n    /* Check coherence property */\n    if (this.checkCoherence()) {\n      coherenceString = 'Coherence <span class=\"material-icons correct-answer\">check</span>';\n    } else {\n      coherenceString = 'Coherence <span class=\"material-icons wrong-answer\">clear</span>';\n    }\n\n    if (this.isTree() && this.areNodesInTree() && this.isEveryGraphLinkInTree() && this.checkCoherence()) {\n      validString = 'This is a valid tree decomposition <span class=\"material-icons correct-answer\">check</span>';\n    } else {\n      validString = 'This is not a valid tree decomposition <span class=\"material-icons wrong-answer\">clear</span>';\n    }\n\n    d3.select('#output').html(`\n      <div>${treeString}</div>\n      <div>${nodeCoverageString}</div>\n      <div>${edgeCoverageString}</div>\n      <div>${coherenceString}</div>\n      <div>${validString}</div>\n    `);\n  }\n\n  updateMasterList() {\n    let temp = [];\n    this.nodes.forEach((bag) => {\n      if (bag.vertices) temp = temp.concat(bag.vertices);\n    });\n\n    const tempSet = [...new Set(temp)];\n    this.masterNodes = tempSet;\n  }\n\n  removeEdge(d) {\n    this.links.splice(this.links.indexOf(d), 1);\n    d3.event.preventDefault();\n    this.restart();\n  }\n\n  restart() {\n    this.updateMasterList();\n    /* Enter, update, remove link SVGs */\n    this.svg.selectAll('line')\n      .data(this.links, (d) => `v${d.source.id}-v${d.target.id}`)\n      .join(\n        (enter) => enter\n          .append('line')\n          .lower()\n          .attr('class', 'tree-link')\n          .on('contextmenu', (d) => this.removeEdge(d)),\n        (update) => update,\n        (exit) => exit.remove(),\n      );\n\n    /* Enter, update, remove ellipse SVGs */\n    this.svg.selectAll('ellipse')\n      .data(this.nodes, (d) => d.id)\n      .join(\n        (enter) => {\n          enter.append('ellipse')\n            .attr('rx', 30)\n            .attr('ry', 25)\n            .style('fill', '#2ca02c')\n            .style('stroke', 'rgb(51, 51, 51)')\n            .style('stroke-width', '3.5px')\n            .on('mouseover', () => this.disableAddNode())\n            .on('mouseleave', () => this.enableAddNode())\n            .on('mousedown', (d) => this.beginDrawLine(d))\n            .on('mouseup', (d) => this.stopDrawLine(d))\n            .on('contextmenu', d3.contextMenu(menu));\n        },\n        (update) => update.attr('rx', (d) => (d.label && d.label.length > 2 ? d.label.length * 8 : 30)),\n        (exit) => exit.remove(),\n      );\n\n    this.svg.selectAll('text')\n      .data(this.nodes, (d) => d.id)\n      .join(\n        (enter) => enter.append('text')\n          .attr('dy', 4.5)\n          .text((d) => d.label)\n          .attr('class', 'graph-label'),\n        (update) => update.text((d) => d.label),\n        (exit) => exit.remove(),\n      );\n\n    this.simulation.force('link').links(this.links);\n    this.simulation.nodes(this.nodes);\n    this.simulation.alpha(0.5).restart();\n    this.checkTreeDecomposition();\n  }\n\n  setg() {\n    this.nodes.forEach((node) => {\n      node.graph = this;\n    });\n  }\n\n  addNode() {\n    if (this.canAddNode === false) return;\n    const e = d3.event;\n    if (e.button === 0) {\n      const coords = d3.mouse(e.currentTarget);\n      const newNode = {\n        x: coords[0], y: coords[1], id: ++this.lastNodeId,\n      };\n      this.nodes.push(newNode);\n      this.setg();\n      this.restart();\n    }\n  }\n\n  enableAddNode() {\n    this.canAddNode = true;\n  }\n\n  disableAddNode() {\n    this.canAddNode = false;\n  }\n\n  removeNode(d) {\n    d3.event.preventDefault();\n    const linksToRemove = this.links.filter((l) => l.source === d || l.target === d);\n    linksToRemove.map((l) => this.links.splice(this.links.indexOf(l), 1));\n    const indexOfNode = this.nodes.indexOf(d);\n    this.nodes.splice(indexOfNode, 1);\n    this.restart();\n  }\n\n  leftCanvas() {\n    this.dragLine.classed('hidden', true);\n    this.mousedownNode = null;\n  }\n\n  updateDragLine() {\n    if (!this.mousedownNode) return;\n    const coords = d3.mouse(d3.event.currentTarget);\n    this.dragLine.attr(\n      'd',\n      `M${\n        this.mousedownNode.x\n      },${\n        this.mousedownNode.y\n      }L${\n        coords[0]\n      },${\n        coords[1]}`,\n    );\n  }\n\n  hideDragLine() {\n    this.svg.selectAll('ellipse').style('fill', '#2ca02c');\n    this.dragLine.classed('hidden', true);\n    this.mousedownNode = null;\n    this.restart();\n  }\n\n  beginDrawLine(d) {\n    this.svg.selectAll('ellipse').filter((node) => node === d).style('fill', 'orange');\n    if (d3.event.ctrlKey) return;\n    d3.event.preventDefault();\n    this.mousedownNode = d;\n    this.dragLine\n      .classed('hidden', false)\n      .attr(\n        'd',\n        `M${\n          this.mousedownNode.x\n        },${\n          this.mousedownNode.y\n        }L${\n          this.mousedownNode.x\n        },${\n          this.mousedownNode.y}`,\n      );\n  }\n\n  stopDrawLine(d) {\n    this.svg.selectAll('ellipse').style('fill', '#2ca02c');\n    if (!this.mousedownNode || this.mousedownNode === d) return;\n    for (let i = 0; i < this.links.length; i++) {\n      const l = this.links[i];\n      if (\n        (l.source === this.mousedownNode && l.target === d)\n        || (l.source === d && l.target === this.mousedownNode)\n      ) {\n        return;\n      }\n    }\n    const newLink = { source: this.mousedownNode, target: d };\n    this.links.push(newLink);\n  }\n\n  clear() {\n    if (this.svg) this.svg.remove();\n    this.nodes = [];\n    this.links = [];\n  }\n\n  enableDrawing() {\n    if (this.svg) this.clear();\n    const w = document.getElementById(this.container).offsetWidth;\n    const h = document.getElementById(this.container).offsetHeight;\n    this.width = w;\n    this.height = h;\n    const svg = d3.select(`#${this.container}`).append('svg').attr('width', w).attr('height', h);\n    this.svg = svg;\n    this.svg.style('cursor', 'crosshair');\n\n    this.restartSimulation();\n\n    this.svg\n      .on('mousedown', () => this.addNode())\n      .on('contextmenu', () => d3.event.preventDefault())\n      .on('mousemove', () => this.updateDragLine())\n      .on('mouseup', () => this.hideDragLine())\n      .on('mouseleave', () => this.leftCanvas());\n\n    this.dragLine = this.svg\n      .append('path')\n      .attr('class', 'dragLine hidden')\n      .attr('d', 'M0,0L0,0');\n  }\n\n  restartSimulation() {\n    const simulation = d3.forceSimulation()\n      .force('x', d3.forceX(this.width / 2).strength(0.1))\n      .force('y', d3.forceY(this.height / 2).strength(0.1))\n      .nodes(this.nodes)\n      .force('charge', d3.forceManyBody().strength(-900))\n      .force('link', d3.forceLink(this.links).id((d) => d.id).distance(100).strength(0.05))\n      .force('collision', d3.forceCollide().radius((d) => d.rx + 100))\n      .on('tick', () => {\n        this.svg.selectAll('ellipse').attr('transform', (d) => `translate(${d.x},${d.y})`);\n        this.svg.selectAll('text').attr('x', (d) => d.x).attr('y', (d) => d.y);\n\n        this.svg.selectAll('line').attr('x1', (d) => d.source.x)\n          .attr('y1', (d) => d.source.y)\n          .attr('x2', (d) => d.target.x)\n          .attr('y2', (d) => d.target.y);\n      });\n\n    simulation.force('link').links(this.links);\n    this.simulation = simulation;\n  }\n}\n","export const graph1 = {\n  nodes: [\n    { id: 0 }, // a\n    { id: 1 }, // a\n    { id: 2 }, // b\n    { id: 3 }, // c\n    { id: 4 }, // d\n    { id: 5 }, // e\n    { id: 6 }, // f\n    { id: 7 }, // g\n  ],\n  links: [\n    { source: 1, target: 2 },\n    { source: 2, target: 3 },\n    { source: 2, target: 4 },\n    { source: 3, target: 5 },\n    { source: 3, target: 6 },\n    { source: 4, target: 6 },\n    { source: 4, target: 7 },\n    { source: 6, target: 7 },\n    { source: 5, target: 6 },\n  ],\n};\n\nexport const exampleGraph = {\n  nodes: [\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n    { id: 6 },\n    { id: 7 },\n    { id: 8 },\n    { id: 9 },\n    { id: 10 }],\n  links: [\n    { source: 1, target: 2 },\n    { source: 1, target: 3 },\n    { source: 1, target: 4 },\n    { source: 1, target: 5 },\n    { source: 1, target: 6 },\n    { source: 1, target: 7 },\n    { source: 1, target: 8 },\n    { source: 1, target: 9 },\n    { source: 1, target: 10 },\n    { source: 5, target: 8 },\n    { source: 8, target: 3 },\n    { source: 3, target: 6 },\n    { source: 6, target: 9 },\n    { source: 9, target: 4 },\n    { source: 4, target: 7 },\n    { source: 7, target: 2 },\n    { source: 2, target: 10 },\n    { source: 10, target: 5 },\n  ],\n};\n\n\nexport const exampleGraph2 = {\n  nodes: [{ id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n    { id: 6 },\n    { id: 7 },\n    { id: 8 },\n    { id: 9 },\n    { id: 10 }],\n  links: [\n    { source: 1, target: 2 },\n    { source: 2, target: 3 },\n    { source: 5, target: 1 },\n    { source: 1, target: 6 },\n    { source: 2, target: 7 },\n    { source: 3, target: 8 },\n    { source: 4, target: 9 },\n    { source: 5, target: 10 },\n    { source: 3, target: 1 },\n  ],\n};\n\nexport const exampleGraph3 = {\n  nodes: [\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n    { id: 6 },\n    { id: 7 },\n    { id: 8 },\n    { id: 9 },\n  ],\n  links:\n    [\n      { source: 1, target: 2 },\n      { source: 3, target: 1 },\n      { source: 7, target: 5 },\n      { source: 5, target: 2 },\n      { source: 8, target: 6 },\n      { source: 6, target: 4 },\n      { source: 6, target: 3 },\n      { source: 4, target: 3 },\n      { source: 4, target: 9 },\n    ],\n};\n\nexport const exampleGraph4 = {\n  nodes: [\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n  ],\n  links: [\n    { source: 1, target: 2 },\n    { source: 1, target: 3 },\n    { source: 2, target: 3 },\n    { source: 2, target: 4 },\n    { source: 4, target: 3 },\n  ],\n};\n\nexport const gridGraph = {\n  nodes: [\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n    { id: 6 },\n    { id: 7 },\n    { id: 8 },\n    { id: 9 },\n  ],\n  links: [\n    { source: 1, target: 2 },\n    { source: 2, target: 3 },\n    { source: 4, target: 5 },\n    { source: 5, target: 6 },\n    { source: 7, target: 8 },\n    { source: 8, target: 9 },\n    { source: 1, target: 4 },\n    { source: 4, target: 7 },\n    { source: 2, target: 5 },\n    { source: 5, target: 8 },\n    { source: 3, target: 6 },\n    { source: 6, target: 9 },\n  ],\n};\n\nexport const cliqueGraph = {\n  nodes: [\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n  ],\n  links: [\n    { source: 1, target: 2 },\n    { source: 1, target: 3 },\n    { source: 1, target: 4 },\n    { source: 1, target: 5 },\n    { source: 2, target: 3 },\n    { source: 2, target: 4 },\n    { source: 2, target: 5 },\n    { source: 3, target: 4 },\n    { source: 3, target: 5 },\n    { source: 4, target: 5 },\n  ],\n};\n","/* eslint-disable class-methods-use-this */\n/* eslint-disable no-return-assign */\n/* eslint-disable no-restricted-globals */\nimport Section from '../Components/Section.js';\nimport Graph from '../Components/Graph.js';\nimport Tree from '../Components/Tree.js';\nimport TreeDecomposition from '../Components/TreeDecomposition.js';\nimport {\n  graph1, exampleGraph, exampleGraph2, exampleGraph3, gridGraph, cliqueGraph,\n} from '../Utilities/graphs.js';\nimport { readLocalFile } from '../Utilities/helpers.js';\n\nexport default class SectionHandler {\n  constructor(sidebar, chapter) {\n    this.sidebar = sidebar;\n    this.currentSectionIndex = 0;\n    this.currentChapter = chapter;\n\n    window.sectionHandler = this;\n\n    this.sections = [\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n          <p>Before we explore treewidth there is one concept that we must familiarize ourselves with.</p>\n\n          <p>That is the concept of a <strong>graph separator</strong>.</p>\n          \n          <p>We say that a set \\\\( S \\\\) is a graph separator in a graph \\\\( G \\\\) if the removal of that set from \\\\( G \\\\) leaves \\\\( G \\\\) into multiple connected components.</p>\n\n          <p>In later chapters it becomes clear why we study graph separators. There are different types of graph separators we will cover those who are most relevant to treewidth in this chapter.</p>\n\n          <p><i>Click on a vertex in the graph to see if it separates the graph.</i></p>\n          `);\n\n          this.sidebar.addExercise('Find one or multiple vertices that would separate the graph into different components.');\n\n          d3.select('#output')\n            .append('div')\n            .attr('id', 'separator-output');\n\n          const graph = new Graph('container');\n          graph.loadGraph(exampleGraph3);\n          graph.toggleSeparatorExercise();\n        },\n        'chapter1',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n          <p>Let \\\\( S \\\\) be a separator in some graph \\\\( G \\\\). We say that \\\\( S\\\\) is a <strong>minimal separator</strong> if no proper subset separates the graph \\\\( G \\\\)\n\n          <p>In other words if some graph has a separator set \\\\( S = \\\\{ a,b \\\\} \\\\) then \\\\( a \\\\) on its own cannot separate the graph neither can \\\\( b \\\\).</p>\n          `);\n          this.sidebar.addExercise('Find a minimal separator in the graph.');\n          d3.select('#output')\n            .append('div')\n            .attr('id', 'separator-output');\n\n          const graph = new Graph('container');\n          graph.loadGraph(exampleGraph3);\n          graph.resetExercises();\n          graph.toggleMinimalSeparatorExercise();\n        },\n\n        'chapter1',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n          <p>Let \\\\( S \\\\) be a separator in some graph \\\\( G \\\\). We say that \\\\( S \\\\) is a balanced separator if every component of \\\\( G - S \\\\) has \\\\( \\\\leq V(G) \\\\).</p>\n\n          <p>That is every component after you remove \\\\( S \\\\) should contain less than or equal amounts of vertices to the amount of vertices in the original graph divided by 2.</p>\n          `);\n\n          this.sidebar.addExercise('Find a balanced separator in the graph.');\n\n          d3.select('#output')\n            .append('div')\n            .attr('id', 'separator-output');\n\n          const graph = new Graph('container');\n          graph.loadGraph(exampleGraph3);\n          graph.resetExercises();\n          graph.toggleBalanceSeparatorExercise();\n        },\n        'chapter1',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n          <p>Informally we can describe the <strong>treewidth</strong> of a graph to be a tree \"build\" from its separators that we saw in the previous chapter.</p>\n\n          <p>More formally we define the treewidth of a graph using the notion of <strong>tree decompositions.</strong></p>\n\n          <p>A tree decomposition of a graph is a mapping of that graph into a tree adhering to certain properties.</p>\n\n          <p>On the right you see a graph \\\\( G \\\\) and one of its tree decompositions \\\\( T \\\\).\n            \n            `);\n\n          const graph = new Graph('graph-container');\n          this.graph = graph;\n          this.graph.loadGraph(graph1, 'graph-container', 'graph');\n\n          await this.graph.computeTreeDecomposition();\n          await this.graph.readTreeDecomposition();\n          const td1 = this.graph.getTreeDecomposition();\n\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td1, 'tree', this.graph);\n          this.treeDecomposition = treeDecomposition;\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n              <p>We refer to each node in the tree decomposition as a \"bag\".</p>\n              \n              <p>Each bag contains some vertices of the the graph.</p>\n              `);\n\n          this.sidebar.addExercise('Try to hover over a bag to see its related vertices.');\n\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          await graph.computeTreeDecomposition();\n          await graph.readTreeDecomposition();\n          const td1 = graph.getTreeDecomposition();\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td1, 'tree', graph);\n          treeDecomposition.toggleHoverEffect();\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n            <p>We say that a tree decomposition is valid if it contains the following 3 properties.</p>\n\n            <p><strong>Property 1 (Node Coverage):</strong> Every vertex that appears in the graph must appear in some bag of the tree decomposition. </p>\n            \n            <p>We will check every vertex in the graph and highlight the bag in the tree decompostion containing that vertex.</p>\n            `);\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n          await graph.computeTreeDecomposition();\n          await graph.readTreeDecomposition();\n          const td1 = graph.getTreeDecomposition();\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td1, 'tree', this.graph);\n\n          this.sidebar.addButton('Replay animation', () => this.graph.runNodeCoverage());\n          graph.runNodeCoverage();\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n            Property 2 <strong>(Edge coverage):</strong> For every edge that appears in the graph there is some bag in the tree decomposition which contains the vertice\n            s of both ends of the edge.<br/><br/> Lets check if this holds true for our graph and tree decomposition.\n            `);\n          /* Graph stuff */\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n          await graph.computeTreeDecomposition();\n          await graph.readTreeDecomposition();\n          const td1 = graph.getTreeDecomposition();\n\n          /* Tree decomposition stuff */\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td1, 'tree', graph);\n\n          /* Handlers and stuff */\n          this.sidebar.addButton('Replay animation', () => this.graph.runEdgeCoverage());\n          graph.stopAllTransitions();\n          treeDecomposition.stopAllTransitions();\n          graph.resetNodeStyling();\n          treeDecomposition.resetTreeDecompositionStyles();\n          graph.runEdgeCoverage();\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n            <p><strong>Property 3 (Coherence):</strong> Lets consider 3 bags of the tree decomposition: \\\\( b_1 \\\\), \\\\( b_2 \\\\) and \\\\( b_3 \\\\) that form a path in the tree decomposition.</p>\n\n            <p>If a vertex from the graph belongs to \\\\( b_1 \\\\) and \\\\( b_3 \\\\) it must also belong to \\\\( b_2 \\\\).</p>\n            \n            <p>Lets check this by going through the vertices in the graph like we did at property 1. And if a node is in multiple bags it MUST form a connected subtree in the tree decomposition.</p>\n            `);\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          await graph.computeTreeDecomposition();\n          await graph.readTreeDecomposition();\n          const td1 = graph.getTreeDecomposition();\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td1, 'tree', graph);\n          this.sidebar.addButton('Replay animation', () => graph.highlightCoherence());\n          graph.highlightCoherence();\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n            <p>Since all 3 properties hold true we have proofed that the tree on the right side is a valid tree decomposition of the graph on the left side.</p>\n\n            <p>Is this the only valid tree decomposition of this graph? <br><br> No, a graph can have multiple valid tree decompositions.</p>\n            \n            <p>Lets take a look at some other valid tree decompositions of this graph.</p>\n\n            <p><strong>Example:</strong> The trivial tree decomposition of this graph contains all the graphs vertices in one bag.</p>\n            `);\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          const treeDecomposition = new Graph('tree-container');\n          const trivialTreeDecomposition = graph.computeTrivialTreeDecomposition();\n          treeDecomposition.loadGraph(trivialTreeDecomposition, 'tree');\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent('This is another valid tree decomposition of the graph.');\n\n          const anotherTd = {\n            nodes: [\n              { id: 1, label: '1 2' },\n              { id: 2, label: '2 3 4' },\n              { id: 3, label: '3 4 5 6 7' },\n            ],\n            links: [\n              { source: 1, target: 2 },\n              { source: 2, target: 3 },\n            ],\n          };\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(anotherTd, 'tree');\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addExercise('Is this a valid tree decomposition of the graph?');\n\n          const td3 = {\n            nodes: [\n              { id: 1, label: '1 2' },\n              { id: 2, label: '2 3 4' },\n              { id: 3, label: '1 3 4 5 6 7' },\n            ],\n            links: [\n              { source: 1, target: 2 },\n              { source: 2, target: 3 },\n            ],\n          };\n          const graph = new Graph('graph-container');\n\n          graph.loadGraph(graph1);\n\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td3, 'tree');\n\n          this.sidebar.addQuiz();\n          this.sidebar.addChoice('Yes', false);\n          this.sidebar.addChoice('No', true);\n          this.sidebar.addSolution('Since the vertex 1 is in 2 bags it must form a connected subtree but in this tree it does not. Recall property 3.');\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addExercise('Is this a valid tree decomposition of the graph?');\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          this.sidebar.addQuiz();\n          this.sidebar.addChoice('Yes.', true);\n          this.sidebar.addChoice('No.', false);\n          this.sidebar.addSolution('It satisfies all the properties of a tree decomposition thus it is valid.');\n\n          const td4 = {\n            nodes: [\n              { id: 1, label: '1 2' },\n              { id: 2, label: '2 3 4 5' },\n              { id: 3, label: '3 4 5' },\n              { id: 4, label: '4 5 6' },\n            ],\n            links: [\n              { source: 1, target: 2 },\n              { source: 2, target: 3 },\n              { source: 2, target: 4 },\n            ],\n          };\n\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td4, 'tree');\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n            <p>If there are different tree decompositions for a graph how do know which ones to use?</p>\n\n            <p>We want to use the tree decompositions with the lowest possible vertices in it's largest bag, as this make many algorithms that exploit tree decomposition more effective.</p>\n\n            <p><strong>Definition:</strong> We say that the <strong>width</strong> of a tree decomposition is the the size of the largest bag of that tree decomposition - 1.</p>\n\n            <p><strong>Definition:</strong> The <strong>treewidth</strong> of a graph is the minimum width amongst all the tree decompositions of \\\\( G \\\\).</p>\n            `);\n          this.sidebar.addExercise('What is the width of the current tree decomposition?');\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          await graph.computeTreeDecomposition();\n          await graph.readTreeDecomposition();\n          const td1 = graph.getTreeDecomposition();\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td1, 'tree');\n\n          this.sidebar.addQuiz();\n          this.sidebar.addChoice('1', false);\n          this.sidebar.addChoice('2', true);\n          this.sidebar.addChoice('3', false);\n          this.sidebar.addSolution('The treewidth of a tree decomposition is the size of the largest bag - 1.');\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addExercise('What about this one? What is the width?');\n\n          const anotherTd = {\n            nodes: [\n              { id: 1, label: '1 2' },\n              { id: 2, label: '2 3 4' },\n              { id: 3, label: '3 4 5 6 7' },\n            ],\n            links: [\n              { source: 1, target: 2 },\n              { source: 2, target: 3 },\n            ],\n          };\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          this.sidebar.addQuiz();\n          this.sidebar.addChoice('2', false);\n          this.sidebar.addChoice('4', true);\n          this.sidebar.addChoice('5', false);\n          this.sidebar.addSolution('4 Since the largest bag contains 5 vertices.');\n\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(anotherTd, 'tree');\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          const td3 = {\n            nodes: [\n              { id: 1, label: '1 2' },\n              { id: 2, label: '2 3 4' },\n              { id: 3, label: '1 3 4 5 6 7' },\n            ],\n            links: [\n              { source: 1, target: 2 },\n              { source: 2, target: 3 },\n            ],\n          };\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          this.sidebar.addExercise(`\n            Lets check one more. What is the width?            \n            `);\n          this.sidebar.addQuiz();\n          this.sidebar.addChoice('2', false);\n          this.sidebar.addChoice('4', false);\n          this.sidebar.addChoice('5', true);\n          this.sidebar.addSolution('5 Since the largest bag contains 6 vertices.');\n\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td3, 'tree');\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n            <p>Lets assume that the 3 tree decompositions you see on the right are ALL of the possible tree decompositions of the graph \\\\( G \\\\). (This is not true but for this exercise we will make this assumption)</p>\n        \n            `);\n          this.sidebar.addExercise('What is the <strong>treewidth</strong> of the <strong>graph \\\\( G \\\\)</strong>?');\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          d3.select('#tree-container')\n            .style('display', 'flex')\n            .style('flex-direction', 'column');\n\n          d3.select('#tree-container').append('div')\n            .attr('id', 'tree1')\n            .style('display', 'flex')\n            .style('flex', '0.33');\n\n          d3.select('#tree-container').append('div')\n            .attr('id', 'tree2')\n            .style('display', 'flex')\n            .style('flex', '0.33');\n\n          d3.select('#tree-container').append('div')\n            .attr('id', 'tree3')\n            .style('display', 'flex')\n            .style('flex', '0.33');\n\n          await graph.computeTreeDecomposition();\n          await graph.readTreeDecomposition();\n          const td1 = graph.getTreeDecomposition();\n\n          const td3 = {\n            nodes: [\n              { id: 1, label: '1 2' },\n              { id: 2, label: '2 3 4' },\n              { id: 3, label: '1 3 4 5 6 7' },\n            ],\n            links: [\n              { source: 1, target: 2 },\n              { source: 2, target: 3 },\n            ],\n          };\n\n          const td4 = {\n            nodes: [\n              { id: 1, label: '1 2' },\n              { id: 2, label: '2 3 4 5' },\n              { id: 3, label: '3 4 5' },\n              { id: 4, label: '4 5 6' },\n            ],\n            links: [\n              { source: 1, target: 2 },\n              { source: 2, target: 3 },\n              { source: 2, target: 4 },\n            ],\n          };\n\n          const tree1 = new Graph('tree1');\n          const tree2 = new Graph('tree2');\n          const tree3 = new Graph('tree3');\n\n          this.tree1 = tree1;\n          this.tree2 = tree2;\n          this.tree3 = tree3;\n\n          tree1.loadGraph(td1, 'tree');\n          tree2.loadGraph(td3, 'tree');\n          tree3.loadGraph(td4, 'tree');\n\n          this.sidebar.addQuiz();\n          this.sidebar.addChoice('2', true);\n          this.sidebar.addChoice('5', false);\n          this.sidebar.addChoice('3', false);\n          this.sidebar.addSolution('The correct answer is 2. Recall that the treewidth of a graph is the minimum width amonst all of the possible tree decompositions.');\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n            <p>We will now put our attention towards understanding how graph separators work in tree decompositions. If you dont recall the concept of graph separators go through chapter 2.</p>\n\n            <p>Each bag in the tree decomposition act as a separator in the graph.</p>\n\n            <p>For example the bag containing 2 3 4 separates 1 and 5 6 7 in the graph.</p>\n            `);\n\n          this.sidebar.addExercise('Hover over a bag in the tree decomposition to see how it separates the graph.');\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          await graph.computeTreeDecomposition();\n          await graph.readTreeDecomposition();\n          const td1 = graph.getTreeDecomposition();\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td1, 'tree', graph);\n          treeDecomposition.toggleSeparator();\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n          <p>Why are separators useful?</p>\n          \n          <p>Recall the property of coherence.</p>\n          \n          <p><strong>Coherence:</strong> Coherence ensures that it can be separated in a 'tree-like' way. </p>\n          \n          <p>If \\\\( T' \\\\) is a subtree of \\\\( T \\\\) we use \\\\( G_{T'} \\\\) to denote the subgraph of \\\\( G \\\\) induced by the nodes of in all pieces of associated with \\\\( T' \\\\).</p>\n          \n          <p>Lets now consider if we were to remove a node \\\\( t \\\\) of \\\\( T \\\\).</p>\n          \n          <p><strong>Theorem 1:</strong> Suppose that \\\\(T - t \\\\) has components \\\\( T_1 , ... , T_d \\\\).</p>\n\n          <p>Then the subgraphs induced $$ G_{T_1} - V_t , G_{T_2} - V_t,...,G_{T_d} - V_t $$\n          have no nodes in common, and there are no edges between them.</p>\n\n          <p><strong>Proof:</strong> We first prove that the induced subgraphs \\\\( G_{T_i} - V_t \\\\) do not share any vertices.</p>\n          \n          <p>If such a vertex was shared by the subgraphs then it would have to belong to 2 distinct subgraphs \\\\( G_{T_i} - V_t \\\\) and \\\\( G_{T_j} - V_t \\\\).</p>\n          \n          <p>That vertex would then belong to one of the bags in the subtree \\\\( T_i \\\\) and in some bag of the subtree \\\\( T_j \\\\).</p>\n\n          <p>Since the removed \\\\( t \\\\) lies on a path in \\\\( T \\\\) following the cohorence property we can see that such a vertex would neither belong to \\\\( T_i \\\\) nor \\\\( T_j \\\\).</p>\n            `);\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          await graph.computeTreeDecomposition();\n          await graph.readTreeDecomposition();\n          const td1 = graph.getTreeDecomposition();\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td1, 'tree', graph);\n          treeDecomposition.toggleCoherenceProof();\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`Lets test your knowledge of the tree decomposition properties.\n          \n          <p><strong>Add bags</strong> for the tree decomposition by clicking anywhere in the highlighted space.</p>\n          \n          <p><strong>Add edges</strong> between bags by dragging and clicking on a node.</p>\n\n          <p><strong>Change</strong> which vertices should be contained inside each bag by right-clicking and select set value. Separate each vertix using a comma.</p>\n\n          <p>(Example: If you wanted 1, 2 and 3 contained in a bag, write it as such: 1,2,3)</p>\n\n          <p><strong>Delete a bag</strong> by right-clicking and click delete bag.</p>\n\n          <p><strong>Remove an edge</strong> by right-clicking on it.</p>\n          `);\n          this.sidebar.addExercise('Draw the tree tree decompostion of the graph \\\\( G \\\\).');\n\n          const graph = new Graph('graph-container');\n          graph.randomGraph();\n\n          const td = new TreeDecomposition('tree-container', graph);\n          this.td = td;\n\n          td.enableDrawing();\n        },\n        'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n           <p class=\"fact\"><span class=\"fact-title\">Fact:</span> The treewidth of clique \\\\( k \\\\) is \\\\( k - 1\\\\)</p>\n\n           <p>As you can tell by the graph and its tree decomposition a clique has a large treewidth. An optimal tree decomposition of a clique is basically the trivial decomposition.</p>\n          `);\n          const graph = new Graph('graph-container');\n          graph.loadGraph(cliqueGraph);\n          await graph.computeTreeDecomposition();\n          await graph.readTreeDecomposition();\n          const td1 = graph.getTreeDecomposition();\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td1, 'tree', graph);\n        }, 'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n           <p class=\"fact\"><span class=\"fact-title\">Fact:</span> For every \\\\( k \\\\geq 2\\\\), the treewidth of the \\\\( k\\\\) x \\\\( k \\\\) grid is exactly \\\\( k \\\\)</p>\n\n           <p>Consider the \\\\( 3\\\\) x \\\\( 3 \\\\) grid on the right. Intuitively we can see there is no way we can separate this graph using less than \\\\( 3 \\\\) vertices.</p>\n          \n          `);\n          const graph = new Graph('graph-container');\n          graph.loadGraph(gridGraph);\n\n          await graph.computeTreeDecomposition();\n          await graph.readTreeDecomposition();\n          const td1 = graph.getTreeDecomposition();\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td1, 'tree', graph);\n        }, 'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n          <p>One part that you might have noticed that we left out is how do we construct these tree decompositions?</p>\n\n          <p>This is because an algorithm that constructs a tree decomposition given a graph is far from a trivial thing to do.\n          This in of itself could be a chapter. We have decided to rather focus on the properties of tree decompositions and how algorithms exploit them.</p>\n\n          <p>All that is needed to know for this interactive course is that it is NP-Hard to determine the treewidth of a graph. \n          However there exists approximation algorithms that can find that provides an approximate treewidth given a graph. \n          (<a href=\"https://www.sciencedirect.com/science/article/pii/S0304397597002284?via%3Dihub\">Bodlaender et al. 2016</a>)</p>\n\n          <p>This also means discovering if a tree decomposition of width \\\\( k \\\\) k exists without knowledge of the treewidth is also NP Hard.\n          Although for a small constant \\\\( k \\\\) it is possible to find a tree decomposition in linear time. (<a href=\"https://epubs.siam.org/doi/10.1137/S0097539793251219\">Bodlaender 1996</a>)\n          </p>         \n\n          <p>If you want to know more of the construction of tree decompositions the Chapter 10.5 in <a href=\"https://www.pearson.com/us/higher-education/program/Kleinberg-Algorithm-Design/PGM319216.html\"\n          >Algorithm Design</a> is a good place to start.</p>\n\n          <p>We use a Java library called <a href=\"https://github.com/maxbannach/Jdrasil\">Jdrasil</a> to compute tree decompositions.\n          The algorithm used in the library to obtain an exact tree decomposition is a mix of several known tree decomposition solvers.\n          </p>\n\n          <p>You can read more in their paper: <a href=\"https://drops.dagstuhl.de/opus/volltexte/2017/7605/pdf/LIPIcs-SEA-2017-28.pdf\">Jdrasil: A Modular Library for Computing Tree Decompositions</a>.</p>\n          `);\n          const graph = new Graph('graph-container');\n          graph.loadGraph(graph1);\n\n          await graph.computeTreeDecomposition();\n          await graph.readTreeDecomposition();\n          const td1 = graph.getTreeDecomposition();\n          const treeDecomposition = new Graph('tree-container');\n          treeDecomposition.loadGraph(td1, 'tree', graph);\n        }, 'chapter2',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n          <p>Algorithms that exploit tree decompositions are often represented using a \"nice tree decomposition\".</p>\n\n          <p><strong>Definition:</strong> A tree decomposition \\\\( (X,T) \\\\) where \\\\( X = (X_1,...,X_l) \\\\) is refered to as a nice tree decomposition if:</p>\n            <ul>\n              <li>Has all the properties of a tree decomposition</li>\n              <li>The tree \\\\( T\\\\) is <strong>rooted</strong></li>\n              <li>Every node of \\\\( T \\\\) has at most 2 children</li>\n              <p>Every node of \\\\( T \\\\) must be one of the following types:</p>\n              <li><strong><span class=\"leaf\">Leaf node:<span></strong> \\\\( i \\\\)  is a leaf in \\\\( T \\\\) then \\\\( |X_i|\\\\) \\\\( \\\\leq \\\\) 1</li>\n              <li><strong><span class=\"join\">& Join node:</span></strong>  \\\\( i \\\\) has two children \\\\( j \\\\) and \\\\( k \\\\), then \\\\( X_i = X_j = X_k \\\\)</li>\n              <li><strong><span class=\"introduce\">+ Introduce node:</span></strong>  \\\\( i \\\\) has 1 child \\\\( j \\\\), then \\\\( X_i = X_j \\\\cup \\\\{ v \\\\} \\\\) for a vertex \\\\( \\\\{ v \\\\} \\\\)</li>\n              <li><strong><span class=\"forget\">- Forget node:</span></strong> \\\\( i \\\\) has 1 child \\\\( j \\\\), then \\\\( X_i = X_j - \\\\{ v \\\\} \\\\) for a vertex \\\\( \\\\{ v \\\\} \\\\)</li>\n            </ul>\n\n            <p>On the right you see a nice tree decompostion of the current graph.</P>\n            \n            <p>Each node type of the tree is a different color and has a diffrent symbol to make it easier to tell the difference.</p>\n\n            <p>Spend some time getting familiar with the difference between the nodes. As we will be refering them a lot in the coming sections.</p>\n          `);\n\n          if (!window.graphContainer && !window.treeContainer) {\n            const graphContainer = d3.select('#container')\n              .append('div')\n              .attr('id', 'graph-container');\n\n            const treeContainer = d3.select('#container')\n              .append('div')\n              .attr('id', 'tree-container');\n\n            window.graphContainer = graphContainer;\n            window.treeContainer = treeContainer;\n          }\n\n          const graph = new Graph('graph-container');\n          this.graph = graph;\n          this.graph.randomGraph();\n\n          await this.graph.computeTreeDecomposition();\n          await this.graph.readNiceTreeDecomposition();\n          const niceTreeDecompositionData = this.graph.getNiceTreeDecomposition();\n\n          const niceTreeDecomposition = new Tree('tree-container');\n          this.treeDecomposition = niceTreeDecomposition;\n          this.treeDecomposition.load(niceTreeDecompositionData);\n          this.treeDecomposition.setGraph(this.graph);\n        },\n        'chapter3',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n            <p>We now introduce how algorithms exploit these tree decompositions.</p>\n\n            <p>Most algorithms that run on tree decompositions use a <strong>bottom-up</strong> approach combined with <strong>dynamic programming</strong>.</p>\n            \n            <p>For each node in the tree decomposition we store some information in classical dynamic programming table. What we store in this table depends on the algorithm we are running and what type of node it is.</p>\n\n            <p>The important part is that we store relatively little information at each node because we have 'split' up the graph into subgraphs by the properties of a tree decomposition.</p>\n\n            <p>We will start with a refresher on how <strong>dynamic programming</strong> works on \"normal\" trees.</p>\n          `);\n        },\n        'chapter4',\n      ),\n      new Section(\n        async () => {\n          if (this.graph) this.graph.clear();\n          const tree = new Tree('container', 'normal-tree');\n          this.tree = tree;\n          this.tree.setMisNormalTree();\n\n          const treeData = {\n            id: 1,\n            label: 1,\n            children: [\n              {\n                id: 2,\n                label: 2,\n                children: [\n                  {\n                    id: 5,\n                    label: 5,\n                    children: [{ id: 10, label: 10 }],\n                  },\n                  {\n                    id: 7,\n                    label: 7,\n                    children: [\n                      { id: 8, label: 8 },\n                    ],\n                  },\n                ],\n              },\n              {\n                id: 3,\n                label: 3,\n                children: [\n                  {\n                    id: 4,\n                    label: 4,\n                    children: [\n                      { id: 9, label: 9 },\n                    ],\n                  },\n                  {\n                    id: 6, label: 6,\n                  },\n                ],\n              },\n            ],\n          };\n          this.tree.load(treeData, 'normal-tree');\n          this.tree.addTooltip();\n          this.tree.addArrow();\n\n          this.sidebar.addContent(`\n          <p>Lets now look at how the <strong>Maximum Independent Set</strong> problem works on a tree.</p>\n          \n          <p>Using dynamic programming we can traverse the tree bottom-up and keep track of the 'state' of each node in the tree.</p>\n\n          <p>This way we are creating partial solutions throughout the algorithm, which is very efficient because we will only need to store and calculate very little data in each partial solution.</p>\n\n          <p>The algorithm works as follow:</p>\n\n          <p>\n          <strong>Input:</strong> A tree.\n          <br>\n          <strong>Output:</strong> Maximum Independent Set of the tree.\n          </p>\n          <h3>Step 1:</h3>\n          <p>Start by performing a post-order (bottom-up) traversal of the tree.</p>\n          <h3>Step 2:</h3>\n\n          <p>We just need to take care of a few cases here:</p>\n          <ul>\n            <li>If the current node is a <strong>leaf</strong> we know it has no children so we set the maximum independent set to be 1.</li>\n            <li>For every other node we keep to rows in the table <strong>Max Set Incl</strong> which includes the current node so it cannot include its direct children but it can include the grandchildren.</li>\n            <li>The other entry is <strong>Max Set Excl</strong> which means we do not include the current node so we can include its direct children.</li>\n          </ul>\n\n          <p>Then we simply get the bigger of Max Set Incl or Max Set Excl for each subsolution</p>\n          <h3>Step 3:</h3>\n          <p>Get the bigger entry in the table of the root node to get the maximum independent set of the entire tree.</p>\n          \n          <p>Try going through the algorithm step by step to see how it works. The running time is \\\\( O(n) \\\\) as we only have to visit each tree node once.</p>\n`);\n          renderMathInElement(document.body);\n          this.tree.setAllNodes();\n          this.sidebar.addButton('Next Step', () => tree.nextStep());\n          this.sidebar.addButton('Previous Step', () => tree.previousStep());\n        },\n        'chapter4',\n      ),\n      new Section(\n        async () => {\n          if (!window.graphContainer && !window.treeContainer) {\n            const graphContainer = d3.select('#container')\n              .append('div')\n              .attr('id', 'graph-container');\n\n            const treeContainer = d3.select('#container')\n              .append('div')\n              .attr('id', 'tree-container');\n\n            window.graphContainer = graphContainer;\n            window.treeContainer = treeContainer;\n          }\n\n\n          this.sidebar.addContent(`\n          <p>The first algorithm we will consider is an algorithm to find the Maximum Indpependent Set of a graph \\\\( G \\\\) given its nice tree decomposition with width \\\\( k \\\\).</p>\n\n          <p>Before explaining the algorithm lets introduce some notation that we will use from now on.</p>\n\n          <p>Consider any bag in the nice tree decompostion \\\\( i,...,l \\\\) let \\\\( G_i = (V_i,E_i) \\\\) be the induced subgraph of all vertices in the bags of the descendants of bag \\\\( i \\\\) in \\\\( T \\\\)</p>\n\n          <p>For each node \\\\( i \\\\) we will compute a table \\\\( C_i \\\\)</p>\n\n          <p>Each row in the table \\\\( C_i \\\\) consists of a subset \\\\( S \\\\subseteq X_i \\\\) in the first column and the size of the maximum independent set of that set in the second column. </p>\n          \n          <p>If a subset \\\\( S \\\\subseteq X_i \\\\) breaks the independence property, that is some vertices in the set is neighboring each other we omit this entry from the table.</p>\n\n          <p>Let's now describe the algorithm.</p>\n\n\n          <section>\n          <p><strong>Input:</strong> A nice tree decomposition of graph \\\\( G \\\\)</p>\n          <p><strong>Output:</strong> The size of the Maximum Independent Set of \\\\( G \\\\)</p>\n          </section>\n\n          <p><strong>Step 1:</strong> Perform a post-order (bottom-up) traversal of the tree.</p>\n\n          <p><strong>Step 2:</strong> Compute the table \\\\( C_i \\\\) for each node \\\\( i \\\\), depending on the type of node do the following:</p>\n  \n\n              <p>If we hit a <strong>leaf node</strong> \\\\( i \\\\) with \\\\( X_i\\\\) \\\\( \\\\leq 1 \\\\)</p>\n              <p>\\\\( C_i(Ø) = 0 \\\\)</p>\n              <p>\\\\( C_i( \\\\{ v \\\\} ) = 1 \\\\)</p>\n              <p>That is we only consider two scenarios: either it has 0 vertices or exactly 1 vertex.</p>\n              <p>The empty set does not contain a MIS, thus we set the entry to 0. \n              If the leaf contains a vertex then the size of the MIS is exactly 1, recall that the induced subgraph of a leaf consits of exactly 1 vertex.</p>\n\n              <p>If we hit a <strong>forget node</strong> \\\\( i \\\\) with child \\\\( j \\\\), then \\\\( X_i = X_j \\\\setminus \\\\{ v \\\\} \\\\) and \\\\( S \\\\subseteq X_i \\\\)</p>\n              <p>\\\\( C_i(S) = max \\\\{ C_j(S), C_j( S \\\\cup \\\\{ v \\\\} ) \\\\} \\\\)</p>\n              <p>We check if the sets of \\\\( X_i \\\\) is bigger with the forgotten vertex or without it and then keep the bigger one.</p>\n      \n              \n              <p>If we hit a <strong>join node</strong> \\\\( i \\\\) with 2 children \\\\( j_1 \\\\) and \\\\( j_ 2 \\\\), then \\\\( X_i = X_{j_1} = X_{j_2} \\\\) and \\\\( S \\\\subseteq X_i \\\\)</p>\n              <p>\\\\( C_i(S) = C_{j_1}(S) + C_{j_2}(S) - |S| \\\\)</p>\n              <p>As \\\\( X_i \\\\), \\\\(X_{j_1} \\\\) and \\\\( X_{j_2} \\\\) all contain the same vertices and recalling the coherence property of \n              tree decompositions we can see that the the vertices in \\\\( X_i \\\\) is the intersection of the nodes in the 2 subtrees. We can then add the table entries from the children nodes' table and substract the ones we counted twice./p>\n     \n\n              <p>If we hit a <strong>introduce node</strong> with child \\\\( j \\\\), then \\\\( X_i = X_j \\\\cup \\\\{ v \\\\} \\\\) and \\\\( S \\\\subseteq X_j \\\\)</p>\n              <p>\\\\( C_i(S) = C_j(S)\\\\)</p>\n             <p>\n             $$\n             C_i(S \\\\cup \\\\{ v \\\\} ) = \\\\begin{cases}\n             −∞ & \\\\text{if } \\\\exists w \\\\in S : \\\\{ v,w \\\\} \\\\in E \\\\\\\\\n             C_j(S) + 1 & \\\\text{else } \n            \\\\end{cases}\n             $$\n             </p>\n             <p>To compute the table of an introduce node we take over all the child node \\\\( X_j \\\\) table's entries. If a \\\\( v \\\\in S \\\\) we test if there are any \n             vertices in the set that are adjacent and if so we know it is not an independent set and we set the value to be minus infinity. If it is not adjacent we add 1 to the existing entry.</p>\n\n          <p><strong>Step 3:</strong></p> Lastly we return the largest independent set in the table \\\\( C_r \\\\) of the root node.\n\n          <h2>Complexity</h2>\n          <p>Using post-order traversal we visit each node exactly once which takes time \\\\( O(n) \\\\).</p>\n\n          <p>We assume treewidth \\\\( k \\\\). So the largest bag must contain \\\\( k + 1 \\\\) vertices. Which means we need to compute at most \\\\( 2^{k+1} \\\\) rows for every table \\\\( C_i \\\\).\n          Therefor the running time of this algorithm is \\\\( O(2^{k+1} n) \\\\).</p>\n\n          <p>In conclusion, for graphs with bounded treewidth we can find the maximum independent set in linear time as:\n            <ul>\n              <li>We can compute a tree decomposition in linear time</li>\n              <li>Transform it into a nice tree decomposition in linear time</li>\n              <li>Run the algorithm in linear time</li>\n            </ul>\n          </p>\n\n          <p>Step through the algorithm by using the b\n         `);\n\n          const graph = new Graph('graph-container');\n          const niceTreeDecomposition = new Tree('tree-container');\n          graph.loadGraph(graph1);\n\n          await graph.computeTreeDecomposition();\n          await graph.readNiceTreeDecomposition();\n          const niceTreeDecompositionData = graph.getNiceTreeDecomposition();\n          niceTreeDecomposition.load(niceTreeDecompositionData);\n          niceTreeDecomposition.setGraph(graph);\n          niceTreeDecomposition.enableMaximumIndependentSet();\n\n          this.sidebar.addButton('Max Independent Set', () => niceTreeDecomposition.mis());\n\n          const controlsContainer = d3.select('#output').append('div')\n            .attr('class', 'controls-container');\n\n          controlsContainer\n            .append('span')\n            .text('keyboard_arrow_left')\n            .attr('class', 'material-icons nav-arrows')\n            .on('click', () => niceTreeDecomposition.previous());\n\n          controlsContainer\n            .append('span')\n            .text('keyboard_arrow_right')\n            .attr('class', 'material-icons nav-arrows')\n            .on('click', () => niceTreeDecomposition.next());\n        },\n        'chapter4',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n          <h2>3-Colorable Algorithm:</h2>\n\n          <p>We say that a graph \\\\( G \\\\) is \\\\( k-colorable \\\\) if we can color the vertices with \\\\( k \\\\) colors such that no two adjacent vertices has the same color.</p>\n\n          <p>For illustration purposes we will consider the example of 3-colorable.</p>\n\n          <section class=\"inout\">\n          <p><strong>Input:</strong> A nice tree decomposition of graph \\\\( G \\\\)</p>\n          <p><strong>Output:</strong> If \\\\( G \\\\) is 3-colorable</p>\n          </section>\n\n          <p>\n            \\\\( X_i \\\\) vertices appearing in the bag \\\\( x\\\\).\n            <br>\n            \\\\( V_x \\\\) vertices of the subtree rooted at bag \\\\( x \\\\).\n          </p>\n\n          <p>\n            For every bag \\\\( x \\\\) and coloring \\\\( c : X_i  →  \\\\{ 1,2,3 \\\\} \\\\) we define the table \\\\( A[i,c] \\\\) to be true if there exists a 3-coloring of \\\\( V_x \\\\).\n          <p>\n\n          <p><strong>Step 1:</strong> Perform a post-order traversel of the nice tree decomposition.</p>\n\n          <p><strong>Step 2:</strong></p>\n\n          <p><strong>Leaf node:</strong> As a leaf node \\\\( X_i \\\\) contains at most 1 vertex. There are only 3 possible states for the vertex \\\\( \\\\{ v \\\\} → \\\\{ 1,2,3 \\\\} \\\\).</p>\n\n          <p>\n            <strong>Introduce node</strong> \\\\( i \\\\) with child \\\\( j \\\\) with \\\\( X_i = X_j \\\\cup \\\\{ v \\\\} \\\\) for some vertex \\\\( v \\\\).\n            <br>\n            If \\\\( c(v) \\\\neq c(w) \\\\) for every adjacent \\\\( w \\\\) of \\\\( v \\\\)\n            <br>\n            then \\\\( A[i,c] = A[j,c'] \\\\) where \\\\( c' \\\\) is \\\\( c \\\\) restricted to \\\\( X_j \\\\)\n            <br>\n            That is, before we color an introduced node we check if any of its neighbors has the color we want to color it. If it does, we do not include it in the table.\n          </p>\n\n          <p>\n            <strong>Forget node</strong> \\\\( i \\\\) with 1 child \\\\( j \\\\) and \\\\( X_i = X_j \\\\setminus \\\\{ v \\\\} \\\\) and \\\\( S \\\\subseteq X_i \\\\)\n            <br>\n            \\\\( A[i,c] \\\\) is true if \\\\( A[j,c'] \\\\) is true for one of the extensions of \\\\( c \\\\) to \\\\( X_j \\\\).\n            <br>\n            In other words we compute all the possible ways to color \\\\( X_i \\\\) and for each coloring we check if it can extended to \\\\( X_j \\\\) with at least one of the possible colors.\n          </p>\n\n          <p>\n            <strong>Join node</strong> \\\\( i \\\\) with 2 children \\\\( j_1 \\\\) and \\\\( j_2 \\\\) \\\\( X_i  = X_{j_1} = X_{j_2} \\\\)\n            <br>\n            \\\\( A[i,c] = A[j_1,c] + A[j_2,c] \\\\)\n            <br>\n            Each independent subproblem must be consistent.\n          </p>\n\n          <p><strong>Step 3:</strong> To see if graph \\\\( G \\\\) is 3-colorable we look at the table of the root \\\\( A_r \\\\). If and only if it contains at least one true entry we know that graph \\\\( G \\\\)\n          is colorable, recall that the subgraph induced by the root is \\\\( G \\\\) including all vertices.</p>\n\n          <h2>Complexity</h2>\n          <p>The running time of performing a post-order traversal is \\\\( O(n) \\\\)</p>\n          <p>There are at most \\\\( 3^{k+1} \\\\) sub problems where \\\\( k\\\\) is treewidth. Thus, the running time is \\\\( O(3^{k+1}n) \\\\)</p>\n          \n          \n          `);\n\n          if (!window.graphContainer && !window.treeContainer) {\n            const graphContainer = d3.select('#container')\n              .append('div')\n              .attr('id', 'graph-container');\n\n            const treeContainer = d3.select('#container')\n              .append('div')\n              .attr('id', 'tree-container');\n\n            window.graphContainer = graphContainer;\n            window.treeContainer = treeContainer;\n          }\n\n          const graph = new Graph('graph-container');\n          const niceTreeDecomposition = new Tree('tree-container');\n          graph.loadGraph(graph1);\n\n          await graph.computeTreeDecomposition();\n          await graph.readNiceTreeDecomposition();\n          const niceTreeDecompositionData = graph.getNiceTreeDecomposition();\n          niceTreeDecomposition.load(niceTreeDecompositionData);\n          niceTreeDecomposition.setGraph(graph);\n          niceTreeDecomposition.enableThreeColor();\n\n          const controlsContainer = d3.select('#output').append('div')\n            .attr('class', 'controls-container');\n\n          controlsContainer\n            .append('span')\n            .text('keyboard_arrow_left')\n            .attr('class', 'material-icons nav-arrows')\n            .on('click', () => niceTreeDecomposition.previous());\n\n          controlsContainer\n            .append('span')\n            .text('keyboard_arrow_right')\n            .attr('class', 'material-icons nav-arrows')\n            .on('click', () => niceTreeDecomposition.next());\n\n          this.sidebar.addButton('3-Coloring', () => niceTreeDecomposition.runThreeColor());\n        },\n        'chapter4',\n      ),\n      new Section(\n        async () => {\n          this.sidebar.addContent(`\n          <h2>Hamiltonian Path</h2>\n\n          <p>\n            <strong>Input:</strong> A graph \\\\( G \\\\) and a nice tree decomposition \\\\( T \\\\)\n            <br>\n            <strong>Output:</strong> If \\\\( G \\\\) contains a Hamiltonian path.\n          </p>\n\n          <table id=\"dp-table\" class=\"hamiltonianTable\"></table>\n          `);\n          this.addContainers();\n\n          const graph = new Graph('graph-container');\n          const niceTreeDecomposition = new Tree('tree-container');\n          graph.loadGraph(graph1);\n\n          await graph.computeTreeDecomposition();\n          await graph.readNiceTreeDecomposition();\n          const niceTreeDecompositionData = graph.getNiceTreeDecomposition();\n          niceTreeDecomposition.load(niceTreeDecompositionData);\n          niceTreeDecomposition.setGraph(graph);\n          // niceTreeDecomposition.addTooltip();\n          // niceTreeDecomposition.addTable();\n          // niceTreeDecomposition.addArrow();\n          niceTreeDecomposition.enableHamiltonianPath();\n\n          this.addAlgorithmControls(() => niceTreeDecomposition.previous(), () => niceTreeDecomposition.next());\n        },\n        'chapter4',\n      ),\n    ];\n\n    this.sections = this.sections.filter((section) => section.chapter === this.currentChapter);\n\n\n    if (this.currentChapter === 'chapter5') this.createCustomSection();\n  }\n\n  addAlgorithmControls(previous, next) {\n    const controlsContainer = d3.select('#output').append('div')\n      .attr('class', 'controls-container');\n\n    controlsContainer\n      .append('span')\n      .text('keyboard_arrow_left')\n      .attr('class', 'material-icons nav-arrows')\n      .on('click', previous);\n\n    controlsContainer\n      .append('span')\n      .text('keyboard_arrow_right')\n      .attr('class', 'material-icons nav-arrows')\n      .on('click', next);\n  }\n\n  addContainers() {\n    if (!window.graphContainer && !window.treeContainer) {\n      const graphContainer = d3.select('#container')\n        .append('div')\n        .attr('id', 'graph-container');\n\n      const treeContainer = d3.select('#container')\n        .append('div')\n        .attr('id', 'tree-container');\n\n      window.graphContainer = graphContainer;\n      window.treeContainer = treeContainer;\n    }\n  }\n\n  async sectionFunctionBuilder(n) {\n    for (const line of n) {\n      if (line.startsWith('#create-graph')) {\n        const nodes = [];\n        const links = [];\n        const tempSet = new Set();\n\n        const splitted = line.split(' ');\n        splitted.shift();\n        for (const s of splitted) {\n          const v1 = parseInt(s[0], 10);\n          const v2 = parseInt(s[2], 10);\n          tempSet.add(v1);\n          tempSet.add(v2);\n          const newLink = { source: v1, target: v2 };\n          links.push(newLink);\n        }\n\n        tempSet.forEach((node) => {\n          const newNode = { id: node };\n          nodes.push(newNode);\n        });\n\n        const graphData = { nodes, links };\n\n        const graph = new Graph('graph-container');\n        this.graph = graph;\n        graph.loadGraph(graphData);\n      }\n\n      if (line.startsWith('#p')) {\n        const newLine = line.replace('#p', '');\n        this.sidebar.addContent(newLine);\n        renderMathInElement(document.body);\n      }\n\n      if (line.startsWith('#compute-tree-decomposition')) {\n        const newLine = line.replace('#compute-tree-decomposition', '');\n        await this.graph.computeTreeDecomposition();\n        await this.graph.readTreeDecomposition();\n        const td = this.graph.getTreeDecomposition();\n        const treeDecomposition = new Graph('tree-container');\n        treeDecomposition.loadGraph(td, 'tree', this.graph);\n      }\n    }\n  }\n\n  async createCustomSection() {\n    await readLocalFile('./Chapters/content.txt');\n    this.sectionFunctionBuilder(window.n);\n\n    // const add = new Function('sb', 'this.sidebar.addContent(\\'yeeep\\');');\n    // add(this.sidebar);\n\n    /*   const v = eval(`\n      const graph = new Graph('container');\n      graph.randomGraph();\n    `); */\n\n    // console.log(this.sidebar, add);\n\n    // const section = new Section(add, 'chapter5');\n    this.addSection(section);\n\n    // readLocalFile;\n  }\n\n  addSection(section) {\n    this.sections.push(section);\n    this.currentSection = section;\n    this.createSection();\n  }\n\n  createSection() {\n    if (!this.currentSection) this.currentSection = this.sections[0];\n    d3.select('.nav').style('flex', 0.05);\n\n    /* Query strings */\n    window.history.replaceState({}, '', '?');\n    const params = new URLSearchParams(location.search);\n    params.set('chapter', window.chapterHandler.chapters.indexOf(window.chapterHandler.currentChapter) + 1);\n    params.set('section', this.currentSectionIndex + 1);\n    params.toString();\n    window.history.replaceState({}, '', `?${params.toString()}`);\n    /* Query strings end */\n\n    d3.select('#graph-container').selectAll('svg').remove();\n    d3.select('#tree-container').selectAll('svg').remove();\n    d3.select('#container').selectAll('svg').remove();\n\n    if (this.sidebar) this.sidebar.clear();\n    // if (this.graph) this.graph.clear();\n    if (this.tree) this.tree.clear();\n    // if (this.treeDecomposition) this.treeDecomposition.clear();\n    d3.select('#output').selectAll('*').remove();\n    d3.select('#tooltip').remove();\n    d3.select('#tooltip-arrow').remove();\n    d3.select('#tree1').remove();\n    d3.select('#tree2').remove();\n    d3.select('#tree3').remove();\n\n    this.sections.map((section) => section.isActive = false);\n    this.currentSection.isActive = true;\n    this.currentSection.create();\n    this.sidebar.updateProgressBar();\n  }\n\n  goPreviousSection() {\n    if (this.currentSectionIndex === 0) return;\n    this.currentSectionIndex--;\n    this.currentSection = this.sections[this.currentSectionIndex];\n    this.createSection();\n  }\n\n  goNextSection() {\n    if (this.currentSectionIndex === this.sections.length - 1) return;\n    this.currentSectionIndex++;\n    this.currentSection = this.sections[this.currentSectionIndex];\n    this.createSection();\n  }\n\n  goToSection(section) {\n    this.currentSection = section;\n    this.currentSectionIndex = this.sections.indexOf(section);\n    this.createSection();\n  }\n\n  loadFirstSection() {\n    this.currentSection = this.sections[0];\n    this.createSection();\n  }\n}\n\n// Abandoned sections blow.. Might come back to them.. Might not..\n\n/*\nnew Section(\n  async () => {\n    this.sidebar.addContent(`\n          <p>Why should we care about treewidth then?</p>\n\n         <p>Well we know that many problems which are considered hard to execute on graphs are a lot easier to execute on trees.</p>\n\n         <p>Which means if we can turn a given graph into a tree we can essentially compute the same problem on that tree of the graph.</p>\n\n         <p>First let us consider a classic graph problem: <strong>Maximum Independent Set</strong>.</p>\n\n         <p>Recall that a maximum independent set is the largest possible size of an independent set of a graph.</p>\n\n         <p>The algorithm you see here is a naive brute force algorithm that checks every subset of the graph and the running time is</p>\n          $$ O(2^n * n * (n-1)/2) $$\n\n          <p>As you can tell this algorithm is really slow as we check all subsets of the graph.</p>`);\n\n    d3.select('#output')\n      .append('div')\n      .attr('id', 'max-output');\n\n    const graph = new Graph('container');\n    graph.randomGraph();\n\n    this.sidebar.addButton('Run Max Independent Set', () => graph.runMaximumIndependentSet());\n    this.sidebar.addButton('Skip Forward', () => graph.skipForwardMaximumIndependentSet());\n  },\n  'chapter1',\n), */\n\n/* new Section(\n  async () => {\n    if (!window.graphContainer && !window.treeContainer) {\n      const graphContainer = d3.select('#container')\n        .append('div')\n        .attr('id', 'graph-container');\n\n      const treeContainer = d3.select('#container')\n        .append('div')\n        .attr('id', 'tree-container');\n\n      window.graphContainer = graphContainer;\n      window.treeContainer = treeContainer;\n    }\n\n    this.sidebar.addContent(`\n    <p class=\"fact\"><strong class=\"fact-title\">Theorem:</strong> Given a graph \\\\( G \\\\) with \\\\( n \\\\) nodes and a tree decomposition of \\\\( G \\\\)\n     with width \\\\( K \\\\) we can compute a nice tree decomposition of \\\\( G \\\\) with width \\\\( k \\\\) in polynomial time.</p>\n\n     <p>We describe an algorithm as follows...</p>\n     <p>\n     <strong>Step 1:</strong> Choose an arbitrary node to be the root.\n     <br>\n     <strong>Step 2:</strong> Make every node have at most 2 children.\n     <br>\n     <strong>Step 3:</strong> Every node that has 2 children, turn them into a join node.\n     <br>\n     <strong>Step 4:</strong> Every node that has 1 child, let the parent be \\\\( X_i \\\\) and the child be \\\\( X_j \\\\)\n     create introduce nodes that introduce the elements that are in \\\\( X_i \\\\) but not in \\\\( X_j \\\\). Create forget nodes for elements that are in \\\\( X_j \\\\) but not in \\\\( X_i \\\\).\n     <br>\n     <strong>Step 5:</strong> Make leaves have size at most 1 by adding as many introduced nodes as needed.\n     </p>\n\n    `);\n    this.sidebar.addExercise('Construct the nice tree decomposition of the tree decomposition.');\n\n    const td = {\n      nodes: [\n        {\n          id: 1,\n          label: '1 2 3',\n        },\n        {\n          id: 2,\n          label: '2 3 4',\n        },\n      ],\n      links: [\n        {\n          source: 1,\n          target: 2,\n        },\n      ],\n    };\n\n    const niceTreeDecompositionData = {\n      id: 1,\n      label: '',\n      vertices: [],\n      children: [],\n    };\n    const treeDecomposition = new Graph('graph-container');\n    treeDecomposition.loadGraph(td, 'tree');\n\n    const niceTreeDecomposition = new Tree('tree-container', 'nice', treeDecomposition);\n    niceTreeDecomposition.load(niceTreeDecompositionData, 'nice');\n  },\n  'chapter3',\n), */\n","/* eslint-disable no-return-assign */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-eval */\n/* eslint-disable max-len */\n/* eslint-disable import/prefer-default-export */\n\nimport Chapter from '../Components/Chapter.js';\nimport Sidebar from '../Components/Sidebar.js';\nimport SectionHandler from './SectionHandler.js';\nimport Graph from '../Components/Graph.js';\nimport Tree from '../Components/Tree.js';\nimport TreeDecomposition from '../Components/TreeDecomposition.js';\n// eslint-disable-next-line no-unused-vars\nimport { getAllSubsets } from '../Utilities/helpers.js';\n\nexport default class ChapterHandler {\n  constructor() {\n    this.currentChapter = 1;\n    this.chapters = [\n      new Chapter(\n        (async () => {\n\n        }),\n        '1. Graph Separators',\n        false,\n      ),\n      new Chapter(\n        (async () => {\n          d3.select('#container')\n            .append('div')\n            .attr('id', 'graph-container');\n\n          d3.select('#container')\n            .append('div')\n            .attr('id', 'tree-container');\n        }),\n        '2. Treewidth & Tree Decompositions',\n        false,\n      ),\n      new Chapter(\n        (async () => {\n\n        }),\n        '3. Nice Tree Decompositions',\n        false,\n      ),\n      new Chapter(\n        async () => {\n\n        },\n        '4. Algorithms on Tree Decompositions',\n        false,\n      ),\n      new Chapter(\n        async () => {\n          d3.select('#container')\n            .append('div')\n            .attr('id', 'graph-container');\n\n          d3.select('#container')\n            .append('div')\n            .attr('id', 'tree-container');\n        },\n        '5. Misc',\n        false,\n      ),\n      new Chapter(\n        async () => {\n          const sandboxSidebarContainer = d3.select('#main')\n            .append('div')\n            .attr('class', 'custom-algorithm-sidebar-container');\n\n          const sandboxSidebar = sandboxSidebarContainer\n            .append('div')\n            .attr('class', 'custom-sidebar');\n\n          sandboxSidebar\n            .append('h2')\n            .text('Create a custom algorithm')\n            .style('margin', '5px')\n            .style('text-align', 'center')\n            .append('hr')\n            .style('margin-bottom', '0');\n\n          const sandboxAppContainer = d3.select('#main')\n            .append('div')\n            .attr('class', 'custom-algorithm-app-container');\n\n          sandboxAppContainer\n            .append('div')\n            .attr('class', 'left-side')\n            .attr('id', 'left-side');\n\n          const rightSide = sandboxAppContainer\n            .append('div')\n            .attr('class', 'right-side')\n            .attr('id', 'right-side');\n\n\n          rightSide\n            .append('div')\n            .attr('id', 'sandbox-nice-tree-decomposition');\n\n          const graph = new Graph('left-side');\n          graph.randomGraph();\n          const niceTreeDecomposition = new Tree('sandbox-nice-tree-decomposition');\n          await graph.computeTreeDecomposition();\n          await graph.readNiceTreeDecomposition();\n          const niceTdData = graph.getNiceTreeDecomposition();\n          niceTreeDecomposition.load(niceTdData);\n          niceTreeDecomposition.addTooltip();\n          niceTreeDecomposition.addArrow();\n\n          // sandboxSidebar.append('text-area');\n\n          sandboxSidebar\n            .append('text')\n            .html(`\n              <p>Here you can create a custom algorithm that runs on a nice tree decomposition.</p>\n\n              <p>Currently the only supported language is JavaScript.</p>\n\n              <p>The algorithm performs a post-order traversel of the tree, you just need to specify what you want to happen at each specific node type.</p>\n\n              <p>Once you've written some code save it and run through it by using the controls under the nice tree decomposition to step through your algorithm.\n              You may use your own custom JavaScript code or make use of our existing library functions which you can see <a target=\"_blank\" href=\"https://github.com/FrederikJorgensen/graph-width-visualizer#custom-algorithm\">here</a>.</p>\n            `).style('padding', '0 15px 0 15px');\n\n          sandboxSidebar\n            .append('textarea')\n            .attr('id', 'editor')\n            .text('switch(type){\\n case \"leaf\":\\n //Your code for a leaf node.\\n break;\\n\\n case \"introduce\":\\n // Your code for an introduce node.\\n break;\\n\\n case \"forget\":\\n //Your code for a forget node.\\n break;\\n\\n case \"join\":\\n // Your code for a join node.\\n break;\\n}');\n\n          const editor = CodeMirror.fromTextArea(document.getElementById('editor'), {\n            value: 'function myScript(){return 100;}\\n',\n            mode: 'javascript',\n            theme: 'monokai',\n            lineNumbers: true,\n            autoCloseBrackets: true,\n          });\n\n          editor.setSize('100%', '100%');\n\n\n          const someString = `\n          switch(type){ \n          case \"leaf\":\n            // By definition we know that leaf nodes are empty.\n            node.table[''] = 0;\n            break;\n\n          case \"introduce\":\n            // Set all the entries of this table to be the same as the child's\n            node.table = childTable;\n\n            // Get the introduced vertex\n            const introducedVertex = niceTreeDecomposition.getIntroducedVertex(node);\n\n            for (const set of allSubsets) {\n              // We only care about the subsets containing the introduced vertex v\n              if (set.includes(introducedVertex)) {\n                /* Check if a vertex inside this set is adjacent to the introduced vertex */\n                const setWithoutV = set.filter((s) => s !== introducedVertex);\n    \n                if (graph.isVertexAdjacent(subTree, set)) {\n                  // If the vertex is adjacent to another vertex in the set, we set the value to be -9999\n                  node.table[set] = -9999;\n                } else {\n                  // If not we increment the value of the child table\n                  let oldValue = childTable[setWithoutV];\n                  oldValue++;\n                  node.table[set] = oldValue;\n                }\n              }\n            }\n            break;\n\n          case \"forget\":\n            // Get the forgotten vertex.\n            const forgottenVertex = niceTreeDecomposition.getForgottenVertex(node);\n\n            for (const set of allSubsets) {\n              /* Union the forgottenVertex with the current subset */\n              const concatV = set.concat(forgottenVertex);\n              concatV.sort();\n    \n              /* Value of set without v */\n              const setWithoutV = childTable[set];\n    \n              /* Value of set with v */\n              const setWithV = childTable[concatV];\n    \n              if (setWithoutV > setWithV) {\n                node.table[set] = setWithoutV;\n              } else {\n                node.table[set] = setWithV;\n              }\n            }\n\n            break;\n\n          case \"join\":\n            // Get child 2's table\n            const child2Table = niceTreeDecomposition.getChild2Table(node);\n\n            for (const set of allSubsets) {\n              const child1value = childTable[set];\n              const child2value = child2Table[set];\n              const currentNodeValue = set.length;\n              node.table[set] = child1value + child2value - currentNodeValue;\n            }\n\n            break;\n          }`;\n\n          const formattedJSON = js_beautify(someString, { indent_size: 2 });\n\n          const root = niceTreeDecomposition.getRoot();\n\n          let userInput = '';\n          let current = 0;\n          let customFunction = '';\n\n          const misButtonContainer = sandboxSidebar\n            .append('div')\n            .attr('class', 'custom-container');\n\n\n          misButtonContainer.append('button')\n            .text('Save Code')\n            .attr('class', 'pure-material-button-contained')\n            .on('click', () => {\n              userInput = editor.getValue();\n\n              customFunction = `\n          let i = 1;\n          \n          root.eachAfter((currentNode) => {\n            if (current !== i++) return;\n\n            niceTreeDecomposition.animateNode(currentNode);\n            niceTreeDecomposition.animateLink(currentNode);\n\n            const node = currentNode.data;\n\n            node.table = {};\n\n            let childTable;\n\n            if ('children' in node) {\n              childTable = niceTreeDecomposition.getChildTable(node);\n            }\n\n            const subTree = niceTreeDecomposition.getSubTree(root, node)\n            \n            const allSubsets = getAllSubsets(node.vertices);\n            allSubsets.map((s) => s.sort());\n\n            let type = '';\n\n            if ('children' in node === false) type = 'leaf';\n            else if (node.children.length === 2) type = 'join';\n            else if (node.vertices.length > node.children[0].vertices.length) type = 'introduce';\n            else if (node.vertices.length < node.children[0].vertices.length) type = 'forget';\n\n            ${userInput}\n\n            console.log(node.table);\n\n            niceTreeDecomposition.drawTable(node);\n\n          })`;\n            });\n\n\n          misButtonContainer\n            .append('button')\n            .text('Reset to default code')\n            .attr('class', 'pure-material-button-contained')\n            .on('click', () => editor.setValue('switch(type){\\n case \"leaf\":\\n //Your code for a leaf node.\\n break;\\n\\n case \"introduce\":\\n // Your code for an introduce node.\\n break;\\n\\n case \"forget\":\\n //Your code for a forget node.\\n break;\\n\\n case \"join\":\\n // Your code for a join node.\\n break;\\n}'));\n\n          misButtonContainer\n            .append('button')\n            .text('Show Max Independent Set Code')\n            .attr('class', 'pure-material-button-contained')\n            .on('click', () => editor.setValue(formattedJSON));\n\n          const controls = rightSide\n            .append('div')\n            .attr('id', 'controls');\n\n          const controlsContainer = controls.append('div')\n            .attr('class', 'controls-container');\n\n          controlsContainer\n            .append('span')\n            .text('keyboard_arrow_left')\n            .attr('class', 'material-icons nav-arrows')\n            .on('click', () => {\n              if (current === 0) return;\n              const N = root.descendants().length;\n              --current;\n              current %= N;\n              eval(customFunction);\n            });\n\n          controlsContainer\n            .append('span')\n            .text('keyboard_arrow_right')\n            .attr('class', 'material-icons nav-arrows')\n            .on('click', () => {\n              const N = root.descendants().length;\n              current++;\n              if (current !== N) current %= N;\n              eval(customFunction);\n            });\n\n          renderMathInElement(document.body);\n        },\n        '7. Create Custom Algorithm',\n      ),\n      new Chapter(\n        async () => {\n          let graphLoaded = false;\n          let treeDecompositionLoaded = false;\n          let niceTreeDecompositionLoaded = false;\n\n          const graph = new Graph('sandbox-graph');\n          const treeDecomposition = new Graph('sandbox-tree-decomposition');\n          const niceTreeDecomposition = new Tree('sandbox-nice-tree-decomposition', 'nice', graph);\n\n          const td = new TreeDecomposition('sandbox-tree-decomposition', graph);\n\n          const sandboxSidebarContainer = d3.select('#main')\n            .append('div')\n            .attr('class', 'sandbox-sidebar-container');\n\n          const sandboxSidebar = sandboxSidebarContainer\n            .append('div')\n            .attr('class', 'sandbox-sidebar');\n\n          sandboxSidebar\n            .append('text')\n            .text('Vertices: ')\n            .append('span')\n            .attr('id', 'v')\n            .text('10');\n\n          sandboxSidebar\n            .append('input')\n            .attr('id', 'vertices-slider')\n            .attr('type', 'range')\n            .attr('min', 0)\n            .attr('max', 100)\n            .attr('step', 'any')\n            .attr('step', '1')\n            .attr('value', 10)\n            .attr('class', 'slider')\n            .on('input', () => {\n              const val = document.getElementById('vertices-slider').value;\n              d3.select('#v').text(val);\n            });\n\n          sandboxSidebar\n            .append('text')\n            .text('Edges:     ')\n            .append('span')\n            .attr('id', 'e')\n            .text('10');\n\n          sandboxSidebar\n            .append('input')\n            .attr('id', 'edges-slider')\n            .attr('type', 'range')\n            .attr('min', 0)\n            .attr('max', 100)\n            .attr('step', 'any')\n            .attr('step', '1')\n            .attr('value', 10)\n            .attr('class', 'slider')\n            .on('input', () => {\n              const val = document.getElementById('edges-slider').value;\n              d3.select('#e').text(val);\n            });\n\n          sandboxSidebar.append('span')\n            .text('replay')\n            .attr('class', 'material-icons')\n            .on('click', () => {\n              if (treeDecomposition.svg) treeDecomposition.clear();\n              if (niceTreeDecomposition.svg) niceTreeDecomposition.clear();\n\n              const numberOfVertices = document.getElementById('vertices-slider').value;\n              const numberOfEdges = document.getElementById('edges-slider').value;\n              graph.randomGraph(numberOfVertices, numberOfEdges);\n              d3.select('#compute-td-button').classed('sandbox-button', true);\n              d3.select('#compute-td-button').classed('sandbox-button-disabled', false);\n              d3.select('#draw-td-button').classed('sandbox-button', true);\n              d3.select('#draw-td-button').classed('sandbox-button-disabled', false);\n              graphLoaded = true;\n            });\n\n          sandboxSidebar\n            .append('span')\n            .text('palette')\n            .attr('class', 'material-icons')\n            .on('click', () => {\n              graph.enableDrawing();\n              graphLoaded = true;\n              d3.select('#compute-td-button').classed('sandbox-button', true);\n              d3.select('#compute-td-button').classed('sandbox-button-disabled', false);\n              d3.select('#draw-td-button').classed('sandbox-button', true);\n              d3.select('#draw-td-button').classed('sandbox-button-disabled', false);\n            });\n\n\n          /*           sandboxSidebar\n            .append('button')\n            .text('Draw Tree Decomposition')\n            .attr('id', 'draw-td-button')\n            .attr('class', 'sandbox-button-disabled')\n            .on('click', () => {\n              if (!graphLoaded) return;\n              td.enableDrawing();\n            }); */\n\n          sandboxSidebar\n            .append('span')\n            .text('device_hub')\n            .attr('id', 'compute-td-button')\n            .attr('class', 'material-icons')\n            .on('click', async () => {\n              if (!graphLoaded) return;\n              if (treeDecomposition.svg) treeDecomposition.clear();\n              if (niceTreeDecomposition.svg) niceTreeDecomposition.clear();\n              await graph.computeTreeDecomposition();\n              await graph.readTreeDecomposition();\n              const treeDecompositionData = graph.getTreeDecomposition();\n              treeDecomposition.loadGraph(treeDecompositionData, 'tree', graph);\n              d3.select('#compute-nicetd-button').classed('sandbox-button', true);\n              d3.select('#compute-nicetd-button').classed('sandbox-button-disabled', false);\n              treeDecompositionLoaded = true;\n            });\n\n          sandboxSidebar\n            .append('span')\n            .text('timeline')\n            .attr('id', 'compute-nicetd-button')\n            .attr('class', 'material-icons')\n            .on('click', async () => {\n              if (!treeDecompositionLoaded) return;\n              if (niceTreeDecomposition.svg) niceTreeDecomposition.clear();\n              await graph.readNiceTreeDecomposition();\n              const niceTreeDecompositionData = graph.getNiceTreeDecomposition();\n              niceTreeDecomposition.load(niceTreeDecompositionData);\n              niceTreeDecompositionLoaded = true;\n              d3.select('#three-color-b').classed('sandbox-button', true);\n              d3.select('#three-color-b').classed('sandbox-button-disabled', false);\n              d3.select('#max-inde-b').classed('sandbox-button', true);\n              d3.select('#max-inde-b').classed('sandbox-button-disabled', false);\n            });\n\n          /*           sandboxSidebar\n            .append('button')\n            .text('3-Colorable')\n            .attr('class', 'sandbox-button-disabled')\n            .attr('id', 'three-color-b')\n            .on('click', () => {\n              if (!niceTreeDecompositionLoaded) return;\n              d3.select('#algo-text').text('Current Algorithm = 3-Colorable');\n              niceTreeDecomposition.enableThreeColor();\n            });\n\n          sandboxSidebar\n            .append('button')\n            .text('Max Independent Set')\n            .attr('class', 'sandbox-button-disabled')\n            .attr('id', 'max-inde-b')\n            .on('click', () => {\n              if (!niceTreeDecompositionLoaded) return;\n              d3.select('#algo-text').text('Current Algorithm = Max Independent Set');\n              niceTreeDecomposition.enableMaximumIndependentSet();\n            }); */\n\n          sandboxSidebar\n            .append('span')\n            .text('clear')\n            .attr('class', 'material-icons')\n            .on('click', async () => {\n              this.graph = d3.select('#algo-text').text('Current Algorithm = None Selected');\n              d3.select('#compute-td-button').classed('sandbox-button', false);\n              d3.select('#compute-td-button').classed('sandbox-button-disabled', true);\n              d3.select('#compute-nicetd-button').classed('sandbox-button', false);\n              d3.select('#compute-nicetd-button').classed('sandbox-button-disabled', true);\n              d3.select('#three-color-b').classed('sandbox-button', false);\n              d3.select('#three-color-b').classed('sandbox-button-disabled', true);\n              if (graph.svg) graph.clear();\n              if (td) td.clear();\n              d3.select('#output').html(null);\n              if (treeDecomposition.svg) treeDecomposition.clear();\n              if (niceTreeDecomposition.svg) niceTreeDecomposition.clear();\n              if (niceTreeDecomposition.colorTable) niceTreeDecomposition.removeColorTable();\n              if (niceTreeDecomposition.tooltip) niceTreeDecomposition.removeMisTable();\n              graphLoaded = false;\n              treeDecompositionLoaded = false;\n              niceTreeDecompositionLoaded = false;\n            });\n\n          const sandboxAppContainer = d3.select('#main')\n            .append('div')\n            .attr('class', 'sandbox-app-container');\n\n          const leftSide = sandboxAppContainer\n            .append('div')\n            .attr('class', 'left-side');\n\n          const rightSide = sandboxAppContainer\n            .append('div')\n            .attr('class', 'right-side');\n\n          leftSide\n            .append('div')\n            .attr('id', 'sandbox-graph')\n            .append('text')\n            .text('Graph')\n            .attr('class', 'container-text');\n\n          leftSide\n            .append('div')\n            .attr('id', 'sandbox-tree-decomposition')\n            .append('text')\n            .text('Tree Decomposition')\n            .attr('class', 'container-text');\n\n          leftSide\n            .append('div')\n            .attr('id', 'output');\n\n          rightSide\n            .append('div')\n            .attr('id', 'sandbox-nice-tree-decomposition')\n            .append('text')\n            .text('Nice Tree Decomposition')\n            .attr('class', 'container-text');\n\n          const controls = rightSide\n            .append('div')\n            .attr('id', 'controls');\n\n          controls\n            .append('h3')\n            .attr('id', 'algo-text')\n            .text('Current Algorithm = None Selected');\n\n          const controlsContainer = controls.append('div')\n            .attr('class', 'controls-container');\n\n          controlsContainer\n            .append('span')\n            .text('keyboard_arrow_left')\n            .attr('class', 'material-icons nav-arrows')\n            .on('click', () => niceTreeDecomposition.previous());\n\n          controlsContainer\n            .append('span')\n            .text('keyboard_arrow_right')\n            .attr('class', 'material-icons nav-arrows')\n            .on('click', () => niceTreeDecomposition.next());\n        },\n\n        '6. Sandbox',\n      ),\n    ];\n  }\n\n  startFirstLevel() {\n    d3.select('#main').style('flex', 0.95);\n    d3.select('.nav').style('flex', 0.05);\n    this.currentChapter = this.chapters[0];\n    this.createChapter();\n  }\n\n  goToChapter(chapter, isSandbox, isCustom) {\n    if (isSandbox) {\n      d3.select('.nav').style('flex', 0.05);\n      d3.select('#custom-algorithm-button').style('color', '#6d7e8e');\n      window.history.replaceState({}, '', '?');\n      d3.select('#main').selectAll('*').remove();\n      window.history.replaceState({}, '', '');\n      const params = new URLSearchParams(location.search);\n      params.set('sandbox', 'true');\n      window.history.replaceState({}, '', `?${params.toString()}`);\n      chapter.create();\n      /* Credit icon maker on every page */\n      d3.select('#main')\n        .append('div')\n        .style('position', 'absolute')\n        .style('z-index', 20)\n        .style('bottom', '10px')\n        .style('right', '10px')\n        .append('a')\n        .attr('href', 'https://icons8.com/icon/41215/graph-clique')\n        .text('Icon by Icons8');\n      return;\n    }\n\n    if (isCustom) {\n      d3.select('.nav').style('flex', 0.05);\n      d3.select('#main').selectAll('*').remove();\n      d3.select('#sandbox-button').style('color', '#6d7e8e');\n      d3.select('#custom-algorithm-button').style('color', '#1f1f1f');\n      window.history.replaceState({}, '', '?');\n      window.history.replaceState({}, '', '');\n      const params = new URLSearchParams(location.search);\n      params.set('custom', 'true');\n      window.history.replaceState({}, '', `?${params.toString()}`);\n      chapter.create();\n      return;\n    }\n\n    d3.select('#sandbox-button').style('color', '#6d7e8e');\n    this.currentChapter = chapter;\n    this.createChapter();\n  }\n\n\n  createChapter() {\n    /* Remove everything in main, sidebar and app area */\n    d3.select('#main').selectAll('*').remove();\n\n    /* Credit icon maker on every page */\n    d3.select('#main')\n      .append('div')\n      .style('position', 'absolute')\n      .style('z-index', 20)\n      .style('bottom', '10px')\n      .style('right', '10px')\n      .append('a')\n      .attr('href', 'https://icons8.com/icon/41215/graph-clique')\n      .text('Icon by Icons8');\n\n    /* Reset window globals */\n    window.graphContainer = null;\n    window.treeContainer = null;\n\n    d3.select('#main')\n      .append('div')\n      .attr('id', 'center-container');\n\n    const sidebar = new Sidebar(this.currentChapter.name);\n\n    d3.select('#center-container')\n      .append('div')\n      .attr('id', 'app-area');\n\n    d3.select('#app-area')\n      .append('div')\n      .attr('id', 'container');\n\n    d3.select('#app-area')\n      .append('div')\n      .attr('id', 'output');\n\n    this.currentChapter.create();\n\n    const params = new URLSearchParams(location.search);\n    const currentSectionIndex = params.get('section') - 1;\n\n    const chapterNumber = this.chapters.indexOf(this.currentChapter) + 1;\n    const chapterNumberString = `chapter${chapterNumber}`;\n\n    const sectionHandler = new SectionHandler(sidebar, chapterNumberString);\n    // const section = new Section(window.n, 'chapter5');\n    // sectionHandler.addSection(section);\n    this.sectionHandler = sectionHandler;\n\n    const currentSection = this.sectionHandler.sections[currentSectionIndex];\n\n    if (params.get('section') > 0 && currentSectionIndex < sectionHandler.sections.length) {\n      sectionHandler.goToSection(currentSection);\n    } else {\n      sectionHandler.loadFirstSection();\n    }\n\n    sidebar.addHandler(sectionHandler);\n    sidebar.addProgresBar();\n\n    this.chapters.map((c) => c.isActive = false);\n    this.currentChapter.isActive = true;\n  }\n}\n","export default class Roadmap {\n  constructor() {\n    this.chapterHandler = window.chapterHandler;\n  }\n\n  show() {\n    const data = this.chapterHandler.chapters.concat();\n\n    const w = document.getElementById('body').offsetWidth;\n    const h = document.getElementById('body').offsetHeight;\n\n    this.overlay = d3.select('body')\n      .append('div')\n      .attr('class', 'overlay')\n      .attr('id', 'overlay')\n      .style('height', `${h}px`)\n      .style('width', `${w}px`);\n    // .on('click', () => console.log('clicked overlay'));\n\n    this.container = this.overlay\n      .append('div')\n      .attr('class', 'roadmap-container');\n\n    this.close = this.container\n      .append('span')\n      .attr('class', 'material-icons roadmap-close')\n      .text('close')\n      .on('click', () => this.toggle());\n\n    this.container.append('text')\n      .attr('class', 'roadmap-title')\n      .text('Chapters')\n      .append('hr')\n      .style('background-color', 'rgb(51, 51, 51)');\n\n    this.roadmapChapters = this.container.append('div')\n      .attr('class', 'roadmap-chapters');\n\n    this.roadmapChapters\n      .selectAll('text')\n      .data(data)\n      .join(\n        (enter) => enter.append('text')\n          .text((d) => d.name)\n          .attr('class', (d) => (d.isActive ? 'roadmap-item-active' : 'roadmap-item'))\n          .on('click', (d) => {\n            this.visible = false;\n            this.hide();\n            this.chapterHandler.goToChapter(d);\n          }),\n        (update) => update,\n        (exit) => exit.remove(),\n      );\n  }\n\n  hide() {\n    this.overlay.remove();\n    this.container.remove();\n  }\n\n  toggle() {\n    if (this.visible) {\n      d3.select('#chapter-button').style('color', '#6d7e8e');\n      this.visible = false;\n      this.hide();\n    } else {\n      d3.select('#chapter-button').style('color', '#1f1f1f');\n      this.visible = true;\n      this.show();\n    }\n  }\n}\n","/* eslint-disable func-names */\n/* eslint-disable max-len */\n/* eslint-disable no-restricted-globals */\nimport ChapterHandler from './Handlers/ChapterHandler.js';\nimport Roadmap from './Components/Roadmap.js';\nimport generateRandomGraph from './Utilities/helpers.js';\n\nconst chapterHandler = new ChapterHandler();\nwindow.chapterHandler = chapterHandler;\n\nd3.select(window).on('load', async () => {\n  const params = new URLSearchParams(location.search);\n  const hasChapter = params.has('chapter');\n  const chapterIndex = params.get('chapter') - 1;\n  const hasSandbox = params.has('sandbox');\n  const hasCustom = params.has('custom');\n\n  if (hasSandbox) {\n    chapterHandler.goToChapter(chapterHandler.chapters[chapterHandler.chapters.length - 1], hasSandbox);\n  }\n\n  if (hasCustom) {\n    chapterHandler.goToChapter(chapterHandler.chapters[chapterHandler.chapters.length - 2], hasSandbox, hasCustom);\n  }\n\n  if (hasChapter && chapterIndex < chapterHandler.chapters.length) {\n    const currentChapter = chapterHandler.chapters[chapterIndex];\n    chapterHandler.goToChapter(currentChapter, false);\n  }\n});\n\nexport const width = document.getElementById('main').offsetWidth;\nexport const height = document.getElementById('main').offsetHeight;\n\nconst colors = d3.scaleOrdinal(d3.schemeCategory10);\n\n\nconst roadmap = new Roadmap();\n\nconst logoContainer = d3.select('#main')\n  .append('div')\n  .attr('class', 'logo-container');\n  // .style('position', 'absolute')\n  // .style('top', `${height / 6}px`);\n\nlogoContainer.append('h1')\n  .text('GraphWidth.com')\n  .style('font-size', '50px')\n  .style('margin', 0)\n  .style('z-index', 10)\n  .style('color', 'white');\n\nlogoContainer.append('h2')\n  .text('An interactive way to learn graph width measures.')\n  .style('color', 'white')\n  .style('opacity', '85%')\n  .style('z-index', '10')\n  .attr('class', 'subtitle');\n\nlogoContainer.append('button')\n  .text('Start Learning')\n  .attr('class', 'pure-material-button-contained')\n  .style('z-index', '20')\n  .on('click', () => chapterHandler.startFirstLevel());\n\nd3.select('#main')\n  .append('div')\n  .style('position', 'absolute')\n  .style('z-index', 20)\n  .style('bottom', '10px')\n  .style('right', '10px')\n  .append('a')\n  .attr('href', 'https://icons8.com/icon/41215/graph-clique')\n  .text('Icon by Icons8');\n\nd3.select('#chapter-button').on('click', () => {\n  roadmap.toggle();\n});\n\nd3.select('#github-button').on('click', () => {\n  window.open(\n    'https://github.com/FrederikJorgensen/graph-width-visualizer',\n    '_blank',\n  );\n});\n\nd3.select('#sandbox-button').on('click', () => {\n  d3.select('#chapter-button').style('color', '#6d7e8e');\n  d3.select('#sandbox-button').style('color', '#1f1f1f');\n  chapterHandler.goToChapter(chapterHandler.chapters[chapterHandler.chapters.length - 1], true);\n});\n\nd3.select('#custom-algorithm-button').on('click', () => {\n  chapterHandler.goToChapter(chapterHandler.chapters[chapterHandler.chapters.length - 2], false, true);\n});\n\n/* Close modal if clicked outside of modal box */\nwindow.onclick = function (event) {\n  const overlay = document.getElementById('overlay');\n  if (event.target === overlay) {\n    roadmap.toggle();\n  }\n};\n\n/* Handle key events */\nd3.select('body').on('keydown', () => {\n  switch (event.key) {\n    case 'Escape':\n      roadmap.toggle();\n      break;\n    case 'ArrowLeft':\n      if (window.sectionHandler) window.sectionHandler.goPreviousSection();\n      break;\n    case 'ArrowRight':\n      if (window.sectionHandler) window.sectionHandler.goNextSection();\n      break;\n    default:\n  }\n});\n\nd3.select('#main').style('background-color', '#1F2125');\n\nconst svg = d3.select('#main').append('svg').attr('width', width).attr('height', height);\nconst graph = generateRandomGraph(10, 10);\n\nsvg.selectAll('line')\n  .data(graph.links)\n  .enter()\n  .append('line')\n  .style('stroke', 'lightgrey')\n  .style('stroke-width', '2.5px');\n\nsvg.selectAll('circle')\n  .data(graph.nodes)\n  .enter()\n  .append('circle')\n  .style('fill', (d) => colors(d.id))\n  .attr('r', 18);\n\nconst simulation = d3.forceSimulation()\n  .force('x', d3.forceX(width / 2).strength(0.1))\n  .force('y', d3.forceY(height / 2).strength(0.1))\n  .force('center', d3.forceCenter(width / 2, height / 2))\n  .nodes(graph.nodes)\n  .force('charge', d3.forceManyBody().strength(-450))\n  .force('link', d3.forceLink(graph.links).id((d) => d.id).strength(0.3))\n  .on('tick', () => {\n    svg.selectAll('circle').attr('cx', (d) => d.x).attr('cy', (d) => d.y);\n\n    svg.selectAll('line').attr('x1', (d) => d.source.x)\n      .attr('y1', (d) => d.source.y)\n      .attr('x2', (d) => d.target.x)\n      .attr('y2', (d) => d.target.y);\n  });\n\nsimulation.force('link').links(graph.links);\n"]}